; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_fwd_kernel(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture readonly %1, ptr addrspace(1) nocapture readonly %2, float %3, ptr addrspace(1) nocapture writeonly %4, ptr addrspace(1) nocapture writeonly %5, ptr addrspace(1) nocapture writeonly %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 %17, i32 %18, i32 %19, i32 %20, i32 %21, i32 %22) local_unnamed_addr #0 !dbg !6 {
  %24 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !9
  %25 = tail call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !10
  %26 = shl i32 %24, 7, !dbg !11
  %27 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !12
  %28 = and i32 %27, 63, !dbg !12
  %29 = lshr i32 %27, 6, !dbg !12
  %30 = and i32 %29, 3, !dbg !12
  %31 = shl nuw nsw i32 %30, 5, !dbg !12
  %32 = and i32 %27, 31, !dbg !12
  %33 = or disjoint i32 %31, %32, !dbg !12
  %34 = lshr i32 %28, 3, !dbg !12
  %35 = shl nuw nsw i32 %30, 3, !dbg !12
  %36 = or disjoint i32 %35, %34, !dbg !12
  %37 = or disjoint i32 %36, 32, !dbg !12
  %38 = or disjoint i32 %36, 64, !dbg !12
  %39 = or disjoint i32 %36, 96, !dbg !12
  %40 = and i32 %27, 127, !dbg !12
  %41 = or disjoint i32 %26, %40, !dbg !13
  %42 = sdiv i32 %8, %9, !dbg !14
  %43 = mul i32 %42, %25, !dbg !15
  %44 = add i32 %43, %26, !dbg !16
  %45 = sext i32 %9 to i64, !dbg !17
  %46 = sext i32 %44 to i64, !dbg !17
  %47 = sext i32 %22 to i64, !dbg !18
  %48 = sext i32 %12 to i64, !dbg !18
  %49 = sext i32 %15 to i64, !dbg !19
  %50 = sext i32 %18 to i64, !dbg !20
  %51 = zext nneg i32 %33 to i64
  %52 = zext nneg i32 %36 to i64
  %53 = zext nneg i32 %37 to i64
  %54 = zext nneg i32 %38 to i64
  %55 = zext nneg i32 %39 to i64
  %56 = add nsw i64 %46, %51, !dbg !21
  %57 = add nsw i64 %46, %52, !dbg !21
  %58 = add nsw i64 %46, %53, !dbg !21
  %59 = add nsw i64 %46, %54, !dbg !21
  %60 = add nsw i64 %46, %55, !dbg !21
  %61 = mul nsw i64 %57, %45, !dbg !21
  %62 = mul nsw i64 %58, %45, !dbg !21
  %63 = mul nsw i64 %59, %45, !dbg !21
  %64 = mul nsw i64 %60, %45, !dbg !21
  %65 = lshr i32 %28, 5, !dbg !21
  %66 = shl nuw nsw i32 %65, 2, !dbg !21
  %67 = or disjoint i32 %66, 1, !dbg !21
  %68 = or disjoint i32 %66, 2, !dbg !21
  %69 = or disjoint i32 %66, 3, !dbg !21
  %70 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !21
  %71 = shufflevector <4 x i32> %70, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !21
  %72 = or disjoint <4 x i32> %71, <i32 8, i32 9, i32 10, i32 11>, !dbg !21
  %73 = or disjoint <4 x i32> %71, <i32 16, i32 17, i32 18, i32 19>, !dbg !21
  %74 = or disjoint <4 x i32> %71, <i32 24, i32 25, i32 26, i32 27>, !dbg !21
  %75 = or disjoint <4 x i32> %71, <i32 32, i32 33, i32 34, i32 35>, !dbg !21
  %76 = or disjoint <4 x i32> %71, <i32 40, i32 41, i32 42, i32 43>, !dbg !21
  %77 = or disjoint <4 x i32> %71, <i32 48, i32 49, i32 50, i32 51>, !dbg !21
  %78 = or disjoint <4 x i32> %71, <i32 56, i32 57, i32 58, i32 59>, !dbg !21
  %79 = shl i32 %27, 3, !dbg !21
  %80 = and i32 %79, 56, !dbg !21
  %81 = zext nneg i32 %66 to i64
  %82 = zext nneg i32 %67 to i64
  %83 = zext nneg i32 %68 to i64
  %84 = zext nneg i32 %69 to i64
  %85 = extractelement <4 x i32> %72, i64 0
  %86 = zext nneg i32 %85 to i64
  %87 = extractelement <4 x i32> %72, i64 1
  %88 = zext nneg i32 %87 to i64
  %89 = extractelement <4 x i32> %72, i64 2
  %90 = zext nneg i32 %89 to i64
  %91 = extractelement <4 x i32> %72, i64 3
  %92 = zext nneg i32 %91 to i64
  %93 = extractelement <4 x i32> %73, i64 0
  %94 = zext nneg i32 %93 to i64
  %95 = extractelement <4 x i32> %73, i64 1
  %96 = zext nneg i32 %95 to i64
  %97 = extractelement <4 x i32> %73, i64 2
  %98 = zext nneg i32 %97 to i64
  %99 = extractelement <4 x i32> %73, i64 3
  %100 = zext nneg i32 %99 to i64
  %101 = extractelement <4 x i32> %74, i64 0
  %102 = zext nneg i32 %101 to i64
  %103 = extractelement <4 x i32> %74, i64 1
  %104 = zext nneg i32 %103 to i64
  %105 = extractelement <4 x i32> %74, i64 2
  %106 = zext nneg i32 %105 to i64
  %107 = extractelement <4 x i32> %74, i64 3
  %108 = zext nneg i32 %107 to i64
  %109 = extractelement <4 x i32> %75, i64 0
  %110 = zext nneg i32 %109 to i64
  %111 = extractelement <4 x i32> %75, i64 1
  %112 = zext nneg i32 %111 to i64
  %113 = extractelement <4 x i32> %75, i64 2
  %114 = zext nneg i32 %113 to i64
  %115 = extractelement <4 x i32> %75, i64 3
  %116 = zext nneg i32 %115 to i64
  %117 = extractelement <4 x i32> %76, i64 0
  %118 = zext nneg i32 %117 to i64
  %119 = extractelement <4 x i32> %76, i64 1
  %120 = zext nneg i32 %119 to i64
  %121 = extractelement <4 x i32> %76, i64 2
  %122 = zext nneg i32 %121 to i64
  %123 = extractelement <4 x i32> %76, i64 3
  %124 = zext nneg i32 %123 to i64
  %125 = extractelement <4 x i32> %77, i64 0
  %126 = zext nneg i32 %125 to i64
  %127 = extractelement <4 x i32> %77, i64 1
  %128 = zext nneg i32 %127 to i64
  %129 = extractelement <4 x i32> %77, i64 2
  %130 = zext nneg i32 %129 to i64
  %131 = extractelement <4 x i32> %77, i64 3
  %132 = zext nneg i32 %131 to i64
  %133 = extractelement <4 x i32> %78, i64 0
  %134 = zext nneg i32 %133 to i64
  %135 = extractelement <4 x i32> %78, i64 1
  %136 = zext nneg i32 %135 to i64
  %137 = extractelement <4 x i32> %78, i64 2
  %138 = zext nneg i32 %137 to i64
  %139 = extractelement <4 x i32> %78, i64 3
  %140 = zext nneg i32 %139 to i64
  %141 = zext nneg i32 %80 to i64
  %142 = getelementptr half, ptr addrspace(1) %0, i64 %61, !dbg !21
  %143 = getelementptr half, ptr addrspace(1) %142, i64 %141, !dbg !21
  %144 = getelementptr half, ptr addrspace(1) %0, i64 %62, !dbg !21
  %145 = getelementptr half, ptr addrspace(1) %144, i64 %141, !dbg !21
  %146 = getelementptr half, ptr addrspace(1) %0, i64 %63, !dbg !21
  %147 = getelementptr half, ptr addrspace(1) %146, i64 %141, !dbg !21
  %148 = getelementptr half, ptr addrspace(1) %0, i64 %64, !dbg !21
  %149 = getelementptr half, ptr addrspace(1) %148, i64 %141, !dbg !21
  %150 = addrspacecast ptr addrspace(1) %143 to ptr, !dbg !21
  %151 = load <8 x half>, ptr %150, align 16, !dbg !21
  %152 = addrspacecast ptr addrspace(1) %145 to ptr, !dbg !21
  %153 = load <8 x half>, ptr %152, align 16, !dbg !21
  %154 = addrspacecast ptr addrspace(1) %147 to ptr, !dbg !21
  %155 = load <8 x half>, ptr %154, align 16, !dbg !21
  %156 = addrspacecast ptr addrspace(1) %149 to ptr, !dbg !21
  %157 = load <8 x half>, ptr %156, align 16, !dbg !21
  %158 = lshr i32 %27, 3, !dbg !21
  %159 = and i32 %158, 15, !dbg !21
  %160 = shl i32 %158, 6, !dbg !21
  %161 = and i32 %160, 1984, !dbg !21
  %162 = lshr exact i32 %80, 2, !dbg !21
  %163 = xor i32 %162, %159, !dbg !21
  %164 = shl nuw nsw i32 %163, 2, !dbg !21
  %165 = or disjoint i32 %164, %161, !dbg !21
  %166 = zext nneg i32 %165 to i64, !dbg !21
  %167 = getelementptr half, ptr addrspace(3) @global_smem, i64 %166, !dbg !21
  %168 = or disjoint i32 %162, 1, !dbg !21
  %169 = xor i32 %168, %159, !dbg !21
  %170 = shl nuw nsw i32 %169, 2, !dbg !21
  %171 = or disjoint i32 %170, %161, !dbg !21
  %172 = zext nneg i32 %171 to i64, !dbg !21
  %173 = getelementptr half, ptr addrspace(3) @global_smem, i64 %172, !dbg !21
  %174 = or disjoint i32 %161, 2048, !dbg !21
  %175 = or disjoint i32 %164, %174, !dbg !21
  %176 = zext nneg i32 %175 to i64, !dbg !21
  %177 = getelementptr half, ptr addrspace(3) @global_smem, i64 %176, !dbg !21
  %178 = or disjoint i32 %170, %174, !dbg !21
  %179 = zext nneg i32 %178 to i64, !dbg !21
  %180 = getelementptr half, ptr addrspace(3) @global_smem, i64 %179, !dbg !21
  %181 = or disjoint i32 %161, 4096, !dbg !21
  %182 = or disjoint i32 %164, %181, !dbg !21
  %183 = zext nneg i32 %182 to i64, !dbg !21
  %184 = getelementptr half, ptr addrspace(3) @global_smem, i64 %183, !dbg !21
  %185 = or disjoint i32 %170, %181, !dbg !21
  %186 = zext nneg i32 %185 to i64, !dbg !21
  %187 = getelementptr half, ptr addrspace(3) @global_smem, i64 %186, !dbg !21
  %188 = or disjoint i32 %161, 6144, !dbg !21
  %189 = or disjoint i32 %164, %188, !dbg !21
  %190 = zext nneg i32 %189 to i64, !dbg !21
  %191 = getelementptr half, ptr addrspace(3) @global_smem, i64 %190, !dbg !21
  %192 = or disjoint i32 %170, %188, !dbg !21
  %193 = zext nneg i32 %192 to i64, !dbg !21
  %194 = getelementptr half, ptr addrspace(3) @global_smem, i64 %193, !dbg !21
  %195 = shufflevector <8 x half> %151, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %195, ptr addrspace(3) %167, align 8, !dbg !21
  %196 = shufflevector <8 x half> %151, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !21
  store <4 x half> %196, ptr addrspace(3) %173, align 8, !dbg !21
  %197 = shufflevector <8 x half> %153, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %197, ptr addrspace(3) %177, align 8, !dbg !21
  %198 = shufflevector <8 x half> %153, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !21
  store <4 x half> %198, ptr addrspace(3) %180, align 8, !dbg !21
  %199 = shufflevector <8 x half> %155, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %199, ptr addrspace(3) %184, align 8, !dbg !21
  %200 = shufflevector <8 x half> %155, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !21
  store <4 x half> %200, ptr addrspace(3) %187, align 8, !dbg !21
  %201 = shufflevector <8 x half> %157, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !21
  store <4 x half> %201, ptr addrspace(3) %191, align 8, !dbg !21
  %202 = shufflevector <8 x half> %157, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !21
  store <4 x half> %202, ptr addrspace(3) %194, align 8, !dbg !21
  fence syncscope("workgroup") release, !dbg !21
  tail call void @llvm.amdgcn.s.barrier(), !dbg !21
  fence syncscope("workgroup") acquire, !dbg !21
  %203 = icmp ugt i32 %28, 31, !dbg !21
  %204 = zext i1 %203 to i32, !dbg !21
  %205 = and i32 %27, 15, !dbg !21
  %206 = xor i32 %205, %204, !dbg !21
  %207 = shl nuw nsw i32 %206, 2, !dbg !21
  %208 = shl nuw nsw i32 %33, 6, !dbg !21
  %209 = or disjoint i32 %208, %207, !dbg !21
  %210 = or disjoint i32 %204, 2, !dbg !21
  %211 = xor i32 %210, %205, !dbg !21
  %212 = shl nuw nsw i32 %211, 2, !dbg !21
  %213 = or disjoint i32 %212, %208, !dbg !21
  %214 = or disjoint i32 %204, 4, !dbg !21
  %215 = xor i32 %214, %205, !dbg !21
  %216 = shl nuw nsw i32 %215, 2, !dbg !21
  %217 = or disjoint i32 %216, %208, !dbg !21
  %218 = or disjoint i32 %204, 6, !dbg !21
  %219 = xor i32 %218, %205, !dbg !21
  %220 = shl nuw nsw i32 %219, 2, !dbg !21
  %221 = or disjoint i32 %220, %208, !dbg !21
  %222 = or disjoint i32 %204, 8, !dbg !21
  %223 = xor i32 %222, %205, !dbg !21
  %224 = shl nuw nsw i32 %223, 2, !dbg !21
  %225 = or disjoint i32 %224, %208, !dbg !21
  %226 = or disjoint i32 %204, 10, !dbg !21
  %227 = xor i32 %226, %205, !dbg !21
  %228 = shl nuw nsw i32 %227, 2, !dbg !21
  %229 = or disjoint i32 %228, %208, !dbg !21
  %230 = or disjoint i32 %204, 12, !dbg !21
  %231 = xor i32 %230, %205, !dbg !21
  %232 = shl nuw nsw i32 %231, 2, !dbg !21
  %233 = or disjoint i32 %232, %208, !dbg !21
  %234 = or disjoint i32 %204, 14, !dbg !21
  %235 = xor i32 %234, %205, !dbg !21
  %236 = shl nuw nsw i32 %235, 2, !dbg !21
  %237 = or disjoint i32 %236, %208, !dbg !21
  %238 = zext nneg i32 %209 to i64, !dbg !21
  %239 = getelementptr half, ptr addrspace(3) @global_smem, i64 %238, !dbg !21
  %240 = load <4 x half>, ptr addrspace(3) %239, align 8, !dbg !21
  %241 = zext nneg i32 %213 to i64, !dbg !21
  %242 = getelementptr half, ptr addrspace(3) @global_smem, i64 %241, !dbg !21
  %243 = load <4 x half>, ptr addrspace(3) %242, align 8, !dbg !21
  %244 = zext nneg i32 %217 to i64, !dbg !21
  %245 = getelementptr half, ptr addrspace(3) @global_smem, i64 %244, !dbg !21
  %246 = load <4 x half>, ptr addrspace(3) %245, align 8, !dbg !21
  %247 = zext nneg i32 %221 to i64, !dbg !21
  %248 = getelementptr half, ptr addrspace(3) @global_smem, i64 %247, !dbg !21
  %249 = load <4 x half>, ptr addrspace(3) %248, align 8, !dbg !21
  %250 = zext nneg i32 %225 to i64, !dbg !21
  %251 = getelementptr half, ptr addrspace(3) @global_smem, i64 %250, !dbg !21
  %252 = load <4 x half>, ptr addrspace(3) %251, align 8, !dbg !21
  %253 = zext nneg i32 %229 to i64, !dbg !21
  %254 = getelementptr half, ptr addrspace(3) @global_smem, i64 %253, !dbg !21
  %255 = load <4 x half>, ptr addrspace(3) %254, align 8, !dbg !21
  %256 = zext nneg i32 %233 to i64, !dbg !21
  %257 = getelementptr half, ptr addrspace(3) @global_smem, i64 %256, !dbg !21
  %258 = load <4 x half>, ptr addrspace(3) %257, align 8, !dbg !21
  %259 = zext nneg i32 %237 to i64, !dbg !21
  %260 = getelementptr half, ptr addrspace(3) @global_smem, i64 %259, !dbg !21
  %261 = load <4 x half>, ptr addrspace(3) %260, align 8, !dbg !21
  %262 = add i32 %26, 128, !dbg !22
  %invariant.gep = getelementptr half, ptr addrspace(1) %1, i64 %141, !dbg !23
  %invariant.gep102 = getelementptr half, ptr addrspace(1) %2, i64 %141, !dbg !23
  %263 = icmp sgt i32 %262, 0, !dbg !23
  br i1 %263, label %.lr.ph, label %._crit_edge, !dbg !23

.lr.ph:                                           ; preds = %23
  %264 = or disjoint i32 %33, %26, !dbg !13
  %265 = sext i32 %43 to i64, !dbg !18
  %266 = shl nuw nsw i32 %32, 6
  %267 = or disjoint i32 %207, %266
  %268 = or disjoint i32 %212, %266
  %269 = or disjoint i32 %216, %266
  %270 = or disjoint i32 %220, %266
  %271 = or disjoint i32 %224, %266
  %272 = or disjoint i32 %228, %266
  %273 = or disjoint i32 %232, %266
  %274 = or disjoint i32 %236, %266
  %275 = or disjoint i32 %266, 2048
  %276 = or disjoint i32 %207, %275
  %277 = or disjoint i32 %212, %275
  %278 = or disjoint i32 %216, %275
  %279 = or disjoint i32 %220, %275
  %280 = or disjoint i32 %224, %275
  %281 = or disjoint i32 %228, %275
  %282 = or disjoint i32 %232, %275
  %283 = or disjoint i32 %236, %275
  %284 = or disjoint i32 %266, 4096
  %285 = or disjoint i32 %207, %284
  %286 = or disjoint i32 %212, %284
  %287 = or disjoint i32 %216, %284
  %288 = or disjoint i32 %220, %284
  %289 = or disjoint i32 %224, %284
  %290 = or disjoint i32 %228, %284
  %291 = or disjoint i32 %232, %284
  %292 = or disjoint i32 %236, %284
  %293 = or disjoint i32 %266, 6144
  %294 = or disjoint i32 %207, %293
  %295 = or disjoint i32 %212, %293
  %296 = or disjoint i32 %216, %293
  %297 = or disjoint i32 %220, %293
  %298 = or disjoint i32 %224, %293
  %299 = or disjoint i32 %228, %293
  %300 = or disjoint i32 %232, %293
  %301 = or disjoint i32 %236, %293
  %302 = zext nneg i32 %267 to i64
  %303 = getelementptr half, ptr addrspace(3) @global_smem, i64 %302
  %304 = zext nneg i32 %268 to i64
  %305 = getelementptr half, ptr addrspace(3) @global_smem, i64 %304
  %306 = zext nneg i32 %269 to i64
  %307 = getelementptr half, ptr addrspace(3) @global_smem, i64 %306
  %308 = zext nneg i32 %270 to i64
  %309 = getelementptr half, ptr addrspace(3) @global_smem, i64 %308
  %310 = zext nneg i32 %271 to i64
  %311 = getelementptr half, ptr addrspace(3) @global_smem, i64 %310
  %312 = zext nneg i32 %272 to i64
  %313 = getelementptr half, ptr addrspace(3) @global_smem, i64 %312
  %314 = zext nneg i32 %273 to i64
  %315 = getelementptr half, ptr addrspace(3) @global_smem, i64 %314
  %316 = zext nneg i32 %274 to i64
  %317 = getelementptr half, ptr addrspace(3) @global_smem, i64 %316
  %318 = zext nneg i32 %276 to i64
  %319 = getelementptr half, ptr addrspace(3) @global_smem, i64 %318
  %320 = zext nneg i32 %277 to i64
  %321 = getelementptr half, ptr addrspace(3) @global_smem, i64 %320
  %322 = zext nneg i32 %278 to i64
  %323 = getelementptr half, ptr addrspace(3) @global_smem, i64 %322
  %324 = zext nneg i32 %279 to i64
  %325 = getelementptr half, ptr addrspace(3) @global_smem, i64 %324
  %326 = zext nneg i32 %280 to i64
  %327 = getelementptr half, ptr addrspace(3) @global_smem, i64 %326
  %328 = zext nneg i32 %281 to i64
  %329 = getelementptr half, ptr addrspace(3) @global_smem, i64 %328
  %330 = zext nneg i32 %282 to i64
  %331 = getelementptr half, ptr addrspace(3) @global_smem, i64 %330
  %332 = zext nneg i32 %283 to i64
  %333 = getelementptr half, ptr addrspace(3) @global_smem, i64 %332
  %334 = zext nneg i32 %285 to i64
  %335 = getelementptr half, ptr addrspace(3) @global_smem, i64 %334
  %336 = zext nneg i32 %286 to i64
  %337 = getelementptr half, ptr addrspace(3) @global_smem, i64 %336
  %338 = zext nneg i32 %287 to i64
  %339 = getelementptr half, ptr addrspace(3) @global_smem, i64 %338
  %340 = zext nneg i32 %288 to i64
  %341 = getelementptr half, ptr addrspace(3) @global_smem, i64 %340
  %342 = zext nneg i32 %289 to i64
  %343 = getelementptr half, ptr addrspace(3) @global_smem, i64 %342
  %344 = zext nneg i32 %290 to i64
  %345 = getelementptr half, ptr addrspace(3) @global_smem, i64 %344
  %346 = zext nneg i32 %291 to i64
  %347 = getelementptr half, ptr addrspace(3) @global_smem, i64 %346
  %348 = zext nneg i32 %292 to i64
  %349 = getelementptr half, ptr addrspace(3) @global_smem, i64 %348
  %350 = zext nneg i32 %294 to i64
  %351 = getelementptr half, ptr addrspace(3) @global_smem, i64 %350
  %352 = zext nneg i32 %295 to i64
  %353 = getelementptr half, ptr addrspace(3) @global_smem, i64 %352
  %354 = zext nneg i32 %296 to i64
  %355 = getelementptr half, ptr addrspace(3) @global_smem, i64 %354
  %356 = zext nneg i32 %297 to i64
  %357 = getelementptr half, ptr addrspace(3) @global_smem, i64 %356
  %358 = zext nneg i32 %298 to i64
  %359 = getelementptr half, ptr addrspace(3) @global_smem, i64 %358
  %360 = zext nneg i32 %299 to i64
  %361 = getelementptr half, ptr addrspace(3) @global_smem, i64 %360
  %362 = zext nneg i32 %300 to i64
  %363 = getelementptr half, ptr addrspace(3) @global_smem, i64 %362
  %364 = zext nneg i32 %301 to i64
  %365 = getelementptr half, ptr addrspace(3) @global_smem, i64 %364
  %366 = shl i32 %27, 2
  %367 = xor i32 %366, 128
  %368 = or disjoint i32 %161, %80
  %369 = zext nneg i32 %368 to i64
  %370 = getelementptr half, ptr addrspace(3) @global_smem, i64 %369
  %371 = or disjoint i32 %174, %80
  %372 = zext nneg i32 %371 to i64
  %373 = getelementptr half, ptr addrspace(3) @global_smem, i64 %372
  %374 = or disjoint i32 %181, %80
  %375 = zext nneg i32 %374 to i64
  %376 = getelementptr half, ptr addrspace(3) @global_smem, i64 %375
  %377 = or disjoint i32 %188, %80
  %378 = zext nneg i32 %377 to i64
  %379 = getelementptr half, ptr addrspace(3) @global_smem, i64 %378
  %380 = shl nuw nsw i32 %65, 8
  %381 = or disjoint i32 %380, %32
  %382 = or disjoint i32 %381, 64
  %383 = or disjoint i32 %381, 128
  %384 = or disjoint i32 %381, 192
  %385 = or disjoint i32 %381, 512
  %386 = or disjoint i32 %381, 576
  %387 = or disjoint i32 %381, 640
  %388 = or disjoint i32 %381, 704
  %389 = or disjoint i32 %381, 1024
  %390 = or disjoint i32 %381, 1088
  %391 = or disjoint i32 %381, 1152
  %392 = or disjoint i32 %381, 1216
  %393 = or disjoint i32 %381, 1536
  %394 = or disjoint i32 %381, 1600
  %395 = or disjoint i32 %381, 1664
  %396 = or disjoint i32 %381, 1728
  %397 = or disjoint i32 %381, 2048
  %398 = or disjoint i32 %381, 2112
  %399 = or disjoint i32 %381, 2176
  %400 = or disjoint i32 %381, 2240
  %401 = or disjoint i32 %381, 2560
  %402 = or disjoint i32 %381, 2624
  %403 = or disjoint i32 %381, 2688
  %404 = or disjoint i32 %381, 2752
  %405 = or disjoint i32 %381, 3072
  %406 = or disjoint i32 %381, 3136
  %407 = or disjoint i32 %381, 3200
  %408 = or disjoint i32 %381, 3264
  %409 = or disjoint i32 %381, 3584
  %410 = or disjoint i32 %381, 3648
  %411 = or disjoint i32 %381, 3712
  %412 = or disjoint i32 %381, 3776
  %413 = or disjoint i32 %381, 4096
  %414 = or disjoint i32 %381, 4160
  %415 = or disjoint i32 %381, 4224
  %416 = or disjoint i32 %381, 4288
  %417 = or disjoint i32 %381, 4608
  %418 = or disjoint i32 %381, 4672
  %419 = or disjoint i32 %381, 4736
  %420 = or disjoint i32 %381, 4800
  %421 = or disjoint i32 %381, 5120
  %422 = or disjoint i32 %381, 5184
  %423 = or disjoint i32 %381, 5248
  %424 = or disjoint i32 %381, 5312
  %425 = or disjoint i32 %381, 5632
  %426 = or disjoint i32 %381, 5696
  %427 = or disjoint i32 %381, 5760
  %428 = or disjoint i32 %381, 5824
  %429 = or disjoint i32 %381, 6144
  %430 = or disjoint i32 %381, 6208
  %431 = or disjoint i32 %381, 6272
  %432 = or disjoint i32 %381, 6336
  %433 = or disjoint i32 %381, 6656
  %434 = or disjoint i32 %381, 6720
  %435 = or disjoint i32 %381, 6784
  %436 = or disjoint i32 %381, 6848
  %437 = or disjoint i32 %381, 7168
  %438 = or disjoint i32 %381, 7232
  %439 = or disjoint i32 %381, 7296
  %440 = or disjoint i32 %381, 7360
  %441 = or disjoint i32 %381, 7680
  %442 = or disjoint i32 %381, 7744
  %443 = or disjoint i32 %381, 7808
  %444 = or disjoint i32 %381, 7872
  %445 = or disjoint i32 %381, 32
  %446 = or disjoint i32 %381, 96
  %447 = or disjoint i32 %381, 160
  %448 = or disjoint i32 %381, 224
  %449 = or disjoint i32 %381, 544
  %450 = or disjoint i32 %381, 608
  %451 = or disjoint i32 %381, 672
  %452 = or disjoint i32 %381, 736
  %453 = or disjoint i32 %381, 1056
  %454 = or disjoint i32 %381, 1120
  %455 = or disjoint i32 %381, 1184
  %456 = or disjoint i32 %381, 1248
  %457 = or disjoint i32 %381, 1568
  %458 = or disjoint i32 %381, 1632
  %459 = or disjoint i32 %381, 1696
  %460 = or disjoint i32 %381, 1760
  %461 = or disjoint i32 %381, 2080
  %462 = or disjoint i32 %381, 2144
  %463 = or disjoint i32 %381, 2208
  %464 = or disjoint i32 %381, 2272
  %465 = or disjoint i32 %381, 2592
  %466 = or disjoint i32 %381, 2656
  %467 = or disjoint i32 %381, 2720
  %468 = or disjoint i32 %381, 2784
  %469 = or disjoint i32 %381, 3104
  %470 = or disjoint i32 %381, 3168
  %471 = or disjoint i32 %381, 3232
  %472 = or disjoint i32 %381, 3296
  %473 = or disjoint i32 %381, 3616
  %474 = or disjoint i32 %381, 3680
  %475 = or disjoint i32 %381, 3744
  %476 = or disjoint i32 %381, 3808
  %477 = or disjoint i32 %381, 4128
  %478 = or disjoint i32 %381, 4192
  %479 = or disjoint i32 %381, 4256
  %480 = or disjoint i32 %381, 4320
  %481 = or disjoint i32 %381, 4640
  %482 = or disjoint i32 %381, 4704
  %483 = or disjoint i32 %381, 4768
  %484 = or disjoint i32 %381, 4832
  %485 = or disjoint i32 %381, 5152
  %486 = or disjoint i32 %381, 5216
  %487 = or disjoint i32 %381, 5280
  %488 = or disjoint i32 %381, 5344
  %489 = or disjoint i32 %381, 5664
  %490 = or disjoint i32 %381, 5728
  %491 = or disjoint i32 %381, 5792
  %492 = or disjoint i32 %381, 5856
  %493 = or disjoint i32 %381, 6176
  %494 = or disjoint i32 %381, 6240
  %495 = or disjoint i32 %381, 6304
  %496 = or disjoint i32 %381, 6368
  %497 = or disjoint i32 %381, 6688
  %498 = or disjoint i32 %381, 6752
  %499 = or disjoint i32 %381, 6816
  %500 = or disjoint i32 %381, 6880
  %501 = or disjoint i32 %381, 7200
  %502 = or disjoint i32 %381, 7264
  %503 = or disjoint i32 %381, 7328
  %504 = or disjoint i32 %381, 7392
  %505 = or disjoint i32 %381, 7712
  %506 = or disjoint i32 %381, 7776
  %507 = or disjoint i32 %381, 7840
  %508 = or disjoint i32 %381, 7904
  %509 = zext nneg i32 %381 to i64
  %510 = getelementptr half, ptr addrspace(3) @global_smem, i64 %509
  %511 = zext nneg i32 %382 to i64
  %512 = getelementptr half, ptr addrspace(3) @global_smem, i64 %511
  %513 = zext nneg i32 %383 to i64
  %514 = getelementptr half, ptr addrspace(3) @global_smem, i64 %513
  %515 = zext nneg i32 %384 to i64
  %516 = getelementptr half, ptr addrspace(3) @global_smem, i64 %515
  %517 = zext nneg i32 %385 to i64
  %518 = getelementptr half, ptr addrspace(3) @global_smem, i64 %517
  %519 = zext nneg i32 %386 to i64
  %520 = getelementptr half, ptr addrspace(3) @global_smem, i64 %519
  %521 = zext nneg i32 %387 to i64
  %522 = getelementptr half, ptr addrspace(3) @global_smem, i64 %521
  %523 = zext nneg i32 %388 to i64
  %524 = getelementptr half, ptr addrspace(3) @global_smem, i64 %523
  %525 = zext nneg i32 %389 to i64
  %526 = getelementptr half, ptr addrspace(3) @global_smem, i64 %525
  %527 = zext nneg i32 %390 to i64
  %528 = getelementptr half, ptr addrspace(3) @global_smem, i64 %527
  %529 = zext nneg i32 %391 to i64
  %530 = getelementptr half, ptr addrspace(3) @global_smem, i64 %529
  %531 = zext nneg i32 %392 to i64
  %532 = getelementptr half, ptr addrspace(3) @global_smem, i64 %531
  %533 = zext nneg i32 %393 to i64
  %534 = getelementptr half, ptr addrspace(3) @global_smem, i64 %533
  %535 = zext nneg i32 %394 to i64
  %536 = getelementptr half, ptr addrspace(3) @global_smem, i64 %535
  %537 = zext nneg i32 %395 to i64
  %538 = getelementptr half, ptr addrspace(3) @global_smem, i64 %537
  %539 = zext nneg i32 %396 to i64
  %540 = getelementptr half, ptr addrspace(3) @global_smem, i64 %539
  %541 = zext nneg i32 %397 to i64
  %542 = getelementptr half, ptr addrspace(3) @global_smem, i64 %541
  %543 = zext nneg i32 %398 to i64
  %544 = getelementptr half, ptr addrspace(3) @global_smem, i64 %543
  %545 = zext nneg i32 %399 to i64
  %546 = getelementptr half, ptr addrspace(3) @global_smem, i64 %545
  %547 = zext nneg i32 %400 to i64
  %548 = getelementptr half, ptr addrspace(3) @global_smem, i64 %547
  %549 = zext nneg i32 %401 to i64
  %550 = getelementptr half, ptr addrspace(3) @global_smem, i64 %549
  %551 = zext nneg i32 %402 to i64
  %552 = getelementptr half, ptr addrspace(3) @global_smem, i64 %551
  %553 = zext nneg i32 %403 to i64
  %554 = getelementptr half, ptr addrspace(3) @global_smem, i64 %553
  %555 = zext nneg i32 %404 to i64
  %556 = getelementptr half, ptr addrspace(3) @global_smem, i64 %555
  %557 = zext nneg i32 %405 to i64
  %558 = getelementptr half, ptr addrspace(3) @global_smem, i64 %557
  %559 = zext nneg i32 %406 to i64
  %560 = getelementptr half, ptr addrspace(3) @global_smem, i64 %559
  %561 = zext nneg i32 %407 to i64
  %562 = getelementptr half, ptr addrspace(3) @global_smem, i64 %561
  %563 = zext nneg i32 %408 to i64
  %564 = getelementptr half, ptr addrspace(3) @global_smem, i64 %563
  %565 = zext nneg i32 %409 to i64
  %566 = getelementptr half, ptr addrspace(3) @global_smem, i64 %565
  %567 = zext nneg i32 %410 to i64
  %568 = getelementptr half, ptr addrspace(3) @global_smem, i64 %567
  %569 = zext nneg i32 %411 to i64
  %570 = getelementptr half, ptr addrspace(3) @global_smem, i64 %569
  %571 = zext nneg i32 %412 to i64
  %572 = getelementptr half, ptr addrspace(3) @global_smem, i64 %571
  %573 = zext nneg i32 %413 to i64
  %574 = getelementptr half, ptr addrspace(3) @global_smem, i64 %573
  %575 = zext nneg i32 %414 to i64
  %576 = getelementptr half, ptr addrspace(3) @global_smem, i64 %575
  %577 = zext nneg i32 %415 to i64
  %578 = getelementptr half, ptr addrspace(3) @global_smem, i64 %577
  %579 = zext nneg i32 %416 to i64
  %580 = getelementptr half, ptr addrspace(3) @global_smem, i64 %579
  %581 = zext nneg i32 %417 to i64
  %582 = getelementptr half, ptr addrspace(3) @global_smem, i64 %581
  %583 = zext nneg i32 %418 to i64
  %584 = getelementptr half, ptr addrspace(3) @global_smem, i64 %583
  %585 = zext nneg i32 %419 to i64
  %586 = getelementptr half, ptr addrspace(3) @global_smem, i64 %585
  %587 = zext nneg i32 %420 to i64
  %588 = getelementptr half, ptr addrspace(3) @global_smem, i64 %587
  %589 = zext nneg i32 %421 to i64
  %590 = getelementptr half, ptr addrspace(3) @global_smem, i64 %589
  %591 = zext nneg i32 %422 to i64
  %592 = getelementptr half, ptr addrspace(3) @global_smem, i64 %591
  %593 = zext nneg i32 %423 to i64
  %594 = getelementptr half, ptr addrspace(3) @global_smem, i64 %593
  %595 = zext nneg i32 %424 to i64
  %596 = getelementptr half, ptr addrspace(3) @global_smem, i64 %595
  %597 = zext nneg i32 %425 to i64
  %598 = getelementptr half, ptr addrspace(3) @global_smem, i64 %597
  %599 = zext nneg i32 %426 to i64
  %600 = getelementptr half, ptr addrspace(3) @global_smem, i64 %599
  %601 = zext nneg i32 %427 to i64
  %602 = getelementptr half, ptr addrspace(3) @global_smem, i64 %601
  %603 = zext nneg i32 %428 to i64
  %604 = getelementptr half, ptr addrspace(3) @global_smem, i64 %603
  %605 = zext nneg i32 %429 to i64
  %606 = getelementptr half, ptr addrspace(3) @global_smem, i64 %605
  %607 = zext nneg i32 %430 to i64
  %608 = getelementptr half, ptr addrspace(3) @global_smem, i64 %607
  %609 = zext nneg i32 %431 to i64
  %610 = getelementptr half, ptr addrspace(3) @global_smem, i64 %609
  %611 = zext nneg i32 %432 to i64
  %612 = getelementptr half, ptr addrspace(3) @global_smem, i64 %611
  %613 = zext nneg i32 %433 to i64
  %614 = getelementptr half, ptr addrspace(3) @global_smem, i64 %613
  %615 = zext nneg i32 %434 to i64
  %616 = getelementptr half, ptr addrspace(3) @global_smem, i64 %615
  %617 = zext nneg i32 %435 to i64
  %618 = getelementptr half, ptr addrspace(3) @global_smem, i64 %617
  %619 = zext nneg i32 %436 to i64
  %620 = getelementptr half, ptr addrspace(3) @global_smem, i64 %619
  %621 = zext nneg i32 %437 to i64
  %622 = getelementptr half, ptr addrspace(3) @global_smem, i64 %621
  %623 = zext nneg i32 %438 to i64
  %624 = getelementptr half, ptr addrspace(3) @global_smem, i64 %623
  %625 = zext nneg i32 %439 to i64
  %626 = getelementptr half, ptr addrspace(3) @global_smem, i64 %625
  %627 = zext nneg i32 %440 to i64
  %628 = getelementptr half, ptr addrspace(3) @global_smem, i64 %627
  %629 = zext nneg i32 %441 to i64
  %630 = getelementptr half, ptr addrspace(3) @global_smem, i64 %629
  %631 = zext nneg i32 %442 to i64
  %632 = getelementptr half, ptr addrspace(3) @global_smem, i64 %631
  %633 = zext nneg i32 %443 to i64
  %634 = getelementptr half, ptr addrspace(3) @global_smem, i64 %633
  %635 = zext nneg i32 %444 to i64
  %636 = getelementptr half, ptr addrspace(3) @global_smem, i64 %635
  %637 = zext nneg i32 %445 to i64
  %638 = getelementptr half, ptr addrspace(3) @global_smem, i64 %637
  %639 = zext nneg i32 %446 to i64
  %640 = getelementptr half, ptr addrspace(3) @global_smem, i64 %639
  %641 = zext nneg i32 %447 to i64
  %642 = getelementptr half, ptr addrspace(3) @global_smem, i64 %641
  %643 = zext nneg i32 %448 to i64
  %644 = getelementptr half, ptr addrspace(3) @global_smem, i64 %643
  %645 = zext nneg i32 %449 to i64
  %646 = getelementptr half, ptr addrspace(3) @global_smem, i64 %645
  %647 = zext nneg i32 %450 to i64
  %648 = getelementptr half, ptr addrspace(3) @global_smem, i64 %647
  %649 = zext nneg i32 %451 to i64
  %650 = getelementptr half, ptr addrspace(3) @global_smem, i64 %649
  %651 = zext nneg i32 %452 to i64
  %652 = getelementptr half, ptr addrspace(3) @global_smem, i64 %651
  %653 = zext nneg i32 %453 to i64
  %654 = getelementptr half, ptr addrspace(3) @global_smem, i64 %653
  %655 = zext nneg i32 %454 to i64
  %656 = getelementptr half, ptr addrspace(3) @global_smem, i64 %655
  %657 = zext nneg i32 %455 to i64
  %658 = getelementptr half, ptr addrspace(3) @global_smem, i64 %657
  %659 = zext nneg i32 %456 to i64
  %660 = getelementptr half, ptr addrspace(3) @global_smem, i64 %659
  %661 = zext nneg i32 %457 to i64
  %662 = getelementptr half, ptr addrspace(3) @global_smem, i64 %661
  %663 = zext nneg i32 %458 to i64
  %664 = getelementptr half, ptr addrspace(3) @global_smem, i64 %663
  %665 = zext nneg i32 %459 to i64
  %666 = getelementptr half, ptr addrspace(3) @global_smem, i64 %665
  %667 = zext nneg i32 %460 to i64
  %668 = getelementptr half, ptr addrspace(3) @global_smem, i64 %667
  %669 = zext nneg i32 %461 to i64
  %670 = getelementptr half, ptr addrspace(3) @global_smem, i64 %669
  %671 = zext nneg i32 %462 to i64
  %672 = getelementptr half, ptr addrspace(3) @global_smem, i64 %671
  %673 = zext nneg i32 %463 to i64
  %674 = getelementptr half, ptr addrspace(3) @global_smem, i64 %673
  %675 = zext nneg i32 %464 to i64
  %676 = getelementptr half, ptr addrspace(3) @global_smem, i64 %675
  %677 = zext nneg i32 %465 to i64
  %678 = getelementptr half, ptr addrspace(3) @global_smem, i64 %677
  %679 = zext nneg i32 %466 to i64
  %680 = getelementptr half, ptr addrspace(3) @global_smem, i64 %679
  %681 = zext nneg i32 %467 to i64
  %682 = getelementptr half, ptr addrspace(3) @global_smem, i64 %681
  %683 = zext nneg i32 %468 to i64
  %684 = getelementptr half, ptr addrspace(3) @global_smem, i64 %683
  %685 = zext nneg i32 %469 to i64
  %686 = getelementptr half, ptr addrspace(3) @global_smem, i64 %685
  %687 = zext nneg i32 %470 to i64
  %688 = getelementptr half, ptr addrspace(3) @global_smem, i64 %687
  %689 = zext nneg i32 %471 to i64
  %690 = getelementptr half, ptr addrspace(3) @global_smem, i64 %689
  %691 = zext nneg i32 %472 to i64
  %692 = getelementptr half, ptr addrspace(3) @global_smem, i64 %691
  %693 = zext nneg i32 %473 to i64
  %694 = getelementptr half, ptr addrspace(3) @global_smem, i64 %693
  %695 = zext nneg i32 %474 to i64
  %696 = getelementptr half, ptr addrspace(3) @global_smem, i64 %695
  %697 = zext nneg i32 %475 to i64
  %698 = getelementptr half, ptr addrspace(3) @global_smem, i64 %697
  %699 = zext nneg i32 %476 to i64
  %700 = getelementptr half, ptr addrspace(3) @global_smem, i64 %699
  %701 = zext nneg i32 %477 to i64
  %702 = getelementptr half, ptr addrspace(3) @global_smem, i64 %701
  %703 = zext nneg i32 %478 to i64
  %704 = getelementptr half, ptr addrspace(3) @global_smem, i64 %703
  %705 = zext nneg i32 %479 to i64
  %706 = getelementptr half, ptr addrspace(3) @global_smem, i64 %705
  %707 = zext nneg i32 %480 to i64
  %708 = getelementptr half, ptr addrspace(3) @global_smem, i64 %707
  %709 = zext nneg i32 %481 to i64
  %710 = getelementptr half, ptr addrspace(3) @global_smem, i64 %709
  %711 = zext nneg i32 %482 to i64
  %712 = getelementptr half, ptr addrspace(3) @global_smem, i64 %711
  %713 = zext nneg i32 %483 to i64
  %714 = getelementptr half, ptr addrspace(3) @global_smem, i64 %713
  %715 = zext nneg i32 %484 to i64
  %716 = getelementptr half, ptr addrspace(3) @global_smem, i64 %715
  %717 = zext nneg i32 %485 to i64
  %718 = getelementptr half, ptr addrspace(3) @global_smem, i64 %717
  %719 = zext nneg i32 %486 to i64
  %720 = getelementptr half, ptr addrspace(3) @global_smem, i64 %719
  %721 = zext nneg i32 %487 to i64
  %722 = getelementptr half, ptr addrspace(3) @global_smem, i64 %721
  %723 = zext nneg i32 %488 to i64
  %724 = getelementptr half, ptr addrspace(3) @global_smem, i64 %723
  %725 = zext nneg i32 %489 to i64
  %726 = getelementptr half, ptr addrspace(3) @global_smem, i64 %725
  %727 = zext nneg i32 %490 to i64
  %728 = getelementptr half, ptr addrspace(3) @global_smem, i64 %727
  %729 = zext nneg i32 %491 to i64
  %730 = getelementptr half, ptr addrspace(3) @global_smem, i64 %729
  %731 = zext nneg i32 %492 to i64
  %732 = getelementptr half, ptr addrspace(3) @global_smem, i64 %731
  %733 = zext nneg i32 %493 to i64
  %734 = getelementptr half, ptr addrspace(3) @global_smem, i64 %733
  %735 = zext nneg i32 %494 to i64
  %736 = getelementptr half, ptr addrspace(3) @global_smem, i64 %735
  %737 = zext nneg i32 %495 to i64
  %738 = getelementptr half, ptr addrspace(3) @global_smem, i64 %737
  %739 = zext nneg i32 %496 to i64
  %740 = getelementptr half, ptr addrspace(3) @global_smem, i64 %739
  %741 = zext nneg i32 %497 to i64
  %742 = getelementptr half, ptr addrspace(3) @global_smem, i64 %741
  %743 = zext nneg i32 %498 to i64
  %744 = getelementptr half, ptr addrspace(3) @global_smem, i64 %743
  %745 = zext nneg i32 %499 to i64
  %746 = getelementptr half, ptr addrspace(3) @global_smem, i64 %745
  %747 = zext nneg i32 %500 to i64
  %748 = getelementptr half, ptr addrspace(3) @global_smem, i64 %747
  %749 = zext nneg i32 %501 to i64
  %750 = getelementptr half, ptr addrspace(3) @global_smem, i64 %749
  %751 = zext nneg i32 %502 to i64
  %752 = getelementptr half, ptr addrspace(3) @global_smem, i64 %751
  %753 = zext nneg i32 %503 to i64
  %754 = getelementptr half, ptr addrspace(3) @global_smem, i64 %753
  %755 = zext nneg i32 %504 to i64
  %756 = getelementptr half, ptr addrspace(3) @global_smem, i64 %755
  %757 = zext nneg i32 %505 to i64
  %758 = getelementptr half, ptr addrspace(3) @global_smem, i64 %757
  %759 = zext nneg i32 %506 to i64
  %760 = getelementptr half, ptr addrspace(3) @global_smem, i64 %759
  %761 = zext nneg i32 %507 to i64
  %762 = getelementptr half, ptr addrspace(3) @global_smem, i64 %761
  %763 = zext nneg i32 %508 to i64
  %764 = getelementptr half, ptr addrspace(3) @global_smem, i64 %763
  %765 = insertelement <4 x i32> poison, i32 %264, i64 0, !dbg !24
  %766 = shufflevector <4 x i32> %765, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !24
  %767 = insertelement <4 x float> poison, float %3, i64 0, !dbg !25
  %768 = shufflevector <4 x float> %767, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !25
  %769 = insertelement <4 x i32> %70, i32 %67, i64 1, !dbg !26
  %770 = insertelement <4 x i32> %769, i32 %68, i64 2, !dbg !26
  %771 = insertelement <4 x i32> %770, i32 %69, i64 3, !dbg !26
  br label %772, !dbg !23

772:                                              ; preds = %.lr.ph, %1291
  %773 = phi i64 [ %265, %.lr.ph ], [ %1613, %1291 ]
  %774 = phi float [ 0xFFF0000000000000, %.lr.ph ], [ %1105, %1291 ]
  %775 = phi float [ 0.000000e+00, %.lr.ph ], [ %1228, %1291 ]
  %776 = phi i32 [ 0, %.lr.ph ], [ %1614, %1291 ]
  %777 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %1612, %1291 ]
  %778 = phi <16 x float> [ zeroinitializer, %.lr.ph ], [ %1596, %1291 ]
  %779 = add i64 %773, %52, !dbg !27
  %780 = add i64 %773, %53, !dbg !27
  %781 = add i64 %773, %54, !dbg !27
  %782 = add i64 %773, %55, !dbg !27
  %783 = mul i64 %780, %48, !dbg !27
  %784 = mul i64 %781, %48, !dbg !27
  %785 = mul i64 %782, %48, !dbg !27
  %gep = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %783, !dbg !27
  %gep97 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %784, !dbg !27
  %gep99 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %785, !dbg !27
  %786 = icmp sgt i64 %779, -1, !dbg !27
  %787 = icmp sgt i64 %780, -1, !dbg !27
  %788 = icmp sgt i64 %781, -1, !dbg !27
  %789 = icmp sgt i64 %782, -1, !dbg !27
  %790 = icmp slt i64 %779, %47, !dbg !27
  %791 = icmp slt i64 %780, %47, !dbg !27
  %792 = icmp slt i64 %781, %47, !dbg !27
  %793 = icmp slt i64 %782, %47, !dbg !27
  %794 = and i1 %786, %790, !dbg !27
  %795 = and i1 %787, %791, !dbg !27
  %796 = and i1 %788, %792, !dbg !27
  %797 = and i1 %789, %793, !dbg !27
  br i1 %794, label %798, label %802, !dbg !27

798:                                              ; preds = %772
  %799 = mul i64 %779, %48, !dbg !27
  %gep101 = getelementptr half, ptr addrspace(1) %invariant.gep, i64 %799, !dbg !27
  %800 = addrspacecast ptr addrspace(1) %gep101 to ptr, !dbg !27
  %801 = load <8 x half>, ptr %800, align 16, !dbg !27
  br label %802, !dbg !27

802:                                              ; preds = %772, %798
  %803 = phi <8 x half> [ %801, %798 ], [ zeroinitializer, %772 ]
  br i1 %795, label %804, label %807, !dbg !27

804:                                              ; preds = %802
  %805 = addrspacecast ptr addrspace(1) %gep to ptr, !dbg !27
  %806 = load <8 x half>, ptr %805, align 16, !dbg !27
  br label %807, !dbg !27

807:                                              ; preds = %802, %804
  %808 = phi <8 x half> [ %806, %804 ], [ zeroinitializer, %802 ]
  br i1 %796, label %809, label %812, !dbg !27

809:                                              ; preds = %807
  %810 = addrspacecast ptr addrspace(1) %gep97 to ptr, !dbg !27
  %811 = load <8 x half>, ptr %810, align 16, !dbg !27
  br label %812, !dbg !27

812:                                              ; preds = %807, %809
  %813 = phi <8 x half> [ %811, %809 ], [ zeroinitializer, %807 ]
  br i1 %797, label %814, label %817, !dbg !27

814:                                              ; preds = %812
  %815 = addrspacecast ptr addrspace(1) %gep99 to ptr, !dbg !27
  %816 = load <8 x half>, ptr %815, align 16, !dbg !27
  br label %817, !dbg !27

817:                                              ; preds = %812, %814
  %818 = phi <8 x half> [ %816, %814 ], [ zeroinitializer, %812 ]
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %819 = shufflevector <8 x half> %803, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %819, ptr addrspace(3) %167, align 8, !dbg !28
  %820 = shufflevector <8 x half> %803, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %820, ptr addrspace(3) %173, align 8, !dbg !28
  %821 = shufflevector <8 x half> %808, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %821, ptr addrspace(3) %177, align 8, !dbg !28
  %822 = shufflevector <8 x half> %808, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %822, ptr addrspace(3) %180, align 8, !dbg !28
  %823 = shufflevector <8 x half> %813, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %823, ptr addrspace(3) %184, align 8, !dbg !28
  %824 = shufflevector <8 x half> %813, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %824, ptr addrspace(3) %187, align 8, !dbg !28
  %825 = shufflevector <8 x half> %818, <8 x half> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !28
  store <4 x half> %825, ptr addrspace(3) %191, align 8, !dbg !28
  %826 = shufflevector <8 x half> %818, <8 x half> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  store <4 x half> %826, ptr addrspace(3) %194, align 8, !dbg !28
  fence syncscope("workgroup") release, !dbg !28
  tail call void @llvm.amdgcn.s.barrier(), !dbg !28
  fence syncscope("workgroup") acquire, !dbg !28
  %827 = load <4 x half>, ptr addrspace(3) %303, align 8, !dbg !28
  %828 = load <4 x half>, ptr addrspace(3) %305, align 8, !dbg !28
  %829 = load <4 x half>, ptr addrspace(3) %307, align 8, !dbg !28
  %830 = load <4 x half>, ptr addrspace(3) %309, align 8, !dbg !28
  %831 = load <4 x half>, ptr addrspace(3) %311, align 8, !dbg !28
  %832 = load <4 x half>, ptr addrspace(3) %313, align 8, !dbg !28
  %833 = load <4 x half>, ptr addrspace(3) %315, align 8, !dbg !28
  %834 = load <4 x half>, ptr addrspace(3) %317, align 8, !dbg !28
  %835 = load <4 x half>, ptr addrspace(3) %319, align 8, !dbg !28
  %836 = load <4 x half>, ptr addrspace(3) %321, align 8, !dbg !28
  %837 = load <4 x half>, ptr addrspace(3) %323, align 8, !dbg !28
  %838 = load <4 x half>, ptr addrspace(3) %325, align 8, !dbg !28
  %839 = load <4 x half>, ptr addrspace(3) %327, align 8, !dbg !28
  %840 = load <4 x half>, ptr addrspace(3) %329, align 8, !dbg !28
  %841 = load <4 x half>, ptr addrspace(3) %331, align 8, !dbg !28
  %842 = load <4 x half>, ptr addrspace(3) %333, align 8, !dbg !28
  %843 = load <4 x half>, ptr addrspace(3) %335, align 8, !dbg !28
  %844 = load <4 x half>, ptr addrspace(3) %337, align 8, !dbg !28
  %845 = load <4 x half>, ptr addrspace(3) %339, align 8, !dbg !28
  %846 = load <4 x half>, ptr addrspace(3) %341, align 8, !dbg !28
  %847 = load <4 x half>, ptr addrspace(3) %343, align 8, !dbg !28
  %848 = load <4 x half>, ptr addrspace(3) %345, align 8, !dbg !28
  %849 = load <4 x half>, ptr addrspace(3) %347, align 8, !dbg !28
  %850 = load <4 x half>, ptr addrspace(3) %349, align 8, !dbg !28
  %851 = load <4 x half>, ptr addrspace(3) %351, align 8, !dbg !28
  %852 = load <4 x half>, ptr addrspace(3) %353, align 8, !dbg !28
  %853 = load <4 x half>, ptr addrspace(3) %355, align 8, !dbg !28
  %854 = load <4 x half>, ptr addrspace(3) %357, align 8, !dbg !28
  %855 = load <4 x half>, ptr addrspace(3) %359, align 8, !dbg !28
  %856 = load <4 x half>, ptr addrspace(3) %361, align 8, !dbg !28
  %857 = load <4 x half>, ptr addrspace(3) %363, align 8, !dbg !28
  %858 = load <4 x half>, ptr addrspace(3) %365, align 8, !dbg !28
  %859 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %827, <4 x half> %240, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !29
  %860 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %828, <4 x half> %243, <16 x float> %859, i32 0, i32 0, i32 0), !dbg !29
  %861 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %829, <4 x half> %246, <16 x float> %860, i32 0, i32 0, i32 0), !dbg !29
  %862 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %830, <4 x half> %249, <16 x float> %861, i32 0, i32 0, i32 0), !dbg !29
  %863 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %831, <4 x half> %252, <16 x float> %862, i32 0, i32 0, i32 0), !dbg !29
  %864 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %832, <4 x half> %255, <16 x float> %863, i32 0, i32 0, i32 0), !dbg !29
  %865 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %833, <4 x half> %258, <16 x float> %864, i32 0, i32 0, i32 0), !dbg !29
  %866 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %834, <4 x half> %261, <16 x float> %865, i32 0, i32 0, i32 0), !dbg !29
  %867 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %835, <4 x half> %240, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !29
  %868 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %836, <4 x half> %243, <16 x float> %867, i32 0, i32 0, i32 0), !dbg !29
  %869 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %837, <4 x half> %246, <16 x float> %868, i32 0, i32 0, i32 0), !dbg !29
  %870 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %838, <4 x half> %249, <16 x float> %869, i32 0, i32 0, i32 0), !dbg !29
  %871 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %839, <4 x half> %252, <16 x float> %870, i32 0, i32 0, i32 0), !dbg !29
  %872 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %840, <4 x half> %255, <16 x float> %871, i32 0, i32 0, i32 0), !dbg !29
  %873 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %841, <4 x half> %258, <16 x float> %872, i32 0, i32 0, i32 0), !dbg !29
  %874 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %842, <4 x half> %261, <16 x float> %873, i32 0, i32 0, i32 0), !dbg !29
  %875 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %843, <4 x half> %240, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !29
  %876 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %844, <4 x half> %243, <16 x float> %875, i32 0, i32 0, i32 0), !dbg !29
  %877 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %845, <4 x half> %246, <16 x float> %876, i32 0, i32 0, i32 0), !dbg !29
  %878 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %846, <4 x half> %249, <16 x float> %877, i32 0, i32 0, i32 0), !dbg !29
  %879 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %847, <4 x half> %252, <16 x float> %878, i32 0, i32 0, i32 0), !dbg !29
  %880 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %848, <4 x half> %255, <16 x float> %879, i32 0, i32 0, i32 0), !dbg !29
  %881 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %849, <4 x half> %258, <16 x float> %880, i32 0, i32 0, i32 0), !dbg !29
  %882 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %850, <4 x half> %261, <16 x float> %881, i32 0, i32 0, i32 0), !dbg !29
  %883 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %851, <4 x half> %240, <16 x float> zeroinitializer, i32 0, i32 0, i32 0), !dbg !29
  %884 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %852, <4 x half> %243, <16 x float> %883, i32 0, i32 0, i32 0), !dbg !29
  %885 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %853, <4 x half> %246, <16 x float> %884, i32 0, i32 0, i32 0), !dbg !29
  %886 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %854, <4 x half> %249, <16 x float> %885, i32 0, i32 0, i32 0), !dbg !29
  %887 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %855, <4 x half> %252, <16 x float> %886, i32 0, i32 0, i32 0), !dbg !29
  %888 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %856, <4 x half> %255, <16 x float> %887, i32 0, i32 0, i32 0), !dbg !29
  %889 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %857, <4 x half> %258, <16 x float> %888, i32 0, i32 0, i32 0), !dbg !29
  %890 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %858, <4 x half> %261, <16 x float> %889, i32 0, i32 0, i32 0), !dbg !29
  %891 = insertelement <4 x i32> poison, i32 %776, i64 0, !dbg !26
  %892 = shufflevector <4 x i32> %891, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !26
  %893 = or disjoint <4 x i32> %892, %771, !dbg !26
  %894 = or disjoint <4 x i32> %892, %72, !dbg !26
  %895 = or disjoint <4 x i32> %892, %73, !dbg !26
  %896 = or disjoint <4 x i32> %892, %74, !dbg !26
  %897 = or disjoint <4 x i32> %892, %75, !dbg !26
  %898 = or disjoint <4 x i32> %892, %76, !dbg !26
  %899 = or disjoint <4 x i32> %892, %77, !dbg !26
  %900 = or disjoint <4 x i32> %892, %78, !dbg !26
  %901 = shufflevector <16 x float> %890, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !25
  %902 = fmul <4 x float> %901, %768, !dbg !25
  %903 = shufflevector <4 x i32> %893, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !26
  %904 = or disjoint <4 x i32> %903, <i32 120, i32 121, i32 122, i32 123>, !dbg !26
  %905 = icmp slt <4 x i32> %766, %904, !dbg !24
  %906 = select <4 x i1> %905, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %902, !dbg !30
  %907 = extractelement <4 x float> %906, i64 0, !dbg !31
  %908 = extractelement <4 x float> %906, i64 1, !dbg !31
  %909 = extractelement <4 x float> %906, i64 2, !dbg !31
  %910 = extractelement <4 x float> %906, i64 3, !dbg !31
  %911 = shufflevector <16 x float> %890, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !25
  %912 = fmul <4 x float> %911, %768, !dbg !25
  %913 = or disjoint <4 x i32> %903, <i32 112, i32 113, i32 114, i32 115>, !dbg !26
  %914 = icmp slt <4 x i32> %766, %913, !dbg !24
  %915 = select <4 x i1> %914, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %912, !dbg !30
  %916 = extractelement <4 x float> %915, i64 0, !dbg !31
  %917 = extractelement <4 x float> %915, i64 1, !dbg !31
  %918 = extractelement <4 x float> %915, i64 2, !dbg !31
  %919 = extractelement <4 x float> %915, i64 3, !dbg !31
  %920 = shufflevector <16 x float> %890, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !25
  %921 = fmul <4 x float> %920, %768, !dbg !25
  %922 = or disjoint <4 x i32> %903, <i32 104, i32 105, i32 106, i32 107>, !dbg !26
  %923 = icmp slt <4 x i32> %766, %922, !dbg !24
  %924 = select <4 x i1> %923, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %921, !dbg !30
  %925 = extractelement <4 x float> %924, i64 0, !dbg !31
  %926 = extractelement <4 x float> %924, i64 1, !dbg !31
  %927 = extractelement <4 x float> %924, i64 2, !dbg !31
  %928 = extractelement <4 x float> %924, i64 3, !dbg !31
  %929 = shufflevector <16 x float> %890, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %930 = fmul <4 x float> %929, %768, !dbg !25
  %931 = or disjoint <4 x i32> %903, <i32 96, i32 97, i32 98, i32 99>, !dbg !26
  %932 = icmp slt <4 x i32> %766, %931, !dbg !24
  %933 = select <4 x i1> %932, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %930, !dbg !30
  %934 = extractelement <4 x float> %933, i64 0, !dbg !31
  %935 = extractelement <4 x float> %933, i64 1, !dbg !31
  %936 = extractelement <4 x float> %933, i64 2, !dbg !31
  %937 = extractelement <4 x float> %933, i64 3, !dbg !31
  %938 = shufflevector <16 x float> %882, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !25
  %939 = fmul <4 x float> %938, %768, !dbg !25
  %940 = or disjoint <4 x i32> %903, <i32 88, i32 89, i32 90, i32 91>, !dbg !26
  %941 = icmp slt <4 x i32> %766, %940, !dbg !24
  %942 = select <4 x i1> %941, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %939, !dbg !30
  %943 = extractelement <4 x float> %942, i64 0, !dbg !31
  %944 = extractelement <4 x float> %942, i64 1, !dbg !31
  %945 = extractelement <4 x float> %942, i64 2, !dbg !31
  %946 = extractelement <4 x float> %942, i64 3, !dbg !31
  %947 = shufflevector <16 x float> %882, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !25
  %948 = fmul <4 x float> %947, %768, !dbg !25
  %949 = or disjoint <4 x i32> %903, <i32 80, i32 81, i32 82, i32 83>, !dbg !26
  %950 = icmp slt <4 x i32> %766, %949, !dbg !24
  %951 = select <4 x i1> %950, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %948, !dbg !30
  %952 = extractelement <4 x float> %951, i64 0, !dbg !31
  %953 = extractelement <4 x float> %951, i64 1, !dbg !31
  %954 = extractelement <4 x float> %951, i64 2, !dbg !31
  %955 = extractelement <4 x float> %951, i64 3, !dbg !31
  %956 = shufflevector <16 x float> %882, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !25
  %957 = fmul <4 x float> %956, %768, !dbg !25
  %958 = or disjoint <4 x i32> %903, <i32 72, i32 73, i32 74, i32 75>, !dbg !26
  %959 = icmp slt <4 x i32> %766, %958, !dbg !24
  %960 = select <4 x i1> %959, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %957, !dbg !30
  %961 = extractelement <4 x float> %960, i64 0, !dbg !31
  %962 = extractelement <4 x float> %960, i64 1, !dbg !31
  %963 = extractelement <4 x float> %960, i64 2, !dbg !31
  %964 = extractelement <4 x float> %960, i64 3, !dbg !31
  %965 = shufflevector <16 x float> %882, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %966 = fmul <4 x float> %965, %768, !dbg !25
  %967 = or disjoint <4 x i32> %903, <i32 64, i32 65, i32 66, i32 67>, !dbg !26
  %968 = icmp slt <4 x i32> %766, %967, !dbg !24
  %969 = select <4 x i1> %968, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %966, !dbg !30
  %970 = extractelement <4 x float> %969, i64 0, !dbg !31
  %971 = extractelement <4 x float> %969, i64 1, !dbg !31
  %972 = extractelement <4 x float> %969, i64 2, !dbg !31
  %973 = extractelement <4 x float> %969, i64 3, !dbg !31
  %974 = shufflevector <16 x float> %874, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !25
  %975 = fmul <4 x float> %974, %768, !dbg !25
  %976 = icmp slt <4 x i32> %766, %900, !dbg !24
  %977 = select <4 x i1> %976, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %975, !dbg !30
  %978 = extractelement <4 x float> %977, i64 0, !dbg !31
  %979 = extractelement <4 x float> %977, i64 1, !dbg !31
  %980 = extractelement <4 x float> %977, i64 2, !dbg !31
  %981 = extractelement <4 x float> %977, i64 3, !dbg !31
  %982 = shufflevector <16 x float> %874, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !25
  %983 = fmul <4 x float> %982, %768, !dbg !25
  %984 = icmp slt <4 x i32> %766, %899, !dbg !24
  %985 = select <4 x i1> %984, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %983, !dbg !30
  %986 = extractelement <4 x float> %985, i64 0, !dbg !31
  %987 = extractelement <4 x float> %985, i64 1, !dbg !31
  %988 = extractelement <4 x float> %985, i64 2, !dbg !31
  %989 = extractelement <4 x float> %985, i64 3, !dbg !31
  %990 = shufflevector <16 x float> %874, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !25
  %991 = fmul <4 x float> %990, %768, !dbg !25
  %992 = icmp slt <4 x i32> %766, %898, !dbg !24
  %993 = select <4 x i1> %992, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %991, !dbg !30
  %994 = extractelement <4 x float> %993, i64 0, !dbg !31
  %995 = extractelement <4 x float> %993, i64 1, !dbg !31
  %996 = extractelement <4 x float> %993, i64 2, !dbg !31
  %997 = extractelement <4 x float> %993, i64 3, !dbg !31
  %998 = shufflevector <16 x float> %874, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %999 = fmul <4 x float> %998, %768, !dbg !25
  %1000 = icmp slt <4 x i32> %766, %897, !dbg !24
  %1001 = select <4 x i1> %1000, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %999, !dbg !30
  %1002 = extractelement <4 x float> %1001, i64 0, !dbg !31
  %1003 = extractelement <4 x float> %1001, i64 1, !dbg !31
  %1004 = extractelement <4 x float> %1001, i64 2, !dbg !31
  %1005 = extractelement <4 x float> %1001, i64 3, !dbg !31
  %1006 = shufflevector <16 x float> %866, <16 x float> poison, <4 x i32> <i32 12, i32 13, i32 14, i32 15>, !dbg !25
  %1007 = fmul <4 x float> %1006, %768, !dbg !25
  %1008 = icmp slt <4 x i32> %766, %896, !dbg !24
  %1009 = select <4 x i1> %1008, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %1007, !dbg !30
  %1010 = extractelement <4 x float> %1009, i64 0, !dbg !31
  %1011 = extractelement <4 x float> %1009, i64 1, !dbg !31
  %1012 = extractelement <4 x float> %1009, i64 2, !dbg !31
  %1013 = extractelement <4 x float> %1009, i64 3, !dbg !31
  %1014 = shufflevector <16 x float> %866, <16 x float> poison, <4 x i32> <i32 8, i32 9, i32 10, i32 11>, !dbg !25
  %1015 = fmul <4 x float> %1014, %768, !dbg !25
  %1016 = icmp slt <4 x i32> %766, %895, !dbg !24
  %1017 = select <4 x i1> %1016, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %1015, !dbg !30
  %1018 = extractelement <4 x float> %1017, i64 0, !dbg !31
  %1019 = extractelement <4 x float> %1017, i64 1, !dbg !31
  %1020 = extractelement <4 x float> %1017, i64 2, !dbg !31
  %1021 = extractelement <4 x float> %1017, i64 3, !dbg !31
  %1022 = shufflevector <16 x float> %866, <16 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !25
  %1023 = fmul <4 x float> %1022, %768, !dbg !25
  %1024 = icmp slt <4 x i32> %766, %894, !dbg !24
  %1025 = select <4 x i1> %1024, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %1023, !dbg !30
  %1026 = extractelement <4 x float> %1025, i64 0, !dbg !31
  %1027 = extractelement <4 x float> %1025, i64 1, !dbg !31
  %1028 = extractelement <4 x float> %1025, i64 2, !dbg !31
  %1029 = extractelement <4 x float> %1025, i64 3, !dbg !31
  %1030 = shufflevector <16 x float> %866, <16 x float> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %1031 = fmul <4 x float> %1030, %768, !dbg !25
  %1032 = icmp slt <4 x i32> %766, %893, !dbg !24
  %1033 = select <4 x i1> %1032, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %1031, !dbg !30
  %1034 = extractelement <4 x float> %1033, i64 0, !dbg !31
  %1035 = extractelement <4 x float> %1033, i64 1, !dbg !31
  %1036 = tail call float @llvm.maxnum.f32(float %1034, float %1035), !dbg !31
  %1037 = extractelement <4 x float> %1033, i64 2, !dbg !31
  %1038 = tail call float @llvm.maxnum.f32(float %1036, float %1037), !dbg !31
  %1039 = extractelement <4 x float> %1033, i64 3, !dbg !31
  %1040 = tail call float @llvm.maxnum.f32(float %1038, float %1039), !dbg !31
  %1041 = tail call float @llvm.maxnum.f32(float %1040, float %1026), !dbg !31
  %1042 = tail call float @llvm.maxnum.f32(float %1041, float %1027), !dbg !31
  %1043 = tail call float @llvm.maxnum.f32(float %1042, float %1028), !dbg !31
  %1044 = tail call float @llvm.maxnum.f32(float %1043, float %1029), !dbg !31
  %1045 = tail call float @llvm.maxnum.f32(float %1044, float %1018), !dbg !31
  %1046 = tail call float @llvm.maxnum.f32(float %1045, float %1019), !dbg !31
  %1047 = tail call float @llvm.maxnum.f32(float %1046, float %1020), !dbg !31
  %1048 = tail call float @llvm.maxnum.f32(float %1047, float %1021), !dbg !31
  %1049 = tail call float @llvm.maxnum.f32(float %1048, float %1010), !dbg !31
  %1050 = tail call float @llvm.maxnum.f32(float %1049, float %1011), !dbg !31
  %1051 = tail call float @llvm.maxnum.f32(float %1050, float %1012), !dbg !31
  %1052 = tail call float @llvm.maxnum.f32(float %1051, float %1013), !dbg !31
  %1053 = tail call float @llvm.maxnum.f32(float %1052, float %1002), !dbg !31
  %1054 = tail call float @llvm.maxnum.f32(float %1053, float %1003), !dbg !31
  %1055 = tail call float @llvm.maxnum.f32(float %1054, float %1004), !dbg !31
  %1056 = tail call float @llvm.maxnum.f32(float %1055, float %1005), !dbg !31
  %1057 = tail call float @llvm.maxnum.f32(float %1056, float %994), !dbg !31
  %1058 = tail call float @llvm.maxnum.f32(float %1057, float %995), !dbg !31
  %1059 = tail call float @llvm.maxnum.f32(float %1058, float %996), !dbg !31
  %1060 = tail call float @llvm.maxnum.f32(float %1059, float %997), !dbg !31
  %1061 = tail call float @llvm.maxnum.f32(float %1060, float %986), !dbg !31
  %1062 = tail call float @llvm.maxnum.f32(float %1061, float %987), !dbg !31
  %1063 = tail call float @llvm.maxnum.f32(float %1062, float %988), !dbg !31
  %1064 = tail call float @llvm.maxnum.f32(float %1063, float %989), !dbg !31
  %1065 = tail call float @llvm.maxnum.f32(float %1064, float %978), !dbg !31
  %1066 = tail call float @llvm.maxnum.f32(float %1065, float %979), !dbg !31
  %1067 = tail call float @llvm.maxnum.f32(float %1066, float %980), !dbg !31
  %1068 = tail call float @llvm.maxnum.f32(float %1067, float %981), !dbg !31
  %1069 = tail call float @llvm.maxnum.f32(float %1068, float %970), !dbg !31
  %1070 = tail call float @llvm.maxnum.f32(float %1069, float %971), !dbg !31
  %1071 = tail call float @llvm.maxnum.f32(float %1070, float %972), !dbg !31
  %1072 = tail call float @llvm.maxnum.f32(float %1071, float %973), !dbg !31
  %1073 = tail call float @llvm.maxnum.f32(float %1072, float %961), !dbg !31
  %1074 = tail call float @llvm.maxnum.f32(float %1073, float %962), !dbg !31
  %1075 = tail call float @llvm.maxnum.f32(float %1074, float %963), !dbg !31
  %1076 = tail call float @llvm.maxnum.f32(float %1075, float %964), !dbg !31
  %1077 = tail call float @llvm.maxnum.f32(float %1076, float %952), !dbg !31
  %1078 = tail call float @llvm.maxnum.f32(float %1077, float %953), !dbg !31
  %1079 = tail call float @llvm.maxnum.f32(float %1078, float %954), !dbg !31
  %1080 = tail call float @llvm.maxnum.f32(float %1079, float %955), !dbg !31
  %1081 = tail call float @llvm.maxnum.f32(float %1080, float %943), !dbg !31
  %1082 = tail call float @llvm.maxnum.f32(float %1081, float %944), !dbg !31
  %1083 = tail call float @llvm.maxnum.f32(float %1082, float %945), !dbg !31
  %1084 = tail call float @llvm.maxnum.f32(float %1083, float %946), !dbg !31
  %1085 = tail call float @llvm.maxnum.f32(float %1084, float %934), !dbg !31
  %1086 = tail call float @llvm.maxnum.f32(float %1085, float %935), !dbg !31
  %1087 = tail call float @llvm.maxnum.f32(float %1086, float %936), !dbg !31
  %1088 = tail call float @llvm.maxnum.f32(float %1087, float %937), !dbg !31
  %1089 = tail call float @llvm.maxnum.f32(float %1088, float %925), !dbg !31
  %1090 = tail call float @llvm.maxnum.f32(float %1089, float %926), !dbg !31
  %1091 = tail call float @llvm.maxnum.f32(float %1090, float %927), !dbg !31
  %1092 = tail call float @llvm.maxnum.f32(float %1091, float %928), !dbg !31
  %1093 = tail call float @llvm.maxnum.f32(float %1092, float %916), !dbg !31
  %1094 = tail call float @llvm.maxnum.f32(float %1093, float %917), !dbg !31
  %1095 = tail call float @llvm.maxnum.f32(float %1094, float %918), !dbg !31
  %1096 = tail call float @llvm.maxnum.f32(float %1095, float %919), !dbg !31
  %1097 = tail call float @llvm.maxnum.f32(float %1096, float %907), !dbg !31
  %1098 = tail call float @llvm.maxnum.f32(float %1097, float %908), !dbg !31
  %1099 = tail call float @llvm.maxnum.f32(float %1098, float %909), !dbg !31
  %1100 = tail call float @llvm.maxnum.f32(float %1099, float %910), !dbg !31
  %1101 = bitcast float %1100 to i32, !dbg !36
  %1102 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %367, i32 %1101), !dbg !36
  %1103 = bitcast i32 %1102 to float, !dbg !36
  %1104 = tail call float @llvm.maxnum.f32(float %1100, float %1103), !dbg !31
  %1105 = tail call float @llvm.maxnum.f32(float %1104, float %774), !dbg !37
  %1106 = fsub float %774, %1105, !dbg !38
  %1107 = fmul float %1106, 0x3FF7154760000000, !dbg !39
  %1108 = tail call noundef float @llvm.exp2.f32(float %1107), !dbg !39
  %1109 = fmul float %775, %1108, !dbg !40
  %1110 = insertelement <4 x float> poison, float %1105, i64 0, !dbg !41
  %1111 = shufflevector <4 x float> %1110, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !41
  %1112 = fsub <4 x float> %1033, %1111, !dbg !41
  %1113 = fsub <4 x float> %1025, %1111, !dbg !41
  %1114 = fsub <4 x float> %1017, %1111, !dbg !41
  %1115 = fsub <4 x float> %1009, %1111, !dbg !41
  %1116 = fsub <4 x float> %1001, %1111, !dbg !41
  %1117 = fsub <4 x float> %993, %1111, !dbg !41
  %1118 = fsub <4 x float> %985, %1111, !dbg !41
  %1119 = fsub <4 x float> %977, %1111, !dbg !41
  %1120 = fsub <4 x float> %969, %1111, !dbg !41
  %1121 = fsub <4 x float> %960, %1111, !dbg !41
  %1122 = fsub <4 x float> %951, %1111, !dbg !41
  %1123 = fsub <4 x float> %942, %1111, !dbg !41
  %1124 = fsub <4 x float> %933, %1111, !dbg !41
  %1125 = fsub <4 x float> %924, %1111, !dbg !41
  %1126 = fsub <4 x float> %915, %1111, !dbg !41
  %1127 = fsub <4 x float> %906, %1111, !dbg !41
  %1128 = fmul <4 x float> %1112, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1129 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1128), !dbg !42
  %1130 = fmul <4 x float> %1113, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1131 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1130), !dbg !42
  %1132 = fmul <4 x float> %1114, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1133 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1132), !dbg !42
  %1134 = fmul <4 x float> %1115, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1135 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1134), !dbg !42
  %1136 = fmul <4 x float> %1116, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1137 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1136), !dbg !42
  %1138 = fmul <4 x float> %1117, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1139 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1138), !dbg !42
  %1140 = fmul <4 x float> %1118, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1141 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1140), !dbg !42
  %1142 = fmul <4 x float> %1119, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1143 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1142), !dbg !42
  %1144 = fmul <4 x float> %1120, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1145 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1144), !dbg !42
  %1146 = fmul <4 x float> %1121, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1147 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1146), !dbg !42
  %1148 = fmul <4 x float> %1122, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1149 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1148), !dbg !42
  %1150 = fmul <4 x float> %1123, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1151 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1150), !dbg !42
  %1152 = fmul <4 x float> %1124, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1153 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1152), !dbg !42
  %1154 = fmul <4 x float> %1125, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1155 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1154), !dbg !42
  %1156 = fmul <4 x float> %1126, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1157 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1156), !dbg !42
  %1158 = fmul <4 x float> %1127, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>, !dbg !42
  %1159 = tail call <4 x float> @llvm.exp2.v4f32(<4 x float> %1158), !dbg !42
  %shift = shufflevector <4 x float> %1129, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1160 = fadd <4 x float> %1129, %shift, !dbg !43
  %shift152 = shufflevector <4 x float> %1129, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1161 = fadd <4 x float> %shift152, %1160, !dbg !43
  %shift153 = shufflevector <4 x float> %1129, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1162 = fadd <4 x float> %shift153, %1161, !dbg !43
  %1163 = fadd <4 x float> %1131, %1162, !dbg !43
  %shift154 = shufflevector <4 x float> %1131, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1164 = fadd <4 x float> %shift154, %1163, !dbg !43
  %shift155 = shufflevector <4 x float> %1131, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1165 = fadd <4 x float> %shift155, %1164, !dbg !43
  %shift156 = shufflevector <4 x float> %1131, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1166 = fadd <4 x float> %shift156, %1165, !dbg !43
  %1167 = fadd <4 x float> %1133, %1166, !dbg !43
  %shift157 = shufflevector <4 x float> %1133, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1168 = fadd <4 x float> %shift157, %1167, !dbg !43
  %shift158 = shufflevector <4 x float> %1133, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1169 = fadd <4 x float> %shift158, %1168, !dbg !43
  %shift159 = shufflevector <4 x float> %1133, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1170 = fadd <4 x float> %shift159, %1169, !dbg !43
  %1171 = fadd <4 x float> %1135, %1170, !dbg !43
  %shift160 = shufflevector <4 x float> %1135, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1172 = fadd <4 x float> %shift160, %1171, !dbg !43
  %shift161 = shufflevector <4 x float> %1135, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1173 = fadd <4 x float> %shift161, %1172, !dbg !43
  %shift162 = shufflevector <4 x float> %1135, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1174 = fadd <4 x float> %shift162, %1173, !dbg !43
  %1175 = fadd <4 x float> %1137, %1174, !dbg !43
  %shift163 = shufflevector <4 x float> %1137, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1176 = fadd <4 x float> %shift163, %1175, !dbg !43
  %shift164 = shufflevector <4 x float> %1137, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1177 = fadd <4 x float> %shift164, %1176, !dbg !43
  %shift165 = shufflevector <4 x float> %1137, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1178 = fadd <4 x float> %shift165, %1177, !dbg !43
  %1179 = fadd <4 x float> %1139, %1178, !dbg !43
  %shift166 = shufflevector <4 x float> %1139, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1180 = fadd <4 x float> %shift166, %1179, !dbg !43
  %shift167 = shufflevector <4 x float> %1139, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1181 = fadd <4 x float> %shift167, %1180, !dbg !43
  %shift168 = shufflevector <4 x float> %1139, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1182 = fadd <4 x float> %shift168, %1181, !dbg !43
  %1183 = fadd <4 x float> %1141, %1182, !dbg !43
  %shift169 = shufflevector <4 x float> %1141, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1184 = fadd <4 x float> %shift169, %1183, !dbg !43
  %shift170 = shufflevector <4 x float> %1141, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1185 = fadd <4 x float> %shift170, %1184, !dbg !43
  %shift171 = shufflevector <4 x float> %1141, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1186 = fadd <4 x float> %shift171, %1185, !dbg !43
  %1187 = fadd <4 x float> %1143, %1186, !dbg !43
  %shift172 = shufflevector <4 x float> %1143, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1188 = fadd <4 x float> %shift172, %1187, !dbg !43
  %shift173 = shufflevector <4 x float> %1143, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1189 = fadd <4 x float> %shift173, %1188, !dbg !43
  %shift174 = shufflevector <4 x float> %1143, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1190 = fadd <4 x float> %shift174, %1189, !dbg !43
  %1191 = fadd <4 x float> %1145, %1190, !dbg !43
  %shift175 = shufflevector <4 x float> %1145, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1192 = fadd <4 x float> %shift175, %1191, !dbg !43
  %shift176 = shufflevector <4 x float> %1145, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1193 = fadd <4 x float> %shift176, %1192, !dbg !43
  %shift177 = shufflevector <4 x float> %1145, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1194 = fadd <4 x float> %shift177, %1193, !dbg !43
  %1195 = fadd <4 x float> %1147, %1194, !dbg !43
  %shift178 = shufflevector <4 x float> %1147, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1196 = fadd <4 x float> %shift178, %1195, !dbg !43
  %shift179 = shufflevector <4 x float> %1147, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1197 = fadd <4 x float> %shift179, %1196, !dbg !43
  %shift180 = shufflevector <4 x float> %1147, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1198 = fadd <4 x float> %shift180, %1197, !dbg !43
  %1199 = fadd <4 x float> %1149, %1198, !dbg !43
  %shift181 = shufflevector <4 x float> %1149, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1200 = fadd <4 x float> %shift181, %1199, !dbg !43
  %shift182 = shufflevector <4 x float> %1149, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1201 = fadd <4 x float> %shift182, %1200, !dbg !43
  %shift183 = shufflevector <4 x float> %1149, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1202 = fadd <4 x float> %shift183, %1201, !dbg !43
  %1203 = fadd <4 x float> %1151, %1202, !dbg !43
  %shift184 = shufflevector <4 x float> %1151, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1204 = fadd <4 x float> %shift184, %1203, !dbg !43
  %shift185 = shufflevector <4 x float> %1151, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1205 = fadd <4 x float> %shift185, %1204, !dbg !43
  %shift186 = shufflevector <4 x float> %1151, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1206 = fadd <4 x float> %shift186, %1205, !dbg !43
  %1207 = fadd <4 x float> %1153, %1206, !dbg !43
  %shift187 = shufflevector <4 x float> %1153, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1208 = fadd <4 x float> %shift187, %1207, !dbg !43
  %shift188 = shufflevector <4 x float> %1153, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1209 = fadd <4 x float> %shift188, %1208, !dbg !43
  %shift189 = shufflevector <4 x float> %1153, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1210 = fadd <4 x float> %shift189, %1209, !dbg !43
  %1211 = fadd <4 x float> %1155, %1210, !dbg !43
  %shift190 = shufflevector <4 x float> %1155, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1212 = fadd <4 x float> %shift190, %1211, !dbg !43
  %shift191 = shufflevector <4 x float> %1155, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1213 = fadd <4 x float> %shift191, %1212, !dbg !43
  %shift192 = shufflevector <4 x float> %1155, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1214 = fadd <4 x float> %shift192, %1213, !dbg !43
  %1215 = fadd <4 x float> %1157, %1214, !dbg !43
  %shift193 = shufflevector <4 x float> %1157, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1216 = fadd <4 x float> %shift193, %1215, !dbg !43
  %shift194 = shufflevector <4 x float> %1157, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1217 = fadd <4 x float> %shift194, %1216, !dbg !43
  %shift195 = shufflevector <4 x float> %1157, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1218 = fadd <4 x float> %shift195, %1217, !dbg !43
  %1219 = fadd <4 x float> %1159, %1218, !dbg !43
  %shift196 = shufflevector <4 x float> %1159, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1220 = fadd <4 x float> %shift196, %1219, !dbg !43
  %shift197 = shufflevector <4 x float> %1159, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1221 = fadd <4 x float> %shift197, %1220, !dbg !43
  %shift198 = shufflevector <4 x float> %1159, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !43
  %1222 = fadd <4 x float> %shift198, %1221, !dbg !43
  %1223 = extractelement <4 x float> %1222, i64 0, !dbg !43
  %1224 = bitcast float %1223 to i32, !dbg !45
  %1225 = tail call i32 @llvm.amdgcn.ds.bpermute(i32 %367, i32 %1224), !dbg !45
  %1226 = bitcast i32 %1225 to float, !dbg !45
  %1227 = fadd float %1223, %1226, !dbg !43
  %1228 = fadd float %1109, %1227, !dbg !46
  %1229 = fdiv float 1.000000e+00, %1228, !dbg !47
  %1230 = insertelement <4 x float> poison, float %1229, i64 0, !dbg !48
  %1231 = shufflevector <4 x float> %1230, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !48
  %1232 = fmul <4 x float> %1129, %1231, !dbg !48
  %1233 = fmul <4 x float> %1131, %1231, !dbg !48
  %1234 = fmul <4 x float> %1133, %1231, !dbg !48
  %1235 = fmul <4 x float> %1135, %1231, !dbg !48
  %1236 = fmul <4 x float> %1137, %1231, !dbg !48
  %1237 = fmul <4 x float> %1139, %1231, !dbg !48
  %1238 = fmul <4 x float> %1141, %1231, !dbg !48
  %1239 = fmul <4 x float> %1143, %1231, !dbg !48
  %1240 = fmul <4 x float> %1145, %1231, !dbg !48
  %1241 = fmul <4 x float> %1147, %1231, !dbg !48
  %1242 = fmul <4 x float> %1149, %1231, !dbg !48
  %1243 = fmul <4 x float> %1151, %1231, !dbg !48
  %1244 = fmul <4 x float> %1153, %1231, !dbg !48
  %1245 = fmul <4 x float> %1155, %1231, !dbg !48
  %1246 = fmul <4 x float> %1157, %1231, !dbg !48
  %1247 = fmul <4 x float> %1159, %1231, !dbg !48
  %1248 = fmul float %1109, %1229, !dbg !49
  %1249 = insertelement <16 x float> poison, float %1248, i64 0, !dbg !50
  %1250 = shufflevector <16 x float> %1249, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !50
  %1251 = fmul <16 x float> %778, %1250, !dbg !50
  %1252 = fmul <16 x float> %777, %1250, !dbg !50
  %1253 = fptrunc <4 x float> %1232 to <4 x half>, !dbg !51
  %1254 = fptrunc <4 x float> %1233 to <4 x half>, !dbg !51
  %1255 = fptrunc <4 x float> %1234 to <4 x half>, !dbg !51
  %1256 = fptrunc <4 x float> %1235 to <4 x half>, !dbg !51
  %1257 = fptrunc <4 x float> %1236 to <4 x half>, !dbg !51
  %1258 = fptrunc <4 x float> %1237 to <4 x half>, !dbg !51
  %1259 = fptrunc <4 x float> %1238 to <4 x half>, !dbg !51
  %1260 = fptrunc <4 x float> %1239 to <4 x half>, !dbg !51
  %1261 = fptrunc <4 x float> %1240 to <4 x half>, !dbg !51
  %1262 = fptrunc <4 x float> %1241 to <4 x half>, !dbg !51
  %1263 = fptrunc <4 x float> %1242 to <4 x half>, !dbg !51
  %1264 = fptrunc <4 x float> %1243 to <4 x half>, !dbg !51
  %1265 = fptrunc <4 x float> %1244 to <4 x half>, !dbg !51
  %1266 = fptrunc <4 x float> %1245 to <4 x half>, !dbg !51
  %1267 = fptrunc <4 x float> %1246 to <4 x half>, !dbg !51
  %1268 = fptrunc <4 x float> %1247 to <4 x half>, !dbg !51
  %1269 = mul i64 %780, %49, !dbg !52
  %1270 = mul i64 %781, %49, !dbg !52
  %1271 = mul i64 %782, %49, !dbg !52
  %gep103 = getelementptr half, ptr addrspace(1) %invariant.gep102, i64 %1269, !dbg !52
  %gep105 = getelementptr half, ptr addrspace(1) %invariant.gep102, i64 %1270, !dbg !52
  %gep107 = getelementptr half, ptr addrspace(1) %invariant.gep102, i64 %1271, !dbg !52
  br i1 %794, label %1272, label %1276, !dbg !52

1272:                                             ; preds = %817
  %1273 = mul i64 %779, %49, !dbg !52
  %gep109 = getelementptr half, ptr addrspace(1) %invariant.gep102, i64 %1273, !dbg !52
  %1274 = addrspacecast ptr addrspace(1) %gep109 to ptr, !dbg !52
  %1275 = load <8 x half>, ptr %1274, align 16, !dbg !52
  br label %1276, !dbg !52

1276:                                             ; preds = %817, %1272
  %1277 = phi <8 x half> [ %1275, %1272 ], [ zeroinitializer, %817 ]
  br i1 %795, label %1278, label %1281, !dbg !52

1278:                                             ; preds = %1276
  %1279 = addrspacecast ptr addrspace(1) %gep103 to ptr, !dbg !52
  %1280 = load <8 x half>, ptr %1279, align 16, !dbg !52
  br label %1281, !dbg !52

1281:                                             ; preds = %1276, %1278
  %1282 = phi <8 x half> [ %1280, %1278 ], [ zeroinitializer, %1276 ]
  br i1 %796, label %1283, label %1286, !dbg !52

1283:                                             ; preds = %1281
  %1284 = addrspacecast ptr addrspace(1) %gep105 to ptr, !dbg !52
  %1285 = load <8 x half>, ptr %1284, align 16, !dbg !52
  br label %1286, !dbg !52

1286:                                             ; preds = %1281, %1283
  %1287 = phi <8 x half> [ %1285, %1283 ], [ zeroinitializer, %1281 ]
  br i1 %797, label %1288, label %1291, !dbg !52

1288:                                             ; preds = %1286
  %1289 = addrspacecast ptr addrspace(1) %gep107 to ptr, !dbg !52
  %1290 = load <8 x half>, ptr %1289, align 16, !dbg !52
  br label %1291, !dbg !52

1291:                                             ; preds = %1286, %1288
  %1292 = phi <8 x half> [ %1290, %1288 ], [ zeroinitializer, %1286 ]
  fence syncscope("workgroup") release, !dbg !52
  tail call void @llvm.amdgcn.s.barrier(), !dbg !52
  fence syncscope("workgroup") acquire, !dbg !52
  store <8 x half> %1277, ptr addrspace(3) %370, align 16, !dbg !52
  store <8 x half> %1282, ptr addrspace(3) %373, align 16, !dbg !52
  store <8 x half> %1287, ptr addrspace(3) %376, align 16, !dbg !52
  store <8 x half> %1292, ptr addrspace(3) %379, align 16, !dbg !52
  fence syncscope("workgroup") release, !dbg !52
  tail call void @llvm.amdgcn.s.barrier(), !dbg !52
  fence syncscope("workgroup") acquire, !dbg !52
  %1293 = load <1 x half>, ptr addrspace(3) %510, align 2, !dbg !52
  %1294 = load <1 x half>, ptr addrspace(3) %512, align 2, !dbg !52
  %1295 = load <1 x half>, ptr addrspace(3) %514, align 2, !dbg !52
  %1296 = shufflevector <1 x half> %1295, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1297 = load <1 x half>, ptr addrspace(3) %516, align 2, !dbg !52
  %1298 = shufflevector <1 x half> %1297, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1299 = load <1 x half>, ptr addrspace(3) %518, align 2, !dbg !52
  %1300 = load <1 x half>, ptr addrspace(3) %520, align 2, !dbg !52
  %1301 = load <1 x half>, ptr addrspace(3) %522, align 2, !dbg !52
  %1302 = shufflevector <1 x half> %1301, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1303 = load <1 x half>, ptr addrspace(3) %524, align 2, !dbg !52
  %1304 = shufflevector <1 x half> %1303, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1305 = load <1 x half>, ptr addrspace(3) %526, align 2, !dbg !52
  %1306 = load <1 x half>, ptr addrspace(3) %528, align 2, !dbg !52
  %1307 = load <1 x half>, ptr addrspace(3) %530, align 2, !dbg !52
  %1308 = shufflevector <1 x half> %1307, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1309 = load <1 x half>, ptr addrspace(3) %532, align 2, !dbg !52
  %1310 = shufflevector <1 x half> %1309, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1311 = load <1 x half>, ptr addrspace(3) %534, align 2, !dbg !52
  %1312 = load <1 x half>, ptr addrspace(3) %536, align 2, !dbg !52
  %1313 = load <1 x half>, ptr addrspace(3) %538, align 2, !dbg !52
  %1314 = shufflevector <1 x half> %1313, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1315 = load <1 x half>, ptr addrspace(3) %540, align 2, !dbg !52
  %1316 = shufflevector <1 x half> %1315, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1317 = load <1 x half>, ptr addrspace(3) %542, align 2, !dbg !52
  %1318 = load <1 x half>, ptr addrspace(3) %544, align 2, !dbg !52
  %1319 = load <1 x half>, ptr addrspace(3) %546, align 2, !dbg !52
  %1320 = shufflevector <1 x half> %1319, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1321 = load <1 x half>, ptr addrspace(3) %548, align 2, !dbg !52
  %1322 = shufflevector <1 x half> %1321, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1323 = load <1 x half>, ptr addrspace(3) %550, align 2, !dbg !52
  %1324 = load <1 x half>, ptr addrspace(3) %552, align 2, !dbg !52
  %1325 = load <1 x half>, ptr addrspace(3) %554, align 2, !dbg !52
  %1326 = shufflevector <1 x half> %1325, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1327 = load <1 x half>, ptr addrspace(3) %556, align 2, !dbg !52
  %1328 = shufflevector <1 x half> %1327, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1329 = load <1 x half>, ptr addrspace(3) %558, align 2, !dbg !52
  %1330 = load <1 x half>, ptr addrspace(3) %560, align 2, !dbg !52
  %1331 = load <1 x half>, ptr addrspace(3) %562, align 2, !dbg !52
  %1332 = shufflevector <1 x half> %1331, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1333 = load <1 x half>, ptr addrspace(3) %564, align 2, !dbg !52
  %1334 = shufflevector <1 x half> %1333, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1335 = load <1 x half>, ptr addrspace(3) %566, align 2, !dbg !52
  %1336 = load <1 x half>, ptr addrspace(3) %568, align 2, !dbg !52
  %1337 = load <1 x half>, ptr addrspace(3) %570, align 2, !dbg !52
  %1338 = shufflevector <1 x half> %1337, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1339 = load <1 x half>, ptr addrspace(3) %572, align 2, !dbg !52
  %1340 = shufflevector <1 x half> %1339, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1341 = load <1 x half>, ptr addrspace(3) %574, align 2, !dbg !52
  %1342 = load <1 x half>, ptr addrspace(3) %576, align 2, !dbg !52
  %1343 = load <1 x half>, ptr addrspace(3) %578, align 2, !dbg !52
  %1344 = shufflevector <1 x half> %1343, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1345 = load <1 x half>, ptr addrspace(3) %580, align 2, !dbg !52
  %1346 = shufflevector <1 x half> %1345, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1347 = load <1 x half>, ptr addrspace(3) %582, align 2, !dbg !52
  %1348 = load <1 x half>, ptr addrspace(3) %584, align 2, !dbg !52
  %1349 = load <1 x half>, ptr addrspace(3) %586, align 2, !dbg !52
  %1350 = shufflevector <1 x half> %1349, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1351 = load <1 x half>, ptr addrspace(3) %588, align 2, !dbg !52
  %1352 = shufflevector <1 x half> %1351, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1353 = load <1 x half>, ptr addrspace(3) %590, align 2, !dbg !52
  %1354 = load <1 x half>, ptr addrspace(3) %592, align 2, !dbg !52
  %1355 = load <1 x half>, ptr addrspace(3) %594, align 2, !dbg !52
  %1356 = shufflevector <1 x half> %1355, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1357 = load <1 x half>, ptr addrspace(3) %596, align 2, !dbg !52
  %1358 = shufflevector <1 x half> %1357, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1359 = load <1 x half>, ptr addrspace(3) %598, align 2, !dbg !52
  %1360 = load <1 x half>, ptr addrspace(3) %600, align 2, !dbg !52
  %1361 = load <1 x half>, ptr addrspace(3) %602, align 2, !dbg !52
  %1362 = shufflevector <1 x half> %1361, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1363 = load <1 x half>, ptr addrspace(3) %604, align 2, !dbg !52
  %1364 = shufflevector <1 x half> %1363, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1365 = load <1 x half>, ptr addrspace(3) %606, align 2, !dbg !52
  %1366 = load <1 x half>, ptr addrspace(3) %608, align 2, !dbg !52
  %1367 = load <1 x half>, ptr addrspace(3) %610, align 2, !dbg !52
  %1368 = shufflevector <1 x half> %1367, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1369 = load <1 x half>, ptr addrspace(3) %612, align 2, !dbg !52
  %1370 = shufflevector <1 x half> %1369, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1371 = load <1 x half>, ptr addrspace(3) %614, align 2, !dbg !52
  %1372 = load <1 x half>, ptr addrspace(3) %616, align 2, !dbg !52
  %1373 = load <1 x half>, ptr addrspace(3) %618, align 2, !dbg !52
  %1374 = shufflevector <1 x half> %1373, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1375 = load <1 x half>, ptr addrspace(3) %620, align 2, !dbg !52
  %1376 = shufflevector <1 x half> %1375, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1377 = load <1 x half>, ptr addrspace(3) %622, align 2, !dbg !52
  %1378 = load <1 x half>, ptr addrspace(3) %624, align 2, !dbg !52
  %1379 = load <1 x half>, ptr addrspace(3) %626, align 2, !dbg !52
  %1380 = shufflevector <1 x half> %1379, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1381 = load <1 x half>, ptr addrspace(3) %628, align 2, !dbg !52
  %1382 = shufflevector <1 x half> %1381, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1383 = load <1 x half>, ptr addrspace(3) %630, align 2, !dbg !52
  %1384 = load <1 x half>, ptr addrspace(3) %632, align 2, !dbg !52
  %1385 = load <1 x half>, ptr addrspace(3) %634, align 2, !dbg !52
  %1386 = shufflevector <1 x half> %1385, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1387 = load <1 x half>, ptr addrspace(3) %636, align 2, !dbg !52
  %1388 = shufflevector <1 x half> %1387, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1389 = load <1 x half>, ptr addrspace(3) %638, align 2, !dbg !52
  %1390 = load <1 x half>, ptr addrspace(3) %640, align 2, !dbg !52
  %1391 = load <1 x half>, ptr addrspace(3) %642, align 2, !dbg !52
  %1392 = shufflevector <1 x half> %1391, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1393 = load <1 x half>, ptr addrspace(3) %644, align 2, !dbg !52
  %1394 = shufflevector <1 x half> %1393, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1395 = load <1 x half>, ptr addrspace(3) %646, align 2, !dbg !52
  %1396 = load <1 x half>, ptr addrspace(3) %648, align 2, !dbg !52
  %1397 = load <1 x half>, ptr addrspace(3) %650, align 2, !dbg !52
  %1398 = shufflevector <1 x half> %1397, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1399 = load <1 x half>, ptr addrspace(3) %652, align 2, !dbg !52
  %1400 = shufflevector <1 x half> %1399, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1401 = load <1 x half>, ptr addrspace(3) %654, align 2, !dbg !52
  %1402 = load <1 x half>, ptr addrspace(3) %656, align 2, !dbg !52
  %1403 = load <1 x half>, ptr addrspace(3) %658, align 2, !dbg !52
  %1404 = shufflevector <1 x half> %1403, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1405 = load <1 x half>, ptr addrspace(3) %660, align 2, !dbg !52
  %1406 = shufflevector <1 x half> %1405, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1407 = load <1 x half>, ptr addrspace(3) %662, align 2, !dbg !52
  %1408 = load <1 x half>, ptr addrspace(3) %664, align 2, !dbg !52
  %1409 = load <1 x half>, ptr addrspace(3) %666, align 2, !dbg !52
  %1410 = shufflevector <1 x half> %1409, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1411 = load <1 x half>, ptr addrspace(3) %668, align 2, !dbg !52
  %1412 = shufflevector <1 x half> %1411, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1413 = load <1 x half>, ptr addrspace(3) %670, align 2, !dbg !52
  %1414 = load <1 x half>, ptr addrspace(3) %672, align 2, !dbg !52
  %1415 = load <1 x half>, ptr addrspace(3) %674, align 2, !dbg !52
  %1416 = shufflevector <1 x half> %1415, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1417 = load <1 x half>, ptr addrspace(3) %676, align 2, !dbg !52
  %1418 = shufflevector <1 x half> %1417, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1419 = load <1 x half>, ptr addrspace(3) %678, align 2, !dbg !52
  %1420 = load <1 x half>, ptr addrspace(3) %680, align 2, !dbg !52
  %1421 = load <1 x half>, ptr addrspace(3) %682, align 2, !dbg !52
  %1422 = shufflevector <1 x half> %1421, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1423 = load <1 x half>, ptr addrspace(3) %684, align 2, !dbg !52
  %1424 = shufflevector <1 x half> %1423, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1425 = load <1 x half>, ptr addrspace(3) %686, align 2, !dbg !52
  %1426 = load <1 x half>, ptr addrspace(3) %688, align 2, !dbg !52
  %1427 = load <1 x half>, ptr addrspace(3) %690, align 2, !dbg !52
  %1428 = shufflevector <1 x half> %1427, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1429 = load <1 x half>, ptr addrspace(3) %692, align 2, !dbg !52
  %1430 = shufflevector <1 x half> %1429, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1431 = load <1 x half>, ptr addrspace(3) %694, align 2, !dbg !52
  %1432 = load <1 x half>, ptr addrspace(3) %696, align 2, !dbg !52
  %1433 = load <1 x half>, ptr addrspace(3) %698, align 2, !dbg !52
  %1434 = shufflevector <1 x half> %1433, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1435 = load <1 x half>, ptr addrspace(3) %700, align 2, !dbg !52
  %1436 = shufflevector <1 x half> %1435, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1437 = load <1 x half>, ptr addrspace(3) %702, align 2, !dbg !52
  %1438 = load <1 x half>, ptr addrspace(3) %704, align 2, !dbg !52
  %1439 = load <1 x half>, ptr addrspace(3) %706, align 2, !dbg !52
  %1440 = shufflevector <1 x half> %1439, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1441 = load <1 x half>, ptr addrspace(3) %708, align 2, !dbg !52
  %1442 = shufflevector <1 x half> %1441, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1443 = load <1 x half>, ptr addrspace(3) %710, align 2, !dbg !52
  %1444 = load <1 x half>, ptr addrspace(3) %712, align 2, !dbg !52
  %1445 = load <1 x half>, ptr addrspace(3) %714, align 2, !dbg !52
  %1446 = shufflevector <1 x half> %1445, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1447 = load <1 x half>, ptr addrspace(3) %716, align 2, !dbg !52
  %1448 = shufflevector <1 x half> %1447, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1449 = load <1 x half>, ptr addrspace(3) %718, align 2, !dbg !52
  %1450 = load <1 x half>, ptr addrspace(3) %720, align 2, !dbg !52
  %1451 = load <1 x half>, ptr addrspace(3) %722, align 2, !dbg !52
  %1452 = shufflevector <1 x half> %1451, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1453 = load <1 x half>, ptr addrspace(3) %724, align 2, !dbg !52
  %1454 = shufflevector <1 x half> %1453, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1455 = load <1 x half>, ptr addrspace(3) %726, align 2, !dbg !52
  %1456 = load <1 x half>, ptr addrspace(3) %728, align 2, !dbg !52
  %1457 = load <1 x half>, ptr addrspace(3) %730, align 2, !dbg !52
  %1458 = shufflevector <1 x half> %1457, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1459 = load <1 x half>, ptr addrspace(3) %732, align 2, !dbg !52
  %1460 = shufflevector <1 x half> %1459, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1461 = load <1 x half>, ptr addrspace(3) %734, align 2, !dbg !52
  %1462 = load <1 x half>, ptr addrspace(3) %736, align 2, !dbg !52
  %1463 = load <1 x half>, ptr addrspace(3) %738, align 2, !dbg !52
  %1464 = shufflevector <1 x half> %1463, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1465 = load <1 x half>, ptr addrspace(3) %740, align 2, !dbg !52
  %1466 = shufflevector <1 x half> %1465, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1467 = load <1 x half>, ptr addrspace(3) %742, align 2, !dbg !52
  %1468 = load <1 x half>, ptr addrspace(3) %744, align 2, !dbg !52
  %1469 = load <1 x half>, ptr addrspace(3) %746, align 2, !dbg !52
  %1470 = shufflevector <1 x half> %1469, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1471 = load <1 x half>, ptr addrspace(3) %748, align 2, !dbg !52
  %1472 = shufflevector <1 x half> %1471, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1473 = load <1 x half>, ptr addrspace(3) %750, align 2, !dbg !52
  %1474 = load <1 x half>, ptr addrspace(3) %752, align 2, !dbg !52
  %1475 = load <1 x half>, ptr addrspace(3) %754, align 2, !dbg !52
  %1476 = shufflevector <1 x half> %1475, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1477 = load <1 x half>, ptr addrspace(3) %756, align 2, !dbg !52
  %1478 = shufflevector <1 x half> %1477, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1479 = load <1 x half>, ptr addrspace(3) %758, align 2, !dbg !52
  %1480 = load <1 x half>, ptr addrspace(3) %760, align 2, !dbg !52
  %1481 = load <1 x half>, ptr addrspace(3) %762, align 2, !dbg !52
  %1482 = shufflevector <1 x half> %1481, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %1483 = load <1 x half>, ptr addrspace(3) %764, align 2, !dbg !52
  %1484 = shufflevector <1 x half> %1483, <1 x half> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  fence syncscope("workgroup") release, !dbg !51
  tail call void @llvm.amdgcn.s.barrier(), !dbg !51
  fence syncscope("workgroup") acquire, !dbg !51
  %1485 = shufflevector <1 x half> %1293, <1 x half> %1294, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1486 = shufflevector <4 x half> %1485, <4 x half> %1296, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1487 = shufflevector <4 x half> %1486, <4 x half> %1298, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1488 = shufflevector <1 x half> %1299, <1 x half> %1300, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1489 = shufflevector <4 x half> %1488, <4 x half> %1302, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1490 = shufflevector <4 x half> %1489, <4 x half> %1304, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1491 = shufflevector <1 x half> %1305, <1 x half> %1306, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1492 = shufflevector <4 x half> %1491, <4 x half> %1308, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1493 = shufflevector <4 x half> %1492, <4 x half> %1310, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1494 = shufflevector <1 x half> %1311, <1 x half> %1312, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1495 = shufflevector <4 x half> %1494, <4 x half> %1314, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1496 = shufflevector <4 x half> %1495, <4 x half> %1316, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1497 = shufflevector <1 x half> %1317, <1 x half> %1318, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1498 = shufflevector <4 x half> %1497, <4 x half> %1320, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1499 = shufflevector <4 x half> %1498, <4 x half> %1322, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1500 = shufflevector <1 x half> %1323, <1 x half> %1324, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1501 = shufflevector <4 x half> %1500, <4 x half> %1326, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1502 = shufflevector <4 x half> %1501, <4 x half> %1328, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1503 = shufflevector <1 x half> %1329, <1 x half> %1330, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1504 = shufflevector <4 x half> %1503, <4 x half> %1332, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1505 = shufflevector <4 x half> %1504, <4 x half> %1334, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1506 = shufflevector <1 x half> %1335, <1 x half> %1336, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1507 = shufflevector <4 x half> %1506, <4 x half> %1338, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1508 = shufflevector <4 x half> %1507, <4 x half> %1340, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1509 = shufflevector <1 x half> %1341, <1 x half> %1342, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1510 = shufflevector <4 x half> %1509, <4 x half> %1344, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1511 = shufflevector <4 x half> %1510, <4 x half> %1346, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1512 = shufflevector <1 x half> %1347, <1 x half> %1348, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1513 = shufflevector <4 x half> %1512, <4 x half> %1350, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1514 = shufflevector <4 x half> %1513, <4 x half> %1352, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1515 = shufflevector <1 x half> %1353, <1 x half> %1354, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1516 = shufflevector <4 x half> %1515, <4 x half> %1356, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1517 = shufflevector <4 x half> %1516, <4 x half> %1358, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1518 = shufflevector <1 x half> %1359, <1 x half> %1360, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1519 = shufflevector <4 x half> %1518, <4 x half> %1362, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1520 = shufflevector <4 x half> %1519, <4 x half> %1364, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1521 = shufflevector <1 x half> %1365, <1 x half> %1366, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1522 = shufflevector <4 x half> %1521, <4 x half> %1368, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1523 = shufflevector <4 x half> %1522, <4 x half> %1370, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1524 = shufflevector <1 x half> %1371, <1 x half> %1372, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1525 = shufflevector <4 x half> %1524, <4 x half> %1374, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1526 = shufflevector <4 x half> %1525, <4 x half> %1376, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1527 = shufflevector <1 x half> %1377, <1 x half> %1378, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1528 = shufflevector <4 x half> %1527, <4 x half> %1380, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1529 = shufflevector <4 x half> %1528, <4 x half> %1382, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1530 = shufflevector <1 x half> %1383, <1 x half> %1384, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1531 = shufflevector <4 x half> %1530, <4 x half> %1386, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1532 = shufflevector <4 x half> %1531, <4 x half> %1388, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1533 = shufflevector <1 x half> %1389, <1 x half> %1390, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1534 = shufflevector <4 x half> %1533, <4 x half> %1392, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1535 = shufflevector <4 x half> %1534, <4 x half> %1394, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1536 = shufflevector <1 x half> %1395, <1 x half> %1396, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1537 = shufflevector <4 x half> %1536, <4 x half> %1398, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1538 = shufflevector <4 x half> %1537, <4 x half> %1400, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1539 = shufflevector <1 x half> %1401, <1 x half> %1402, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1540 = shufflevector <4 x half> %1539, <4 x half> %1404, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1541 = shufflevector <4 x half> %1540, <4 x half> %1406, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1542 = shufflevector <1 x half> %1407, <1 x half> %1408, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1543 = shufflevector <4 x half> %1542, <4 x half> %1410, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1544 = shufflevector <4 x half> %1543, <4 x half> %1412, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1545 = shufflevector <1 x half> %1413, <1 x half> %1414, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1546 = shufflevector <4 x half> %1545, <4 x half> %1416, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1547 = shufflevector <4 x half> %1546, <4 x half> %1418, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1548 = shufflevector <1 x half> %1419, <1 x half> %1420, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1549 = shufflevector <4 x half> %1548, <4 x half> %1422, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1550 = shufflevector <4 x half> %1549, <4 x half> %1424, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1551 = shufflevector <1 x half> %1425, <1 x half> %1426, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1552 = shufflevector <4 x half> %1551, <4 x half> %1428, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1553 = shufflevector <4 x half> %1552, <4 x half> %1430, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1554 = shufflevector <1 x half> %1431, <1 x half> %1432, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1555 = shufflevector <4 x half> %1554, <4 x half> %1434, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1556 = shufflevector <4 x half> %1555, <4 x half> %1436, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1557 = shufflevector <1 x half> %1437, <1 x half> %1438, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1558 = shufflevector <4 x half> %1557, <4 x half> %1440, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1559 = shufflevector <4 x half> %1558, <4 x half> %1442, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1560 = shufflevector <1 x half> %1443, <1 x half> %1444, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1561 = shufflevector <4 x half> %1560, <4 x half> %1446, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1562 = shufflevector <4 x half> %1561, <4 x half> %1448, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1563 = shufflevector <1 x half> %1449, <1 x half> %1450, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1564 = shufflevector <4 x half> %1563, <4 x half> %1452, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1565 = shufflevector <4 x half> %1564, <4 x half> %1454, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1566 = shufflevector <1 x half> %1455, <1 x half> %1456, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1567 = shufflevector <4 x half> %1566, <4 x half> %1458, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1568 = shufflevector <4 x half> %1567, <4 x half> %1460, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1569 = shufflevector <1 x half> %1461, <1 x half> %1462, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1570 = shufflevector <4 x half> %1569, <4 x half> %1464, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1571 = shufflevector <4 x half> %1570, <4 x half> %1466, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1572 = shufflevector <1 x half> %1467, <1 x half> %1468, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1573 = shufflevector <4 x half> %1572, <4 x half> %1470, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1574 = shufflevector <4 x half> %1573, <4 x half> %1472, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1575 = shufflevector <1 x half> %1473, <1 x half> %1474, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1576 = shufflevector <4 x half> %1575, <4 x half> %1476, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1577 = shufflevector <4 x half> %1576, <4 x half> %1478, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1578 = shufflevector <1 x half> %1479, <1 x half> %1480, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %1579 = shufflevector <4 x half> %1578, <4 x half> %1482, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !53
  %1580 = shufflevector <4 x half> %1579, <4 x half> %1484, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !53
  %1581 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1487, <4 x half> %1253, <16 x float> %1251, i32 0, i32 0, i32 0), !dbg !53
  %1582 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1490, <4 x half> %1254, <16 x float> %1581, i32 0, i32 0, i32 0), !dbg !53
  %1583 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1493, <4 x half> %1255, <16 x float> %1582, i32 0, i32 0, i32 0), !dbg !53
  %1584 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1496, <4 x half> %1256, <16 x float> %1583, i32 0, i32 0, i32 0), !dbg !53
  %1585 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1499, <4 x half> %1257, <16 x float> %1584, i32 0, i32 0, i32 0), !dbg !53
  %1586 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1502, <4 x half> %1258, <16 x float> %1585, i32 0, i32 0, i32 0), !dbg !53
  %1587 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1505, <4 x half> %1259, <16 x float> %1586, i32 0, i32 0, i32 0), !dbg !53
  %1588 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1508, <4 x half> %1260, <16 x float> %1587, i32 0, i32 0, i32 0), !dbg !53
  %1589 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1511, <4 x half> %1261, <16 x float> %1588, i32 0, i32 0, i32 0), !dbg !53
  %1590 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1514, <4 x half> %1262, <16 x float> %1589, i32 0, i32 0, i32 0), !dbg !53
  %1591 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1517, <4 x half> %1263, <16 x float> %1590, i32 0, i32 0, i32 0), !dbg !53
  %1592 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1520, <4 x half> %1264, <16 x float> %1591, i32 0, i32 0, i32 0), !dbg !53
  %1593 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1523, <4 x half> %1265, <16 x float> %1592, i32 0, i32 0, i32 0), !dbg !53
  %1594 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1526, <4 x half> %1266, <16 x float> %1593, i32 0, i32 0, i32 0), !dbg !53
  %1595 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1529, <4 x half> %1267, <16 x float> %1594, i32 0, i32 0, i32 0), !dbg !53
  %1596 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1532, <4 x half> %1268, <16 x float> %1595, i32 0, i32 0, i32 0), !dbg !53
  %1597 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1535, <4 x half> %1253, <16 x float> %1252, i32 0, i32 0, i32 0), !dbg !53
  %1598 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1538, <4 x half> %1254, <16 x float> %1597, i32 0, i32 0, i32 0), !dbg !53
  %1599 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1541, <4 x half> %1255, <16 x float> %1598, i32 0, i32 0, i32 0), !dbg !53
  %1600 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1544, <4 x half> %1256, <16 x float> %1599, i32 0, i32 0, i32 0), !dbg !53
  %1601 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1547, <4 x half> %1257, <16 x float> %1600, i32 0, i32 0, i32 0), !dbg !53
  %1602 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1550, <4 x half> %1258, <16 x float> %1601, i32 0, i32 0, i32 0), !dbg !53
  %1603 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1553, <4 x half> %1259, <16 x float> %1602, i32 0, i32 0, i32 0), !dbg !53
  %1604 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1556, <4 x half> %1260, <16 x float> %1603, i32 0, i32 0, i32 0), !dbg !53
  %1605 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1559, <4 x half> %1261, <16 x float> %1604, i32 0, i32 0, i32 0), !dbg !53
  %1606 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1562, <4 x half> %1262, <16 x float> %1605, i32 0, i32 0, i32 0), !dbg !53
  %1607 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1565, <4 x half> %1263, <16 x float> %1606, i32 0, i32 0, i32 0), !dbg !53
  %1608 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1568, <4 x half> %1264, <16 x float> %1607, i32 0, i32 0, i32 0), !dbg !53
  %1609 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1571, <4 x half> %1265, <16 x float> %1608, i32 0, i32 0, i32 0), !dbg !53
  %1610 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1574, <4 x half> %1266, <16 x float> %1609, i32 0, i32 0, i32 0), !dbg !53
  %1611 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1577, <4 x half> %1267, <16 x float> %1610, i32 0, i32 0, i32 0), !dbg !53
  %1612 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half> %1580, <4 x half> %1268, <16 x float> %1611, i32 0, i32 0, i32 0), !dbg !53
  %1613 = add nsw i64 %773, 128, !dbg !54
  %1614 = add nuw nsw i32 %776, 128, !dbg !23
  %1615 = icmp slt i32 %1614, %262, !dbg !23
  br i1 %1615, label %772, label %._crit_edge.loopexit, !dbg !23

._crit_edge.loopexit:                             ; preds = %1291
  %1616 = extractelement <16 x float> %1612, i64 15, !dbg !55
  %1617 = fptrunc float %1616 to half, !dbg !55
  %1618 = extractelement <16 x float> %1612, i64 14, !dbg !55
  %1619 = fptrunc float %1618 to half, !dbg !55
  %1620 = extractelement <16 x float> %1612, i64 13, !dbg !55
  %1621 = fptrunc float %1620 to half, !dbg !55
  %1622 = extractelement <16 x float> %1612, i64 12, !dbg !55
  %1623 = fptrunc float %1622 to half, !dbg !55
  %1624 = extractelement <16 x float> %1612, i64 11, !dbg !55
  %1625 = fptrunc float %1624 to half, !dbg !55
  %1626 = extractelement <16 x float> %1612, i64 10, !dbg !55
  %1627 = fptrunc float %1626 to half, !dbg !55
  %1628 = extractelement <16 x float> %1612, i64 9, !dbg !55
  %1629 = fptrunc float %1628 to half, !dbg !55
  %1630 = extractelement <16 x float> %1612, i64 8, !dbg !55
  %1631 = fptrunc float %1630 to half, !dbg !55
  %1632 = extractelement <16 x float> %1612, i64 7, !dbg !55
  %1633 = fptrunc float %1632 to half, !dbg !55
  %1634 = extractelement <16 x float> %1612, i64 6, !dbg !55
  %1635 = fptrunc float %1634 to half, !dbg !55
  %1636 = extractelement <16 x float> %1612, i64 5, !dbg !55
  %1637 = fptrunc float %1636 to half, !dbg !55
  %1638 = extractelement <16 x float> %1612, i64 4, !dbg !55
  %1639 = fptrunc float %1638 to half, !dbg !55
  %1640 = extractelement <16 x float> %1612, i64 3, !dbg !55
  %1641 = fptrunc float %1640 to half, !dbg !55
  %1642 = extractelement <16 x float> %1612, i64 2, !dbg !55
  %1643 = fptrunc float %1642 to half, !dbg !55
  %1644 = extractelement <16 x float> %1612, i64 1, !dbg !55
  %1645 = fptrunc float %1644 to half, !dbg !55
  %1646 = extractelement <16 x float> %1612, i64 0, !dbg !55
  %1647 = fptrunc float %1646 to half, !dbg !55
  %1648 = extractelement <16 x float> %1596, i64 15, !dbg !55
  %1649 = fptrunc float %1648 to half, !dbg !55
  %1650 = extractelement <16 x float> %1596, i64 14, !dbg !55
  %1651 = fptrunc float %1650 to half, !dbg !55
  %1652 = extractelement <16 x float> %1596, i64 13, !dbg !55
  %1653 = fptrunc float %1652 to half, !dbg !55
  %1654 = extractelement <16 x float> %1596, i64 12, !dbg !55
  %1655 = fptrunc float %1654 to half, !dbg !55
  %1656 = extractelement <16 x float> %1596, i64 11, !dbg !55
  %1657 = fptrunc float %1656 to half, !dbg !55
  %1658 = extractelement <16 x float> %1596, i64 10, !dbg !55
  %1659 = fptrunc float %1658 to half, !dbg !55
  %1660 = extractelement <16 x float> %1596, i64 9, !dbg !55
  %1661 = fptrunc float %1660 to half, !dbg !55
  %1662 = extractelement <16 x float> %1596, i64 8, !dbg !55
  %1663 = fptrunc float %1662 to half, !dbg !55
  %1664 = extractelement <16 x float> %1596, i64 7, !dbg !55
  %1665 = fptrunc float %1664 to half, !dbg !55
  %1666 = extractelement <16 x float> %1596, i64 6, !dbg !55
  %1667 = fptrunc float %1666 to half, !dbg !55
  %1668 = extractelement <16 x float> %1596, i64 5, !dbg !55
  %1669 = fptrunc float %1668 to half, !dbg !55
  %1670 = extractelement <16 x float> %1596, i64 4, !dbg !55
  %1671 = fptrunc float %1670 to half, !dbg !55
  %1672 = extractelement <16 x float> %1596, i64 3, !dbg !55
  %1673 = fptrunc float %1672 to half, !dbg !55
  %1674 = extractelement <16 x float> %1596, i64 2, !dbg !55
  %1675 = fptrunc float %1674 to half, !dbg !55
  %1676 = extractelement <16 x float> %1596, i64 1, !dbg !55
  %1677 = fptrunc float %1676 to half, !dbg !55
  %1678 = extractelement <16 x float> %1596, i64 0, !dbg !55
  %1679 = fptrunc float %1678 to half, !dbg !55
  br label %._crit_edge, !dbg !56

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %23
  %.lcssa95 = phi float [ 0.000000e+00, %23 ], [ %1228, %._crit_edge.loopexit ]
  %1680 = phi half [ 0xH0000, %23 ], [ %1679, %._crit_edge.loopexit ]
  %1681 = phi half [ 0xH0000, %23 ], [ %1677, %._crit_edge.loopexit ]
  %1682 = phi half [ 0xH0000, %23 ], [ %1675, %._crit_edge.loopexit ]
  %1683 = phi half [ 0xH0000, %23 ], [ %1673, %._crit_edge.loopexit ]
  %1684 = phi half [ 0xH0000, %23 ], [ %1671, %._crit_edge.loopexit ]
  %1685 = phi half [ 0xH0000, %23 ], [ %1669, %._crit_edge.loopexit ]
  %1686 = phi half [ 0xH0000, %23 ], [ %1667, %._crit_edge.loopexit ]
  %1687 = phi half [ 0xH0000, %23 ], [ %1665, %._crit_edge.loopexit ]
  %1688 = phi half [ 0xH0000, %23 ], [ %1663, %._crit_edge.loopexit ]
  %1689 = phi half [ 0xH0000, %23 ], [ %1661, %._crit_edge.loopexit ]
  %1690 = phi half [ 0xH0000, %23 ], [ %1659, %._crit_edge.loopexit ]
  %1691 = phi half [ 0xH0000, %23 ], [ %1657, %._crit_edge.loopexit ]
  %1692 = phi half [ 0xH0000, %23 ], [ %1655, %._crit_edge.loopexit ]
  %1693 = phi half [ 0xH0000, %23 ], [ %1653, %._crit_edge.loopexit ]
  %1694 = phi half [ 0xH0000, %23 ], [ %1651, %._crit_edge.loopexit ]
  %1695 = phi half [ 0xH0000, %23 ], [ %1649, %._crit_edge.loopexit ]
  %1696 = phi half [ 0xH0000, %23 ], [ %1647, %._crit_edge.loopexit ]
  %1697 = phi half [ 0xH0000, %23 ], [ %1645, %._crit_edge.loopexit ]
  %1698 = phi half [ 0xH0000, %23 ], [ %1643, %._crit_edge.loopexit ]
  %1699 = phi half [ 0xH0000, %23 ], [ %1641, %._crit_edge.loopexit ]
  %1700 = phi half [ 0xH0000, %23 ], [ %1639, %._crit_edge.loopexit ]
  %1701 = phi half [ 0xH0000, %23 ], [ %1637, %._crit_edge.loopexit ]
  %1702 = phi half [ 0xH0000, %23 ], [ %1635, %._crit_edge.loopexit ]
  %1703 = phi half [ 0xH0000, %23 ], [ %1633, %._crit_edge.loopexit ]
  %1704 = phi half [ 0xH0000, %23 ], [ %1631, %._crit_edge.loopexit ]
  %1705 = phi half [ 0xH0000, %23 ], [ %1629, %._crit_edge.loopexit ]
  %1706 = phi half [ 0xH0000, %23 ], [ %1627, %._crit_edge.loopexit ]
  %1707 = phi half [ 0xH0000, %23 ], [ %1625, %._crit_edge.loopexit ]
  %1708 = phi half [ 0xH0000, %23 ], [ %1623, %._crit_edge.loopexit ]
  %1709 = phi half [ 0xH0000, %23 ], [ %1621, %._crit_edge.loopexit ]
  %1710 = phi half [ 0xH0000, %23 ], [ %1619, %._crit_edge.loopexit ]
  %1711 = phi half [ 0xH0000, %23 ], [ %1617, %._crit_edge.loopexit ]
  %.lcssa = phi float [ 0xFFF0000000000000, %23 ], [ %1105, %._crit_edge.loopexit ]
  %1712 = mul i32 %25, %21, !dbg !56
  %1713 = sext i32 %1712 to i64, !dbg !57
  %1714 = getelementptr float, ptr addrspace(1) %5, i64 %1713, !dbg !57
  %1715 = sext i32 %41 to i64, !dbg !58
  %1716 = getelementptr float, ptr addrspace(1) %1714, i64 %1715, !dbg !58
  fence syncscope("workgroup") release, !dbg !59
  tail call void @llvm.amdgcn.s.barrier(), !dbg !59
  fence syncscope("workgroup") acquire, !dbg !59
  %1717 = getelementptr float, ptr addrspace(3) @global_smem, i64 %51, !dbg !59
  %1718 = insertelement <1 x float> poison, float %.lcssa95, i64 0, !dbg !59
  store <1 x float> %1718, ptr addrspace(3) %1717, align 4, !dbg !59
  fence syncscope("workgroup") release, !dbg !59
  tail call void @llvm.amdgcn.s.barrier(), !dbg !59
  fence syncscope("workgroup") acquire, !dbg !59
  %1719 = zext nneg i32 %40 to i64, !dbg !59
  %1720 = getelementptr float, ptr addrspace(3) @global_smem, i64 %1719, !dbg !59
  %urem = and i32 %27, 128, !dbg !59
  %.not.not = icmp eq i32 %urem, 0, !dbg !59
  br i1 %.not.not, label %1721, label %1725, !dbg !59

1721:                                             ; preds = %._crit_edge
  %1722 = load i32, ptr addrspace(3) %1720, align 4, !dbg !59
  %1723 = getelementptr float, ptr addrspace(1) %4, i64 %1713, !dbg !60
  %1724 = getelementptr float, ptr addrspace(1) %1723, i64 %1715, !dbg !61
  store i32 %1722, ptr addrspace(1) %1724, align 4, !dbg !59
  br label %1725, !dbg !59

1725:                                             ; preds = %1721, %._crit_edge
  fence syncscope("workgroup") release, !dbg !62
  tail call void @llvm.amdgcn.s.barrier(), !dbg !62
  fence syncscope("workgroup") acquire, !dbg !62
  %1726 = insertelement <1 x float> poison, float %.lcssa, i64 0, !dbg !62
  store <1 x float> %1726, ptr addrspace(3) %1717, align 4, !dbg !62
  fence syncscope("workgroup") release, !dbg !62
  tail call void @llvm.amdgcn.s.barrier(), !dbg !62
  fence syncscope("workgroup") acquire, !dbg !62
  br i1 %.not.not, label %1727, label %1729, !dbg !62

1727:                                             ; preds = %1725
  %1728 = load i32, ptr addrspace(3) %1720, align 4, !dbg !62
  store i32 %1728, ptr addrspace(1) %1716, align 4, !dbg !62
  br label %1729, !dbg !62

1729:                                             ; preds = %1727, %1725
  %1730 = icmp sgt i64 %56, -1, !dbg !63
  %1731 = icmp slt i64 %56, %47, !dbg !63
  %1732 = and i1 %1730, %1731, !dbg !63
  br i1 %1732, label %.critedge, label %.critedge93, !dbg !63

.critedge:                                        ; preds = %1729
  %1733 = mul nsw i64 %56, %50, !dbg !63
  %1734 = getelementptr half, ptr addrspace(1) %6, i64 %1733, !dbg !63
  %1735 = getelementptr half, ptr addrspace(1) %1734, i64 %140, !dbg !63
  %1736 = getelementptr half, ptr addrspace(1) %1734, i64 %138, !dbg !63
  %1737 = getelementptr half, ptr addrspace(1) %1734, i64 %136, !dbg !63
  %1738 = getelementptr half, ptr addrspace(1) %1734, i64 %134, !dbg !63
  %1739 = getelementptr half, ptr addrspace(1) %1734, i64 %132, !dbg !63
  %1740 = getelementptr half, ptr addrspace(1) %1734, i64 %130, !dbg !63
  %1741 = getelementptr half, ptr addrspace(1) %1734, i64 %128, !dbg !63
  %1742 = getelementptr half, ptr addrspace(1) %1734, i64 %126, !dbg !63
  %1743 = getelementptr half, ptr addrspace(1) %1734, i64 %124, !dbg !63
  %1744 = getelementptr half, ptr addrspace(1) %1734, i64 %122, !dbg !63
  %1745 = getelementptr half, ptr addrspace(1) %1734, i64 %120, !dbg !63
  %1746 = getelementptr half, ptr addrspace(1) %1734, i64 %118, !dbg !63
  %1747 = getelementptr half, ptr addrspace(1) %1734, i64 %116, !dbg !63
  %1748 = getelementptr half, ptr addrspace(1) %1734, i64 %114, !dbg !63
  %1749 = getelementptr half, ptr addrspace(1) %1734, i64 %112, !dbg !63
  %1750 = getelementptr half, ptr addrspace(1) %1734, i64 %110, !dbg !63
  %1751 = getelementptr half, ptr addrspace(1) %1734, i64 %108, !dbg !63
  %1752 = getelementptr half, ptr addrspace(1) %1734, i64 %106, !dbg !63
  %1753 = getelementptr half, ptr addrspace(1) %1734, i64 %104, !dbg !63
  %1754 = getelementptr half, ptr addrspace(1) %1734, i64 %102, !dbg !63
  %1755 = getelementptr half, ptr addrspace(1) %1734, i64 %100, !dbg !63
  %1756 = getelementptr half, ptr addrspace(1) %1734, i64 %98, !dbg !63
  %1757 = getelementptr half, ptr addrspace(1) %1734, i64 %96, !dbg !63
  %1758 = getelementptr half, ptr addrspace(1) %1734, i64 %94, !dbg !63
  %1759 = getelementptr half, ptr addrspace(1) %1734, i64 %92, !dbg !63
  %1760 = getelementptr half, ptr addrspace(1) %1734, i64 %90, !dbg !63
  %1761 = getelementptr half, ptr addrspace(1) %1734, i64 %88, !dbg !63
  %1762 = getelementptr half, ptr addrspace(1) %1734, i64 %86, !dbg !63
  %1763 = getelementptr half, ptr addrspace(1) %1734, i64 %84, !dbg !63
  %1764 = getelementptr half, ptr addrspace(1) %1734, i64 %83, !dbg !63
  %1765 = getelementptr half, ptr addrspace(1) %1734, i64 %82, !dbg !63
  %1766 = getelementptr half, ptr addrspace(1) %1734, i64 %81, !dbg !63
  store half %1680, ptr addrspace(1) %1766, align 2, !dbg !63
  store half %1681, ptr addrspace(1) %1765, align 2, !dbg !63
  store half %1682, ptr addrspace(1) %1764, align 2, !dbg !63
  store half %1683, ptr addrspace(1) %1763, align 2, !dbg !63
  store half %1684, ptr addrspace(1) %1762, align 2, !dbg !63
  store half %1685, ptr addrspace(1) %1761, align 2, !dbg !63
  store half %1686, ptr addrspace(1) %1760, align 2, !dbg !63
  store half %1687, ptr addrspace(1) %1759, align 2, !dbg !63
  store half %1688, ptr addrspace(1) %1758, align 2, !dbg !63
  store half %1689, ptr addrspace(1) %1757, align 2, !dbg !63
  store half %1690, ptr addrspace(1) %1756, align 2, !dbg !63
  store half %1691, ptr addrspace(1) %1755, align 2, !dbg !63
  store half %1692, ptr addrspace(1) %1754, align 2, !dbg !63
  store half %1693, ptr addrspace(1) %1753, align 2, !dbg !63
  store half %1694, ptr addrspace(1) %1752, align 2, !dbg !63
  store half %1695, ptr addrspace(1) %1751, align 2, !dbg !63
  store half %1696, ptr addrspace(1) %1750, align 2, !dbg !63
  store half %1697, ptr addrspace(1) %1749, align 2, !dbg !63
  store half %1698, ptr addrspace(1) %1748, align 2, !dbg !63
  store half %1699, ptr addrspace(1) %1747, align 2, !dbg !63
  store half %1700, ptr addrspace(1) %1746, align 2, !dbg !63
  store half %1701, ptr addrspace(1) %1745, align 2, !dbg !63
  store half %1702, ptr addrspace(1) %1744, align 2, !dbg !63
  store half %1703, ptr addrspace(1) %1743, align 2, !dbg !63
  store half %1704, ptr addrspace(1) %1742, align 2, !dbg !63
  store half %1705, ptr addrspace(1) %1741, align 2, !dbg !63
  store half %1706, ptr addrspace(1) %1740, align 2, !dbg !63
  store half %1707, ptr addrspace(1) %1739, align 2, !dbg !63
  store half %1708, ptr addrspace(1) %1738, align 2, !dbg !63
  store half %1709, ptr addrspace(1) %1737, align 2, !dbg !63
  store half %1710, ptr addrspace(1) %1736, align 2, !dbg !63
  store half %1711, ptr addrspace(1) %1735, align 2, !dbg !63
  br label %.critedge93, !dbg !63

.critedge93:                                      ; preds = %1729, %.critedge
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workgroup.id.y() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x float> @llvm.amdgcn.mfma.f32.32x32x8f16(<4 x half>, <4 x half>, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.maxnum.f32(float, float) #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn memory(none)
declare i32 @llvm.amdgcn.ds.bpermute(i32, i32) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.exp2.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x float> @llvm.exp2.v4f32(<4 x float>) #5

attributes #0 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { convergent mustprogress nocallback nofree nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.dbg.cu = !{!4}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{i32 8, !"PIC Level", i32 0}
!4 = distinct !DICompileUnit(language: DW_LANG_C, file: !5, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!5 = !DIFile(filename: "test_flashattention.py", directory: "/triton/python/test/unit/hopper")
!6 = distinct !DISubprogram(name: "_fwd_kernel", linkageName: "_fwd_kernel", scope: !5, file: !5, line: 37, type: !7, scopeLine: 37, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !4)
!7 = !DISubroutineType(cc: DW_CC_normal, types: !8)
!8 = !{}
!9 = !DILocation(line: 46, column: 28, scope: !6)
!10 = !DILocation(line: 47, column: 27, scope: !6)
!11 = !DILocation(line: 51, column: 23, scope: !6)
!12 = !DILocation(line: 51, column: 46, scope: !6)
!13 = !DILocation(line: 51, column: 33, scope: !6)
!14 = !DILocation(line: 58, column: 32, scope: !6)
!15 = !DILocation(line: 64, column: 26, scope: !6)
!16 = !DILocation(line: 64, column: 41, scope: !6)
!17 = !DILocation(line: 66, column: 8, scope: !6)
!18 = !DILocation(line: 74, column: 8, scope: !6)
!19 = !DILocation(line: 82, column: 8, scope: !6)
!20 = !DILocation(line: 90, column: 8, scope: !6)
!21 = !DILocation(line: 93, column: 16, scope: !6)
!22 = !DILocation(line: 96, column: 44, scope: !6)
!23 = !DILocation(line: 96, column: 53, scope: !6)
!24 = !DILocation(line: 102, column: 42, scope: !6)
!25 = !DILocation(line: 101, column: 14, scope: !6)
!26 = !DILocation(line: 102, column: 52, scope: !6)
!27 = !DILocation(line: 98, column: 20, scope: !6)
!28 = !DILocation(line: 100, column: 33, scope: !6)
!29 = !DILocation(line: 100, column: 24, scope: !6)
!30 = !DILocation(line: 102, column: 74, scope: !6)
!31 = !DILocation(line: 163, column: 27, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/triton/python/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !6, file: !33, discriminator: 0)
!35 = !DILocation(line: 104, column: 39, scope: !6)
!36 = !DILocation(line: 184, column: 40, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 104, column: 43, scope: !6)
!38 = !DILocation(line: 106, column: 34, scope: !6)
!39 = !DILocation(line: 106, column: 25, scope: !6)
!40 = !DILocation(line: 106, column: 18, scope: !6)
!41 = !DILocation(line: 108, column: 24, scope: !6)
!42 = !DILocation(line: 108, column: 19, scope: !6)
!43 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 109, column: 27, scope: !6)
!45 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !44)
!46 = !DILocation(line: 109, column: 32, scope: !6)
!47 = !DILocation(line: 111, column: 21, scope: !6)
!48 = !DILocation(line: 112, column: 13, scope: !6)
!49 = !DILocation(line: 113, column: 25, scope: !6)
!50 = !DILocation(line: 113, column: 15, scope: !6)
!51 = !DILocation(line: 115, column: 17, scope: !6)
!52 = !DILocation(line: 116, column: 20, scope: !6)
!53 = !DILocation(line: 117, column: 25, scope: !6)
!54 = !DILocation(line: 123, column: 44, scope: !6)
!55 = !DILocation(line: 133, column: 17, scope: !6)
!56 = !DILocation(line: 128, column: 26, scope: !6)
!57 = !DILocation(line: 129, column: 17, scope: !6)
!58 = !DILocation(line: 129, column: 34, scope: !6)
!59 = !DILocation(line: 130, column: 21, scope: !6)
!60 = !DILocation(line: 128, column: 17, scope: !6)
!61 = !DILocation(line: 128, column: 34, scope: !6)
!62 = !DILocation(line: 131, column: 21, scope: !6)
!63 = !DILocation(line: 134, column: 27, scope: !6)
!64 = !DILocation(line: 134, column: 4, scope: !6)
