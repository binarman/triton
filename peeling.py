#!/usr/bin/env python3
import tempfile
import triton


def orig_gemm():
    ir = f"""
#blocked = #triton_gpu.blocked<{{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}}>
#blocked1 = #triton_gpu.blocked<{{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 8], order = [0, 1]}}>
#loc = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0)
#mma = #triton_gpu.amd_mfma<{{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 4], instrShape = [16, 16], isTransposed = false}}>
#shared = #triton_gpu.shared<{{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = false}}>
#shared1 = #triton_gpu.shared<{{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = false}}>
module attributes {{"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "hip:gfx90a", "triton_gpu.threads-per-warp" = 64 : i32}} {{
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg1: !tt.ptr<f16> {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg2: !tt.ptr<f16> {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg3: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg4: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg5: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg6: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg7: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg8: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg9: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0)) attributes {{noinline = false}} {{
    %cst = arith.constant dense<64> : tensor<256x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<64x256xi32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256x256xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg4, %c255_i32 : i32 loc(#loc40)
    %2 = arith.divsi %1, %c256_i32 : i32 loc(#loc41)
    %3 = arith.divsi %0, %2 : i32 loc(#loc6)
    %4 = arith.remsi %0, %2 : i32 loc(#loc7)
    %5 = arith.muli %3, %c256_i32 : i32 loc(#loc8)
    %6 = tt.make_range {{end = 256 : i32, start = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked}}>> loc(#loc9)
    %7 = tt.make_range {{end = 256 : i32, start = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #mma}}>> loc(#loc9)
    %8 = tt.make_range {{end = 256 : i32, start = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked1}}>> loc(#loc9)
    %9 = tt.make_range {{end = 256 : i32, start = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #mma}}>> loc(#loc9)
    %10 = tt.splat %5 : i32 -> tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked}}>> loc(#loc10)
    %11 = tt.splat %5 : i32 -> tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #mma}}>> loc(#loc10)
    %12 = arith.addi %10, %6 : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked}}>> loc(#loc10)
    %13 = arith.addi %11, %7 : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #mma}}>> loc(#loc10)
    %14 = arith.muli %4, %c256_i32 : i32 loc(#loc11)
    %15 = tt.splat %14 : i32 -> tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked1}}>> loc(#loc12)
    %16 = tt.splat %14 : i32 -> tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #mma}}>> loc(#loc12)
    %17 = arith.addi %15, %8 : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked1}}>> loc(#loc12)
    %18 = arith.addi %16, %9 : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #mma}}>> loc(#loc12)
    %19 = tt.expand_dims %12 {{axis = 1 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked}}>> -> tensor<256x1xi32, #blocked> loc(#loc13)
    %20 = tt.expand_dims %13 {{axis = 1 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #mma}}>> -> tensor<256x1xi32, #mma> loc(#loc13)
    %21 = tt.splat %arg6 : i32 -> tensor<256x1xi32, #blocked> loc(#loc14)
    %22 = arith.muli %19, %21 : tensor<256x1xi32, #blocked> loc(#loc14)
    %23 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #blocked> loc(#loc15)
    %24 = tt.addptr %23, %22 : tensor<256x1x!tt.ptr<f16>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc15)
    %25 = tt.make_range {{end = 64 : i32, start = 0 : i32}} : tensor<64xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked}}>> loc(#loc16)
    %26 = tt.expand_dims %25 {{axis = 0 : i32}} : tensor<64xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked}}>> -> tensor<1x64xi32, #blocked> loc(#loc16)
    %27 = tt.broadcast %24 : tensor<256x1x!tt.ptr<f16>, #blocked> -> tensor<256x64x!tt.ptr<f16>, #blocked> loc(#loc17)
    %28 = tt.broadcast %26 : tensor<1x64xi32, #blocked> -> tensor<256x64xi32, #blocked> loc(#loc17)
    %29 = tt.addptr %27, %28 : tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<256x64xi32, #blocked> loc(#loc17)
    %30 = tt.make_range {{end = 64 : i32, start = 0 : i32}} : tensor<64xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked1}}>> loc(#loc18)
    %31 = tt.expand_dims %30 {{axis = 1 : i32}} : tensor<64xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked1}}>> -> tensor<64x1xi32, #blocked1> loc(#loc18)
    %32 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked1> loc(#loc19)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f16>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc19)
    %34 = tt.expand_dims %17 {{axis = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked1}}>> -> tensor<1x256xi32, #blocked1> loc(#loc20)
    %35 = tt.expand_dims %18 {{axis = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #mma}}>> -> tensor<1x256xi32, #mma> loc(#loc20)
    %36 = tt.splat %arg7 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc21)
    %37 = arith.muli %34, %36 : tensor<1x256xi32, #blocked1> loc(#loc21)
    %38 = tt.broadcast %33 : tensor<64x1x!tt.ptr<f16>, #blocked1> -> tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc22)
    %39 = tt.broadcast %37 : tensor<1x256xi32, #blocked1> -> tensor<64x256xi32, #blocked1> loc(#loc22)
    %40 = tt.addptr %38, %39 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1> loc(#loc22)
    %41 = arith.addi %arg5, %c63_i32 : i32 loc(#loc42)
    %42 = arith.divsi %41, %c64_i32 : i32 loc(#loc43)
    %43 = tt.load %29 : tensor<256x64x!tt.ptr<f16>, #blocked> loc(#loc24)
    %44 = triton_gpu.local_alloc %43 : (tensor<256x64xf16, #blocked>) -> !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
    %45 = tt.load %40 : tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc25)
    %46 = triton_gpu.local_alloc %45 : (tensor<64x256xf16, #blocked1>) -> !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc25)
    %47 = tt.addptr %29, %cst : tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<256x64xi32, #blocked> loc(#loc26)
    %48 = tt.addptr %40, %cst_0 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1> loc(#loc27)
    %49 = arith.subi %42, %c1_i32 : i32 loc(#loc28)
    %50:3 = scf.for %arg10 = %c0_i32 to %49 step %c1_i32 iter_args(%arg11 = %cst_1, %arg12 = %47, %arg13 = %48) -> (tensor<256x256xf32, #mma>, tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<64x256x!tt.ptr<f16>, #blocked1>)  : i32 {{
      %69 = tt.load %arg12 : tensor<256x64x!tt.ptr<f16>, #blocked> loc(#loc24)
      %70 = tt.load %arg13 : tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc25)
      %71 = triton_gpu.local_load %44 : !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> tensor<256x64xf16, #triton_gpu.dot_op<{{opIdx = 0, parent = #mma, kWidth = 8}}>> loc(#loc24)
      %72 = triton_gpu.local_load %46 : !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory, mutable> -> tensor<64x256xf16, #triton_gpu.dot_op<{{opIdx = 1, parent = #mma, kWidth = 8}}>> loc(#loc25)
      %73 = tt.dot %71, %72, %arg11 : tensor<256x64xf16, #triton_gpu.dot_op<{{opIdx = 0, parent = #mma, kWidth = 8}}>> * tensor<64x256xf16, #triton_gpu.dot_op<{{opIdx = 1, parent = #mma, kWidth = 8}}>> -> tensor<256x256xf32, #mma> loc(#loc29)
      %74 = tt.addptr %arg12, %cst : tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<256x64xi32, #blocked> loc(#loc26)
      %75 = tt.addptr %arg13, %cst_0 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1> loc(#loc27)
      triton_gpu.local_store %69, %44 : tensor<256x64xf16, #blocked> -> !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
      triton_gpu.local_store %70, %46 : tensor<64x256xf16, #blocked1> -> !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc25)
      scf.yield %73, %74, %75 : tensor<256x256xf32, #mma>, tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc30)
    }} loc(#loc28)
    %51 = triton_gpu.local_load %44 : !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> tensor<256x64xf16, #triton_gpu.dot_op<{{opIdx = 0, parent = #mma, kWidth = 8}}>> loc(#loc24)
    %52 = triton_gpu.local_load %46 : !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory, mutable> -> tensor<64x256xf16, #triton_gpu.dot_op<{{opIdx = 1, parent = #mma, kWidth = 8}}>> loc(#loc25)
    %53 = tt.dot %51, %52, %50#0 : tensor<256x64xf16, #triton_gpu.dot_op<{{opIdx = 0, parent = #mma, kWidth = 8}}>> * tensor<64x256xf16, #triton_gpu.dot_op<{{opIdx = 1, parent = #mma, kWidth = 8}}>> -> tensor<256x256xf32, #mma> loc(#loc29)
    %54 = arith.truncf %53 : tensor<256x256xf32, #mma> to tensor<256x256xf16, #mma> loc(#loc31)
    %55 = tt.splat %arg8 : i32 -> tensor<256x1xi32, #mma> loc(#loc32)
    %56 = arith.muli %55, %20 : tensor<256x1xi32, #mma> loc(#loc32)
    %57 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #mma> loc(#loc33)
    %58 = tt.addptr %57, %56 : tensor<256x1x!tt.ptr<f16>, #mma>, tensor<256x1xi32, #mma> loc(#loc33)
    %59 = tt.broadcast %58 : tensor<256x1x!tt.ptr<f16>, #mma> -> tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc34)
    %60 = tt.broadcast %35 : tensor<1x256xi32, #mma> -> tensor<256x256xi32, #mma> loc(#loc34)
    %61 = tt.addptr %59, %60 : tensor<256x256x!tt.ptr<f16>, #mma>, tensor<256x256xi32, #mma> loc(#loc34)
    %62 = tt.splat %arg3 : i32 -> tensor<256x1xi32, #mma> loc(#loc35)
    %63 = arith.cmpi slt, %20, %62 : tensor<256x1xi32, #mma> loc(#loc35)
    %64 = tt.splat %arg4 : i32 -> tensor<1x256xi32, #mma> loc(#loc36)
    %65 = arith.cmpi slt, %35, %64 : tensor<1x256xi32, #mma> loc(#loc36)
    %66 = tt.broadcast %63 : tensor<256x1xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc37)
    %67 = tt.broadcast %65 : tensor<1x256xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc37)
    %68 = arith.andi %66, %67 : tensor<256x256xi1, #mma> loc(#loc37)
    tt.store %61, %54, %68 : tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc38)
    tt.return loc(#loc39)
  }} loc(#loc)
}} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":17:24)
#loc3 = loc("/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":20:27)
#loc5 = loc("/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":22:23)
#loc7 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":23:22)
#loc8 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":35:23)
#loc9 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":35:51)
#loc10 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":35:38)
#loc11 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":36:23)
#loc12 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":36:38)
#loc13 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":37:29)
#loc14 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":37:40)
#loc15 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":37:21)
#loc16 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":37:59)
#loc17 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":37:52)
#loc18 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":38:28)
#loc19 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":38:21)
#loc20 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":38:59)
#loc21 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":38:70)
#loc22 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":38:51)
#loc23 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":44:33)
#loc24 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":46:24)
#loc25 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":47:24)
#loc26 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":52:18)
#loc27 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":53:18)
#loc28 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":44:22)
#loc29 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":51:33)
#loc30 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":53:8)
#loc31 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":54:23)
#loc32 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":59:33)
#loc33 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":59:21)
#loc34 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":59:52)
#loc35 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":60:33)
#loc36 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":60:58)
#loc37 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":60:39)
#loc38 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":62:25)
#loc39 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":61:4)
#loc40 = loc(callsite(#loc3 at #loc4))
#loc41 = loc(callsite(#loc5 at #loc4))
#loc42 = loc(callsite(#loc3 at #loc23))
#loc43 = loc(callsite(#loc5 at #loc23))
    """
    with tempfile.NamedTemporaryFile(mode='w', suffix='.ttgir') as f:
        f.write(ir)
        f.flush()
        kernel = triton.compile(f.name)

    print(kernel.asm["amdgcn"])


def first_iter_peeling():
    ir = f"""
#blocked = #triton_gpu.blocked<{{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}}>
#blocked1 = #triton_gpu.blocked<{{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 8], order = [0, 1]}}>
#loc = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0)
#mma = #triton_gpu.amd_mfma<{{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 4], instrShape = [16, 16], isTransposed = false}}>
#shared = #triton_gpu.shared<{{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = false}}>
#shared1 = #triton_gpu.shared<{{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = false}}>
module attributes {{"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "hip:gfx90a", "triton_gpu.threads-per-warp" = 64 : i32}} {{
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg1: !tt.ptr<f16> {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg2: !tt.ptr<f16> {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg3: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg4: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg5: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg6: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg7: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg8: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0), %arg9: i32 {{tt.divisibility = 16 : i32}} loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":6:0)) attributes {{noinline = false}} {{
    %cst = arith.constant dense<64> : tensor<256x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<64x256xi32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256x256xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg4, %c255_i32 : i32 loc(#loc40)
    %2 = arith.divsi %1, %c256_i32 : i32 loc(#loc41)
    %3 = arith.divsi %0, %2 : i32 loc(#loc6)
    %4 = arith.remsi %0, %2 : i32 loc(#loc7)
    %5 = arith.muli %3, %c256_i32 : i32 loc(#loc8)
    %6 = tt.make_range {{end = 256 : i32, start = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked}}>> loc(#loc9)
    %7 = tt.make_range {{end = 256 : i32, start = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #mma}}>> loc(#loc9)
    %8 = tt.make_range {{end = 256 : i32, start = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked1}}>> loc(#loc9)
    %9 = tt.make_range {{end = 256 : i32, start = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #mma}}>> loc(#loc9)
    %10 = tt.splat %5 : i32 -> tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked}}>> loc(#loc10)
    %11 = tt.splat %5 : i32 -> tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #mma}}>> loc(#loc10)
    %12 = arith.addi %10, %6 : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked}}>> loc(#loc10)
    %13 = arith.addi %11, %7 : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #mma}}>> loc(#loc10)
    %14 = arith.muli %4, %c256_i32 : i32 loc(#loc11)
    %15 = tt.splat %14 : i32 -> tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked1}}>> loc(#loc12)
    %16 = tt.splat %14 : i32 -> tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #mma}}>> loc(#loc12)
    %17 = arith.addi %15, %8 : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked1}}>> loc(#loc12)
    %18 = arith.addi %16, %9 : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #mma}}>> loc(#loc12)
    %19 = tt.expand_dims %12 {{axis = 1 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked}}>> -> tensor<256x1xi32, #blocked> loc(#loc13)
    %20 = tt.expand_dims %13 {{axis = 1 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 1, parent = #mma}}>> -> tensor<256x1xi32, #mma> loc(#loc13)
    %21 = tt.splat %arg6 : i32 -> tensor<256x1xi32, #blocked> loc(#loc14)
    %22 = arith.muli %19, %21 : tensor<256x1xi32, #blocked> loc(#loc14)
    %23 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #blocked> loc(#loc15)
    %24 = tt.addptr %23, %22 : tensor<256x1x!tt.ptr<f16>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc15)
    %25 = tt.make_range {{end = 64 : i32, start = 0 : i32}} : tensor<64xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked}}>> loc(#loc16)
    %26 = tt.expand_dims %25 {{axis = 0 : i32}} : tensor<64xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked}}>> -> tensor<1x64xi32, #blocked> loc(#loc16)
    %27 = tt.broadcast %24 : tensor<256x1x!tt.ptr<f16>, #blocked> -> tensor<256x64x!tt.ptr<f16>, #blocked> loc(#loc17)
    %28 = tt.broadcast %26 : tensor<1x64xi32, #blocked> -> tensor<256x64xi32, #blocked> loc(#loc17)
    %29 = tt.addptr %27, %28 : tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<256x64xi32, #blocked> loc(#loc17)
    %30 = tt.make_range {{end = 64 : i32, start = 0 : i32}} : tensor<64xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked1}}>> loc(#loc18)
    %31 = tt.expand_dims %30 {{axis = 1 : i32}} : tensor<64xi32, #triton_gpu.slice<{{dim = 1, parent = #blocked1}}>> -> tensor<64x1xi32, #blocked1> loc(#loc18)
    %32 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked1> loc(#loc19)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f16>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc19)
    %34 = tt.expand_dims %17 {{axis = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #blocked1}}>> -> tensor<1x256xi32, #blocked1> loc(#loc20)
    %35 = tt.expand_dims %18 {{axis = 0 : i32}} : tensor<256xi32, #triton_gpu.slice<{{dim = 0, parent = #mma}}>> -> tensor<1x256xi32, #mma> loc(#loc20)
    %36 = tt.splat %arg7 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc21)
    %37 = arith.muli %34, %36 : tensor<1x256xi32, #blocked1> loc(#loc21)
    %38 = tt.broadcast %33 : tensor<64x1x!tt.ptr<f16>, #blocked1> -> tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc22)
    %39 = tt.broadcast %37 : tensor<1x256xi32, #blocked1> -> tensor<64x256xi32, #blocked1> loc(#loc22)
    %40 = tt.addptr %38, %39 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1> loc(#loc22)
    %41 = arith.addi %arg5, %c63_i32 : i32 loc(#loc42)
    %42 = arith.divsi %41, %c64_i32 : i32 loc(#loc43)
    %43 = tt.load %29 : tensor<256x64x!tt.ptr<f16>, #blocked> loc(#loc24)
    %44 = triton_gpu.local_alloc %43 : (tensor<256x64xf16, #blocked>) -> !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
    %45 = tt.load %40 : tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc25)
    %46 = triton_gpu.local_alloc %45 : (tensor<64x256xf16, #blocked1>) -> !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc25)
    %47 = tt.addptr %29, %cst : tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<256x64xi32, #blocked> loc(#loc26)
    %48 = tt.addptr %40, %cst_0 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1> loc(#loc27)
    %49 = arith.subi %42, %c1_i32 : i32 loc(#loc28)

    %p69 = tt.load %47 : tensor<256x64x!tt.ptr<f16>, #blocked> loc(#loc24)
    %p70 = tt.load %48 : tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc25)
    %p71 = triton_gpu.local_load %44 : !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> tensor<256x64xf16, #triton_gpu.dot_op<{{opIdx = 0, parent = #mma, kWidth = 8}}>> loc(#loc24)
    %p72 = triton_gpu.local_load %46 : !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory, mutable> -> tensor<64x256xf16, #triton_gpu.dot_op<{{opIdx = 1, parent = #mma, kWidth = 8}}>> loc(#loc25)
    %p73 = tt.dot %p71, %p72, %cst_1 : tensor<256x64xf16, #triton_gpu.dot_op<{{opIdx = 0, parent = #mma, kWidth = 8}}>> * tensor<64x256xf16, #triton_gpu.dot_op<{{opIdx = 1, parent = #mma, kWidth = 8}}>> -> tensor<256x256xf32, #mma> loc(#loc29)
    %p74 = tt.addptr %47, %cst : tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<256x64xi32, #blocked> loc(#loc26)
    %p75 = tt.addptr %48, %cst_0 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1> loc(#loc27)
    triton_gpu.local_store %p69, %44 : tensor<256x64xf16, #blocked> -> !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
    triton_gpu.local_store %p70, %46 : tensor<64x256xf16, #blocked1> -> !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc25)

    %50:3 = scf.for %arg10 = %c1_i32 to %49 step %c1_i32 iter_args(%arg11 = %p73, %arg12 = %p74, %arg13 = %p75) -> (tensor<256x256xf32, #mma>, tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<64x256x!tt.ptr<f16>, #blocked1>)  : i32 {{
      %69 = tt.load %arg12 : tensor<256x64x!tt.ptr<f16>, #blocked> loc(#loc24)
      %70 = tt.load %arg13 : tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc25)
      %71 = triton_gpu.local_load %44 : !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> tensor<256x64xf16, #triton_gpu.dot_op<{{opIdx = 0, parent = #mma, kWidth = 8}}>> loc(#loc24)
      %72 = triton_gpu.local_load %46 : !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory, mutable> -> tensor<64x256xf16, #triton_gpu.dot_op<{{opIdx = 1, parent = #mma, kWidth = 8}}>> loc(#loc25)
      %73 = tt.dot %71, %72, %arg11 : tensor<256x64xf16, #triton_gpu.dot_op<{{opIdx = 0, parent = #mma, kWidth = 8}}>> * tensor<64x256xf16, #triton_gpu.dot_op<{{opIdx = 1, parent = #mma, kWidth = 8}}>> -> tensor<256x256xf32, #mma> loc(#loc29)
      %74 = tt.addptr %arg12, %cst : tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<256x64xi32, #blocked> loc(#loc26)
      %75 = tt.addptr %arg13, %cst_0 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1> loc(#loc27)
      triton_gpu.local_store %69, %44 : tensor<256x64xf16, #blocked> -> !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory, mutable> loc(#loc24)
      triton_gpu.local_store %70, %46 : tensor<64x256xf16, #blocked1> -> !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc25)
      scf.yield %73, %74, %75 : tensor<256x256xf32, #mma>, tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc30)
    }} loc(#loc28)
    %51 = triton_gpu.local_load %44 : !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory, mutable> -> tensor<256x64xf16, #triton_gpu.dot_op<{{opIdx = 0, parent = #mma, kWidth = 8}}>> loc(#loc24)
    %52 = triton_gpu.local_load %46 : !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory, mutable> -> tensor<64x256xf16, #triton_gpu.dot_op<{{opIdx = 1, parent = #mma, kWidth = 8}}>> loc(#loc25)
    %53 = tt.dot %51, %52, %50#0 : tensor<256x64xf16, #triton_gpu.dot_op<{{opIdx = 0, parent = #mma, kWidth = 8}}>> * tensor<64x256xf16, #triton_gpu.dot_op<{{opIdx = 1, parent = #mma, kWidth = 8}}>> -> tensor<256x256xf32, #mma> loc(#loc29)
    %54 = arith.truncf %53 : tensor<256x256xf32, #mma> to tensor<256x256xf16, #mma> loc(#loc31)
    %55 = tt.splat %arg8 : i32 -> tensor<256x1xi32, #mma> loc(#loc32)
    %56 = arith.muli %55, %20 : tensor<256x1xi32, #mma> loc(#loc32)
    %57 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #mma> loc(#loc33)
    %58 = tt.addptr %57, %56 : tensor<256x1x!tt.ptr<f16>, #mma>, tensor<256x1xi32, #mma> loc(#loc33)
    %59 = tt.broadcast %58 : tensor<256x1x!tt.ptr<f16>, #mma> -> tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc34)
    %60 = tt.broadcast %35 : tensor<1x256xi32, #mma> -> tensor<256x256xi32, #mma> loc(#loc34)
    %61 = tt.addptr %59, %60 : tensor<256x256x!tt.ptr<f16>, #mma>, tensor<256x256xi32, #mma> loc(#loc34)
    %62 = tt.splat %arg3 : i32 -> tensor<256x1xi32, #mma> loc(#loc35)
    %63 = arith.cmpi slt, %20, %62 : tensor<256x1xi32, #mma> loc(#loc35)
    %64 = tt.splat %arg4 : i32 -> tensor<1x256xi32, #mma> loc(#loc36)
    %65 = arith.cmpi slt, %35, %64 : tensor<1x256xi32, #mma> loc(#loc36)
    %66 = tt.broadcast %63 : tensor<256x1xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc37)
    %67 = tt.broadcast %65 : tensor<1x256xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc37)
    %68 = arith.andi %66, %67 : tensor<256x256xi1, #mma> loc(#loc37)
    tt.store %61, %54, %68 : tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc38)
    tt.return loc(#loc39)
  }} loc(#loc)
}} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":17:24)
#loc3 = loc("/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":20:27)
#loc5 = loc("/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":22:23)
#loc7 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":23:22)
#loc8 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":35:23)
#loc9 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":35:51)
#loc10 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":35:38)
#loc11 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":36:23)
#loc12 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":36:38)
#loc13 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":37:29)
#loc14 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":37:40)
#loc15 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":37:21)
#loc16 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":37:59)
#loc17 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":37:52)
#loc18 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":38:28)
#loc19 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":38:21)
#loc20 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":38:59)
#loc21 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":38:70)
#loc22 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":38:51)
#loc23 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":44:33)
#loc24 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":46:24)
#loc25 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":47:24)
#loc26 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":52:18)
#loc27 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":53:18)
#loc28 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":44:22)
#loc29 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":51:33)
#loc30 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":53:8)
#loc31 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":54:23)
#loc32 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":59:33)
#loc33 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":59:21)
#loc34 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":59:52)
#loc35 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":60:33)
#loc36 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":60:58)
#loc37 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":60:39)
#loc38 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":62:25)
#loc39 = loc("/triton_rocm/scripts/amd/gemm/matmul_kernel.py":61:4)
#loc40 = loc(callsite(#loc3 at #loc4))
#loc41 = loc(callsite(#loc5 at #loc4))
#loc42 = loc(callsite(#loc3 at #loc23))
#loc43 = loc(callsite(#loc5 at #loc23))
    """
    with tempfile.NamedTemporaryFile(mode='w', suffix='.ttgir') as f:
        f.write(ir)
        f.flush()
        kernel = triton.compile(f.name)

    print(kernel.asm["amdgcn"])


if __name__ == "__main__":
    orig_gemm()
    first_iter_peeling()
