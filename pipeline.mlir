// -----// IR Dump Before TritonAMDGPUStreamPipelineV2 (tritonamdgpu-stream-pipeline-v2) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 16], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 64], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 16], threadsPerWarp = [4, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("/triton/python/test/unit/language/test_core.py":5231:0)
#mma = #triton_gpu.amd_mfma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 4], instrShape = [32, 32], isTransposed = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "hip:gfx90a", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core.py":5231:0), %arg1: !tt.ptr<f8E5M2> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core.py":5231:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core.py":5231:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core.py":5231:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core.py":5231:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core.py":5231:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core.py":5231:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core.py":5231:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core.py":5231:0)) attributes {noinline = false} {
    %cst = arith.constant dense<128> : tensor<128x128xi32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c127_i32 = arith.constant 127 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x256xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c127_i32 : i32 loc(#loc42)
    %2 = arith.divsi %1, %c128_i32 : i32 loc(#loc43)
    %3 = arith.remsi %0, %2 : i32 loc(#loc6)
    %4 = arith.divsi %0, %2 : i32 loc(#loc7)
    %5 = arith.muli %3, %c128_i32 : i32 loc(#loc8)
    %6 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %7 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc9)
    %8 = tt.splat %5 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %9 = tt.splat %5 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc10)
    %10 = arith.addi %8, %6 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc10)
    %11 = arith.addi %9, %7 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc10)
    %12 = tt.splat %arg3 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %13 = arith.remsi %10, %12 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc11)
    %14 = arith.muli %4, %c256_i32 : i32 loc(#loc12)
    %15 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc13)
    %16 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc13)
    %17 = tt.splat %14 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc14)
    %18 = tt.splat %14 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc14)
    %19 = arith.addi %17, %15 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc14)
    %20 = arith.addi %18, %16 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc14)
    %21 = tt.splat %arg4 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc15)
    %22 = arith.remsi %19, %21 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc15)
    %23 = tt.expand_dims %13 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc16)
    %24 = tt.splat %arg6 : i32 -> tensor<128x1xi32, #blocked> loc(#loc17)
    %25 = arith.muli %23, %24 : tensor<128x1xi32, #blocked> loc(#loc17)
    %26 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %27 = tt.expand_dims %26 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc18)
    %28 = tt.broadcast %25 : tensor<128x1xi32, #blocked> -> tensor<128x128xi32, #blocked> loc(#loc19)
    %29 = tt.broadcast %27 : tensor<1x128xi32, #blocked> -> tensor<128x128xi32, #blocked> loc(#loc19)
    %30 = arith.addi %28, %29 : tensor<128x128xi32, #blocked> loc(#loc19)
    %31 = tt.splat %arg0 : !tt.ptr<f8E5M2> -> tensor<128x128x!tt.ptr<f8E5M2>, #blocked> loc(#loc20)
    %32 = tt.addptr %31, %30 : tensor<128x128x!tt.ptr<f8E5M2>, #blocked>, tensor<128x128xi32, #blocked> loc(#loc20)
    %33 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc21)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc21)
    %35 = tt.splat %arg7 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc22)
    %36 = arith.muli %34, %35 : tensor<128x1xi32, #blocked2> loc(#loc22)
    %37 = tt.expand_dims %22 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x256xi32, #blocked2> loc(#loc23)
    %38 = tt.broadcast %36 : tensor<128x1xi32, #blocked2> -> tensor<128x256xi32, #blocked2> loc(#loc24)
    %39 = tt.broadcast %37 : tensor<1x256xi32, #blocked2> -> tensor<128x256xi32, #blocked2> loc(#loc24)
    %40 = arith.addi %38, %39 : tensor<128x256xi32, #blocked2> loc(#loc24)
    %41 = tt.splat %arg1 : !tt.ptr<f8E5M2> -> tensor<128x256x!tt.ptr<f8E5M2>, #blocked2> loc(#loc25)
    %42 = tt.addptr %41, %40 : tensor<128x256x!tt.ptr<f8E5M2>, #blocked2>, tensor<128x256xi32, #blocked2> loc(#loc25)
    %43 = arith.addi %arg5, %c127_i32 : i32 loc(#loc44)
    %44 = arith.divsi %43, %c128_i32 : i32 loc(#loc45)
    %45 = arith.muli %arg7, %c128_i32 : i32 loc(#loc27)
    %46 = tt.splat %45 : i32 -> tensor<128x256xi32, #blocked2> loc(#loc28)
    %47:3 = scf.for %arg9 = %c0_i32 to %44 step %c1_i32 iter_args(%arg10 = %cst_0, %arg11 = %32, %arg12 = %42) -> (tensor<128x256xf32, #mma>, tensor<128x128x!tt.ptr<f8E5M2>, #blocked>, tensor<128x256x!tt.ptr<f8E5M2>, #blocked2>)  : i32 {
      %58 = tt.load %arg11 : tensor<128x128x!tt.ptr<f8E5M2>, #blocked> loc(#loc30)
      %59 = tt.load %arg12 : tensor<128x256x!tt.ptr<f8E5M2>, #blocked2> loc(#loc31)
      %60 = triton_gpu.convert_layout %58 : tensor<128x128xf8E5M2, #blocked> -> tensor<128x128xf8E5M2, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc30)
      %61 = tt.fp_to_fp %60 : tensor<128x128xf8E5M2, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc30)
      %62 = triton_gpu.convert_layout %59 : tensor<128x256xf8E5M2, #blocked2> -> tensor<128x256xf8E5M2, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc31)
      %63 = tt.fp_to_fp %62 : tensor<128x256xf8E5M2, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x256xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc31)
      %64 = tt.dot %61, %63, %arg10 : tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<128x256xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<128x256xf32, #mma> loc(#loc32)
      %65 = tt.addptr %arg11, %cst : tensor<128x128x!tt.ptr<f8E5M2>, #blocked>, tensor<128x128xi32, #blocked> loc(#loc33)
      %66 = tt.addptr %arg12, %46 : tensor<128x256x!tt.ptr<f8E5M2>, #blocked2>, tensor<128x256xi32, #blocked2> loc(#loc28)
      scf.yield %64, %65, %66 : tensor<128x256xf32, #mma>, tensor<128x128x!tt.ptr<f8E5M2>, #blocked>, tensor<128x256x!tt.ptr<f8E5M2>, #blocked2> loc(#loc34)
    } {tt.num_stages = 3 : i32} loc(#loc29)
    %48 = tt.expand_dims %11 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc35)
    %49 = tt.splat %arg8 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc36)
    %50 = arith.muli %49, %48 : tensor<128x1xi32, #blocked1> loc(#loc36)
    %51 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked1> loc(#loc37)
    %52 = tt.addptr %51, %50 : tensor<128x1x!tt.ptr<f32>, #blocked1>, tensor<128x1xi32, #blocked1> loc(#loc37)
    %53 = tt.expand_dims %20 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc38)
    %54 = tt.broadcast %52 : tensor<128x1x!tt.ptr<f32>, #blocked1> -> tensor<128x256x!tt.ptr<f32>, #blocked1> loc(#loc39)
    %55 = tt.broadcast %53 : tensor<1x256xi32, #blocked1> -> tensor<128x256xi32, #blocked1> loc(#loc39)
    %56 = tt.addptr %54, %55 : tensor<128x256x!tt.ptr<f32>, #blocked1>, tensor<128x256xi32, #blocked1> loc(#loc39)
    %57 = triton_gpu.convert_layout %56 : tensor<128x256x!tt.ptr<f32>, #blocked1> -> tensor<128x256x!tt.ptr<f32>, #mma> loc(#loc39)
    tt.store %57, %47#0 : tensor<128x256x!tt.ptr<f32>, #mma> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/triton/python/test/unit/language/test_core.py":5241:24)
#loc3 = loc("/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/triton/python/test/unit/language/test_core.py":5242:27)
#loc5 = loc("/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/triton/python/test/unit/language/test_core.py":5243:18)
#loc7 = loc("/triton/python/test/unit/language/test_core.py":5244:19)
#loc8 = loc("/triton/python/test/unit/language/test_core.py":5245:23)
#loc9 = loc("/triton/python/test/unit/language/test_core.py":5245:51)
#loc10 = loc("/triton/python/test/unit/language/test_core.py":5245:38)
#loc11 = loc("/triton/python/test/unit/language/test_core.py":5245:68)
#loc12 = loc("/triton/python/test/unit/language/test_core.py":5246:23)
#loc13 = loc("/triton/python/test/unit/language/test_core.py":5246:51)
#loc14 = loc("/triton/python/test/unit/language/test_core.py":5246:38)
#loc15 = loc("/triton/python/test/unit/language/test_core.py":5246:68)
#loc16 = loc("/triton/python/test/unit/language/test_core.py":5248:30)
#loc17 = loc("/triton/python/test/unit/language/test_core.py":5248:41)
#loc18 = loc("/triton/python/test/unit/language/test_core.py":5248:60)
#loc19 = loc("/triton/python/test/unit/language/test_core.py":5248:53)
#loc20 = loc("/triton/python/test/unit/language/test_core.py":5248:22)
#loc21 = loc("/triton/python/test/unit/language/test_core.py":5249:29)
#loc22 = loc("/triton/python/test/unit/language/test_core.py":5249:40)
#loc23 = loc("/triton/python/test/unit/language/test_core.py":5249:60)
#loc24 = loc("/triton/python/test/unit/language/test_core.py":5249:52)
#loc25 = loc("/triton/python/test/unit/language/test_core.py":5249:22)
#loc26 = loc("/triton/python/test/unit/language/test_core.py":5251:36)
#loc27 = loc("/triton/python/test/unit/language/test_core.py":5256:33)
#loc28 = loc("/triton/python/test/unit/language/test_core.py":5256:18)
#loc29 = loc("/triton/python/test/unit/language/test_core.py":5251:51)
#loc30 = loc("/triton/python/test/unit/language/test_core.py":5252:20)
#loc31 = loc("/triton/python/test/unit/language/test_core.py":5253:20)
#loc32 = loc("/triton/python/test/unit/language/test_core.py":5254:32)
#loc33 = loc("/triton/python/test/unit/language/test_core.py":5255:18)
#loc34 = loc("/triton/python/test/unit/language/test_core.py":5256:8)
#loc35 = loc("/triton/python/test/unit/language/test_core.py":5259:41)
#loc36 = loc("/triton/python/test/unit/language/test_core.py":5259:33)
#loc37 = loc("/triton/python/test/unit/language/test_core.py":5259:21)
#loc38 = loc("/triton/python/test/unit/language/test_core.py":5259:72)
#loc39 = loc("/triton/python/test/unit/language/test_core.py":5259:52)
#loc40 = loc("/triton/python/test/unit/language/test_core.py":5260:21)
#loc41 = loc("/triton/python/test/unit/language/test_core.py":5260:4)
#loc42 = loc(callsite(#loc3 at #loc4))
#loc43 = loc(callsite(#loc5 at #loc4))
#loc44 = loc(callsite(#loc3 at #loc26))
#loc45 = loc(callsite(#loc5 at #loc26))
