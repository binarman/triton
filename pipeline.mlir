// -----// IR Dump Before TritonAMDGPUStreamPipeline (tritonamdgpu-stream-pipeline) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [4, 1, 16], warpsPerCTA = [4, 1, 1], order = [2, 1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1, 8], threadsPerWarp = [16, 1, 4], warpsPerCTA = [4, 1, 1], order = [2, 0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [1, 16, 4], warpsPerCTA = [1, 4, 1], order = [2, 1, 0]}>
#blocked5 = #triton_gpu.blocked<{sizePerThread = [1, 1, 2], threadsPerWarp = [16, 1, 4], warpsPerCTA = [4, 1, 1], order = [2, 0, 1]}>
#loc = loc("/triton/./test_kernel.py":65:0)
#loc1 = loc(unknown)
#loc28 = loc("/triton/./test_kernel.py":90:17)
#loc37 = loc(callsite(#loc1 at #loc28))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "hip:gfx90a", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_explicit_dot3d_2(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/./test_kernel.py":65:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/./test_kernel.py":65:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/./test_kernel.py":65:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/triton/./test_kernel.py":65:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/triton/./test_kernel.py":65:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/triton/./test_kernel.py":65:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/triton/./test_kernel.py":65:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x1x32xf32, #blocked> loc(#loc1)
    %c511_i32 = arith.constant 511 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<512> : tensor<64x1x1xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<64x1x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<512> : tensor<1x512xi32, #blocked2> loc(#loc1)
    %0 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x512xi32, #blocked2> loc(#loc2)
    %2 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<1x512x!tt.ptr<f16>, #blocked2> loc(#loc3)
    %3 = tt.addptr %2, %1 : tensor<1x512x!tt.ptr<f16>, #blocked2>, tensor<1x512xi32, #blocked2> loc(#loc3)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #triton_gpu.slice<{dim = 2, parent = #blocked1}>}>> loc(#loc4)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #triton_gpu.slice<{dim = 2, parent = #blocked1}>}>> -> tensor<64x1xi32, #triton_gpu.slice<{dim = 2, parent = #blocked1}>> loc(#loc4)
    %6 = tt.expand_dims %5 {axis = 2 : i32} : tensor<64x1xi32, #triton_gpu.slice<{dim = 2, parent = #blocked1}>> -> tensor<64x1x1xi32, #blocked1> loc(#loc4)
    %7 = arith.muli %6, %cst_0 : tensor<64x1x1xi32, #blocked1> loc(#loc5)
    %8 = arith.divsi %7, %cst_1 : tensor<64x1x1xi32, #blocked1> loc(#loc6)
    %9 = tt.splat %arg4 : i32 -> tensor<64x1x1xi32, #blocked1> loc(#loc7)
    %10 = arith.muli %8, %9 : tensor<64x1x1xi32, #blocked1> loc(#loc7)
    %11 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked1}>}>> loc(#loc8)
    %12 = tt.expand_dims %11 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked1}>}>> -> tensor<1x8xi32, #triton_gpu.slice<{dim = 2, parent = #blocked1}>> loc(#loc8)
    %13 = tt.expand_dims %12 {axis = 2 : i32} : tensor<1x8xi32, #triton_gpu.slice<{dim = 2, parent = #blocked1}>> -> tensor<1x8x1xi32, #blocked1> loc(#loc8)
    %14 = tt.splat %arg4 : i32 -> tensor<1x8x1xi32, #blocked1> loc(#loc9)
    %15 = arith.muli %13, %14 : tensor<1x8x1xi32, #blocked1> loc(#loc9)
    %16 = tt.broadcast %10 : tensor<64x1x1xi32, #blocked1> -> tensor<64x8x1xi32, #blocked1> loc(#loc10)
    %17 = tt.broadcast %15 : tensor<1x8x1xi32, #blocked1> -> tensor<64x8x1xi32, #blocked1> loc(#loc10)
    %18 = arith.addi %16, %17 : tensor<64x8x1xi32, #blocked1> loc(#loc10)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> loc(#loc11)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 1, parent = #blocked1}>}>> loc(#loc11)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x32xi32, #blocked3> loc(#loc11)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 1, parent = #blocked1}>}>> -> tensor<1x32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc11)
    %23 = tt.expand_dims %22 {axis = 1 : i32} : tensor<1x32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1x32xi32, #blocked1> loc(#loc11)
    %24 = tt.broadcast %18 : tensor<64x8x1xi32, #blocked1> -> tensor<64x8x32xi32, #blocked1> loc(#loc12)
    %25 = tt.broadcast %23 : tensor<1x1x32xi32, #blocked1> -> tensor<64x8x32xi32, #blocked1> loc(#loc12)
    %26 = arith.addi %24, %25 : tensor<64x8x32xi32, #blocked1> loc(#loc12)
    %27 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x8x32x!tt.ptr<f16>, #blocked1> loc(#loc13)
    %28 = tt.addptr %27, %26 : tensor<64x8x32x!tt.ptr<f16>, #blocked1>, tensor<64x8x32xi32, #blocked1> loc(#loc13)
    %29 = arith.addi %arg6, %c511_i32 : i32 loc(#loc34)
    %30 = arith.divsi %29, %c512_i32 : i32 loc(#loc35)
    %31 = arith.muli %arg4, %c512_i32 : i32 loc(#loc17)
    %32 = tt.splat %31 : i32 -> tensor<64x8x32xi32, #blocked1> loc(#loc18)
    %33:3 = scf.for %arg7 = %c0_i32 to %30 step %c1_i32 iter_args(%arg8 = %cst, %arg9 = %3, %arg10 = %28) -> (tensor<64x1x32xf32, #blocked>, tensor<1x512x!tt.ptr<f16>, #blocked2>, tensor<64x8x32x!tt.ptr<f16>, #blocked1>)  : i32 {
      %39 = tt.load %arg9 : tensor<1x512x!tt.ptr<f16>, #blocked2> loc(#loc20)
      %40 = tt.load %arg10 : tensor<64x8x32x!tt.ptr<f16>, #blocked1> loc(#loc21)
      %41 = tt.reshape %39 {allow_reorder = false} : tensor<1x512xf16, #blocked2> -> tensor<1x64x8xf16, #blocked4> loc(#loc22)
      %42 = tt.trans %41 {order = array<i32: 1, 0, 2>} : tensor<1x64x8xf16, #blocked4> -> tensor<64x1x8xf16, #blocked5> loc(#loc23)
      %43 = triton_gpu.convert_layout %42 : tensor<64x1x8xf16, #blocked5> -> tensor<64x1x8xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked}>> loc(#loc24)
      %44 = triton_gpu.convert_layout %40 : tensor<64x8x32xf16, #blocked1> -> tensor<64x8x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked}>> loc(#loc21)
      %45 = tt.dot %43, %44, %arg8 : tensor<64x1x8xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked}>> * tensor<64x8x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked}>> -> tensor<64x1x32xf32, #blocked> loc(#loc24)
      %46 = tt.addptr %arg9, %cst_2 : tensor<1x512x!tt.ptr<f16>, #blocked2>, tensor<1x512xi32, #blocked2> loc(#loc25)
      %47 = tt.addptr %arg10, %32 : tensor<64x8x32x!tt.ptr<f16>, #blocked1>, tensor<64x8x32xi32, #blocked1> loc(#loc18)
      scf.yield %45, %46, %47 : tensor<64x1x32xf32, #blocked>, tensor<1x512x!tt.ptr<f16>, #blocked2>, tensor<64x8x32x!tt.ptr<f16>, #blocked1> loc(#loc26)
    } loc(#loc19)
    %34 = "tt.reduce"(%33#0) <{axis = 0 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc28)), %arg8: f32 loc(callsite(#loc1 at #loc28))):
      %39 = arith.addf %arg7, %arg8 : f32 loc(#loc39)
      tt.reduce.return %39 : f32 loc(#loc36)
    }) : (tensor<64x1x32xf32, #blocked>) -> tensor<1x32xf32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc36)
    %35 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc30)
    %36 = tt.splat %35 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked3> loc(#loc31)
    %37 = tt.addptr %36, %21 : tensor<1x32x!tt.ptr<f32>, #blocked3>, tensor<1x32xi32, #blocked3> loc(#loc31)
    %38 = triton_gpu.convert_layout %34 : tensor<1x32xf32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xf32, #blocked3> loc(#loc32)
    tt.store %37, %38 : tensor<1x32x!tt.ptr<f32>, #blocked3> loc(#loc32)
    tt.return loc(#loc33)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/triton/./test_kernel.py":78:61)
#loc3 = loc("/triton/./test_kernel.py":78:22)
#loc4 = loc("/triton/./test_kernel.py":79:35)
#loc5 = loc("/triton/./test_kernel.py":79:52)
#loc6 = loc("/triton/./test_kernel.py":79:68)
#loc7 = loc("/triton/./test_kernel.py":79:78)
#loc8 = loc("/triton/./test_kernel.py":80:30)
#loc9 = loc("/triton/./test_kernel.py":80:47)
#loc10 = loc("/triton/./test_kernel.py":80:22)
#loc11 = loc("/triton/./test_kernel.py":80:67)
#loc12 = loc("/triton/./test_kernel.py":80:59)
#loc13 = loc("/triton/./test_kernel.py":79:22)
#loc14 = loc("/triton/python/triton/language/standard.py":40:22)
#loc15 = loc("/triton/./test_kernel.py":82:36)
#loc16 = loc("/triton/python/triton/language/standard.py":40:28)
#loc17 = loc("/triton/./test_kernel.py":89:33)
#loc18 = loc("/triton/./test_kernel.py":89:18)
#loc19 = loc("/triton/./test_kernel.py":82:25)
#loc20 = loc("/triton/./test_kernel.py":83:20)
#loc21 = loc("/triton/./test_kernel.py":84:20)
#loc22 = loc("/triton/./test_kernel.py":85:26)
#loc23 = loc("/triton/./test_kernel.py":86:26)
#loc24 = loc("/triton/./test_kernel.py":87:24)
#loc25 = loc("/triton/./test_kernel.py":88:18)
#loc26 = loc("/triton/./test_kernel.py":89:8)
#loc27 = loc("/triton/python/triton/language/standard.py":267:36)
#loc29 = loc("/triton/python/triton/language/standard.py":256:15)
#loc30 = loc("/triton/./test_kernel.py":93:21)
#loc31 = loc("/triton/./test_kernel.py":93:52)
#loc32 = loc("/triton/./test_kernel.py":94:21)
#loc33 = loc("/triton/./test_kernel.py":94:4)
#loc34 = loc(callsite(#loc14 at #loc15))
#loc35 = loc(callsite(#loc16 at #loc15))
#loc36 = loc(callsite(#loc27 at #loc28))
#loc38 = loc(callsite(#loc29 at #loc27))
#loc39 = loc(callsite(#loc38 at #loc28))
