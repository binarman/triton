============================= test session starts ==============================
platform linux -- Python 3.8.16, pytest-7.4.0, pluggy-1.2.0 -- /opt/conda/envs/py_3.8/bin/python
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/triton/python/.hypothesis/examples')
rootdir: /triton/python
plugins: shard-0.1.2, flakefinder-1.1.0, xdist-3.3.1, hypothesis-5.35.1, xdoctest-1.1.0, rerunfailures-11.1.2
collecting ... collected 1 item
Running 1 items in this shard: test/unit/language/test_core_amd.py::test_gemm[64-32-128-4-64-32-64-1]

test/unit/language/test_core_amd.py::test_gemm[64-32-128-4-64-32-64-1] FAILED [100%]

=================================== FAILURES ===================================
______________________ test_gemm[64-32-128-4-64-32-64-1] _______________________

SIZE_M = 64, SIZE_N = 32, SIZE_K = 128, NUM_WARPS = 4, BLOCK_SIZE_M = 64
BLOCK_SIZE_N = 32, BLOCK_SIZE_K = 64, NUM_STAGES = 1

    @pytest.mark.parametrize('SIZE_M,SIZE_N,SIZE_K,NUM_WARPS,BLOCK_SIZE_M,BLOCK_SIZE_N,BLOCK_SIZE_K,NUM_STAGES', [
        [64, 32, 128, 4, 64, 32, 64, 1],
    ])
    def test_gemm(SIZE_M, SIZE_N, SIZE_K, NUM_WARPS, BLOCK_SIZE_M, BLOCK_SIZE_N, BLOCK_SIZE_K, NUM_STAGES):
        a = torch.randn((SIZE_M, SIZE_K), device='cuda', dtype=torch.float16)
        b = torch.randn((SIZE_K, SIZE_N), device='cuda', dtype=torch.float16)
        c = torch.empty((SIZE_M, SIZE_N), device=a.device, dtype=torch.float32)
        grid = lambda META: (1, )
        matmul_kernel[grid](a_ptr=a, b_ptr=b, c_ptr=c,
                            stride_am=a.stride(0), stride_ak=a.stride(1),
                            stride_bk=b.stride(0), stride_bn=b.stride(1),
                            stride_cm=c.stride(0), stride_cn=c.stride(1),
                            M=a.shape[0], N=b.shape[1], K=a.shape[1],
                            BLOCK_SIZE_M=BLOCK_SIZE_M, BLOCK_SIZE_N=BLOCK_SIZE_N, BLOCK_SIZE_K=BLOCK_SIZE_K,
                            num_warps=NUM_WARPS,
                            num_stages=NUM_STAGES,
                            )
        golden = torch.matmul(a, b)
    
        # It's not easy to get a proper error threshold in different size
        # Here the gemm calculation is padded to a different size in order to get
        # a variant version of the golden result. And the error between golden and
        # golden_variant provide reference on selecting the proper rtol / atol.
        golden_variant = get_variant_golden(a, b)
        golden_diff = golden - golden_variant
        golden_abs_err = torch.max(torch.abs(golden_diff)).item()
        golden_rel_err = torch.max(torch.abs(golden_diff / golden)).item()
    
        torch.set_printoptions(threshold=100000)
        print("diff:\n", (golden - c).to("cpu") > max(1e-4, 1.5 * golden_abs_err))
>       triton.testing.assert_close(c, golden.to(torch.float32), rtol=max(1e-4, 1.5 * golden_rel_err), atol=max(1e-4, 1.5 * golden_abs_err))

test/unit/language/test_core_amd.py:2034: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = array([[ -6.309333 ,  -3.9449906,  21.44965  , ...,   7.292802 ,
         12.280415 ,   4.4198074],
       [ -9.755892... ],
       [ -0.372549 ,  -0.372549 ,  -0.372549 , ...,  -0.372549 ,
         -0.372549 ,  -0.372549 ]], dtype=float32)
y = array([[ -6.3085938 ,  -3.9453125 ,  21.453125  , ...,   7.2929688 ,
         12.28125   ,   4.4179688 ],
       [ -9....     [ -7.9257812 ,   4.1835938 ,   4.3632812 , ...,   4.796875  ,
         -0.75878906,  -4.875     ]], dtype=float32)
atol = 0.022624969482421875, rtol = 0.0007176468061516061, err_msg = ''

    def assert_close(x, y, atol=None, rtol=None, err_msg=''):
        import numpy as np
        import torch
    
        # canonicalize arguments to be tensors
        if not isinstance(x, torch.Tensor):
            x = torch.tensor(x)
        if not isinstance(y, torch.Tensor):
            y = torch.tensor(y)
        # absolute tolerance
        if atol is None:
            atol = 1e-2
        atol = atol(x.dtype) if callable(atol) else atol
        # relative tolerance hook
        if rtol is None:
            rtol = 0.
        rtol = rtol(x.dtype) if callable(rtol) else rtol
        # we use numpy instead of pytorch
        # as it seems more memory efficient
        # pytorch tends to oom on large tensors
        if isinstance(x, torch.Tensor):
            if x.dtype == torch.bfloat16:
                x = x.float()
            x = x.cpu().detach().numpy()
        if isinstance(y, torch.Tensor):
            if y.dtype == torch.bfloat16:
                y = y.float()
            y = y.cpu().detach().numpy()
        # we handle size==1 case separately as we can
        # provide better error message there
        if x.size > 1 or y.size > 1:
>           np.testing.assert_allclose(x, y, atol=atol, rtol=rtol, equal_nan=True)
E           AssertionError: 
E           Not equal to tolerance rtol=0.000717647, atol=0.022625
E           
E           Mismatched elements: 1021 / 2048 (49.9%)
E           Max absolute difference: 33.060047
E           Max relative difference: 42.676872
E            x: array([[ -6.309333,  -3.944991,  21.44965 , ...,   7.292802,  12.280415,
E                     4.419807],
E                  [ -9.755892,  10.798577, -23.371372, ...,   3.081243,  17.26834 ,...
E            y: array([[ -6.308594,  -3.945312,  21.453125, ...,   7.292969,  12.28125 ,
E                     4.417969],
E                  [ -9.757812,  10.796875, -23.375   , ...,   3.082031,  17.265625,...

triton/testing.py:191: AssertionError
----------------------------- Captured stdout call -----------------------------
diff:
 tensor([[False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False, False, False, False, False, False, False, False, False,
         False, False],
        [False, False, False, False, False, False,  True, False, False,  True,
         False,  True, False,  True,  True, False, False,  True, False, False,
         False, False,  True,  True, False, False, False,  True, False, False,
          True,  True],
        [ True,  True, False, False, False, False, False,  True, False,  True,
          True, False, False,  True,  True,  True, False, False, False,  True,
         False, False, False, False,  True, False,  True, False,  True,  True,
         False, False],
        [ True,  True, False,  True, False,  True, False, False,  True, False,
          True, False,  True, False,  True,  True, False,  True, False,  True,
         False, False, False, False, False, False,  True, False,  True, False,
         False, False],
        [ True, False, False, False, False,  True,  True,  True, False, False,
         False, False, False,  True,  True, False,  True,  True, False,  True,
          True,  True, False, False,  True, False, False, False,  True,  True,
         False,  True],
        [False,  True,  True,  True,  True,  True,  True,  True, False,  True,
          True,  True,  True,  True,  True,  True,  True,  True,  True,  True,
         False, False,  True, False,  True,  True,  True,  True,  True,  True,
         False,  True],
        [ True,  True, False,  True,  True, False, False,  True, False,  True,
         False,  True,  True, False, False,  True, False, False, False, False,
         False, False, False,  True,  True, False,  True,  True,  True,  True,
         False, False],
        [ True,  True, False, False,  True, False,  True, False, False,  True,
          True,  True,  True, False, False, False, False, False,  True, False,
          True,  True, False,  True, False, False, False,  True,  True, False,
          True,  True],
        [ True, False,  True,  True, False, False, False,  True, False, False,
         False,  True,  True, False, False, False,  True,  True, False,  True,
          True, False, False,  True,  True, False, False, False,  True, False,
         False,  True],
        [False, False,  True, False,  True,  True,  True,  True,  True, False,
          True,  True,  True,  True, False,  True,  True, False, False,  True,
         False, False,  True,  True,  True,  True, False,  True, False, False,
          True,  True],
        [ True, False, False, False, False, False,  True,  True, False, False,
          True, False,  True, False,  True,  True, False,  True,  True,  True,
          True,  True,  True,  True,  True, False,  True,  True,  True,  True,
          True,  True],
        [False,  True,  True,  True,  True, False, False, False,  True, False,
          True,  True,  True, False, False,  True,  True,  True, False, False,
          True, False,  True, False,  True, False,  True,  True, False,  True,
         False,  True],
        [False, False, False, False,  True, False,  True,  True,  True,  True,
         False, False,  True,  True, False, False,  True, False, False,  True,
          True,  True,  True,  True,  True, False,  True, False, False, False,
          True, False],
        [False,  True,  True, False,  True, False, False,  True,  True,  True,
          True,  True,  True, False,  True, False,  True,  True, False, False,
          True,  True,  True, False,  True, False, False,  True, False, False,
          True,  True],
        [ True, False, False, False, False,  True, False, False, False,  True,
         False, False, False, False,  True, False,  True,  True, False, False,
         False, False, False, False,  True,  True, False,  True, False,  True,
         False, False],
        [False,  True,  True, False, False,  True, False, False,  True,  True,
          True,  True,  True,  True,  True, False, False, False, False, False,
         False,  True, False,  True, False,  True, False, False, False, False,
         False,  True],
        [False,  True,  True, False,  True,  True, False, False, False,  True,
          True,  True, False, False,  True, False, False, False,  True,  True,
         False, False,  True, False, False,  True, False,  True, False, False,
          True,  True],
        [ True,  True, False,  True, False, False,  True,  True, False, False,
          True,  True, False, False,  True,  True, False, False, False, False,
         False,  True,  True,  True, False,  True,  True, False,  True, False,
          True, False],
        [ True, False, False,  True,  True, False, False,  True,  True, False,
         False,  True, False, False, False,  True, False,  True, False,  True,
          True, False,  True,  True, False,  True, False, False, False, False,
         False, False],
        [ True, False, False,  True,  True,  True, False,  True, False, False,
         False,  True,  True,  True,  True, False,  True, False,  True,  True,
         False, False,  True, False,  True, False,  True,  True,  True, False,
         False, False],
        [ True,  True,  True, False, False,  True,  True, False, False, False,
          True, False,  True, False, False,  True, False, False,  True, False,
          True,  True,  True,  True, False, False,  True, False,  True, False,
          True,  True],
        [ True,  True, False, False,  True, False,  True,  True, False,  True,
         False,  True, False,  True, False,  True, False,  True, False, False,
          True, False,  True,  True,  True,  True, False,  True,  True,  True,
          True,  True],
        [False, False,  True, False,  True,  True,  True,  True,  True,  True,
          True, False,  True, False,  True,  True, False, False,  True,  True,
          True,  True, False, False, False, False,  True,  True,  True,  True,
         False,  True],
        [ True, False, False,  True,  True,  True, False,  True,  True, False,
         False, False, False, False, False, False,  True, False,  True,  True,
          True,  True, False, False, False,  True, False,  True, False, False,
          True, False],
        [ True, False, False,  True, False,  True, False, False,  True,  True,
          True,  True,  True, False, False, False,  True,  True,  True, False,
         False,  True, False,  True,  True, False, False,  True,  True,  True,
          True, False],
        [False, False, False,  True, False,  True, False,  True,  True,  True,
          True, False, False, False,  True, False,  True, False,  True, False,
          True,  True, False, False,  True, False,  True, False, False,  True,
          True, False],
        [False,  True,  True, False,  True, False,  True, False, False, False,
         False,  True, False,  True, False,  True,  True, False, False,  True,
         False,  True,  True,  True,  True,  True, False, False, False,  True,
         False,  True],
        [False, False, False,  True,  True, False,  True, False, False,  True,
          True, False, False,  True,  True, False,  True, False, False,  True,
         False, False,  True,  True, False,  True, False, False,  True,  True,
          True, False],
        [ True,  True,  True, False, False, False,  True,  True,  True, False,
          True, False,  True,  True, False,  True, False, False,  True,  True,
         False, False, False, False, False, False, False,  True,  True,  True,
          True,  True],
        [ True,  True, False,  True,  True, False,  True, False,  True,  True,
         False, False,  True, False, False,  True, False, False,  True,  True,
          True, False, False,  True,  True, False, False,  True,  True,  True,
          True, False],
        [ True,  True, False, False,  True,  True, False,  True, False,  True,
         False,  True, False,  True, False, False,  True,  True, False,  True,
          True,  True,  True, False, False, False, False,  True, False,  True,
          True,  True],
        [ True,  True,  True,  True,  True, False,  True,  True, False,  True,
         False,  True,  True, False,  True, False,  True, False, False,  True,
         False,  True, False, False,  True, False, False,  True,  True,  True,
         False,  True],
        [False,  True,  True, False, False, False, False,  True, False, False,
         False, False, False,  True, False, False,  True, False, False,  True,
         False, False,  True, False,  True, False,  True,  True,  True,  True,
         False, False]])
----------------------------- Captured stderr call -----------------------------
// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc1)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc2)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc3)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc4)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc5)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc5)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc4)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc4)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc6)
    %c1_i32 = arith.constant 1 : i32 loc(#loc7)
    %cst = arith.constant dense<1> : tensor<1x64xi32> loc(#loc7)
    %9 = arith.muli %8, %cst : tensor<1x64xi32> loc(#loc7)
    %10 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc6)
    %11 = tt.broadcast %9 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc6)
    %12 = tt.addptr %10, %11 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc6)
    %13 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc8)
    %14 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc9)
    %15 = arith.muli %13, %14 : tensor<64x1xi32> loc(#loc9)
    %16 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc8)
    %17 = tt.addptr %16, %15 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc8)
    %18 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc10)
    %c1_i32_0 = arith.constant 1 : i32 loc(#loc11)
    %cst_1 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc11)
    %19 = arith.muli %18, %cst_1 : tensor<1x32xi32> loc(#loc11)
    %20 = tt.broadcast %17 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc10)
    %21 = tt.broadcast %19 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc10)
    %22 = tt.addptr %20, %21 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc10)
    %23 = tt.call @"zeros____0cconstexpr_(constexpr_64_, constexpr_32_)__1cconstexpr_fp32_"() : () -> tensor<64x32xf32> loc(#loc12)
    %c0_i32 = arith.constant 0 : i32 loc(#loc13)
    %c128_i32 = arith.constant 128 : i32 loc(#loc13)
    %c64_i32 = arith.constant 64 : i32 loc(#loc13)
    %24 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc13)
    %25 = arith.bitcast %c128_i32 : i32 to i32 loc(#loc13)
    %26 = arith.bitcast %c64_i32 : i32 to i32 loc(#loc13)
    %27 = llvm.mlir.undef : i32 loc(#loc13)
    %28:3 = scf.for %arg6 = %24 to %25 step %26 iter_args(%arg7 = %23, %arg8 = %12, %arg9 = %22) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %39 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc14)
      %40 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc15)
      %cst_4 = arith.constant 0.000000e+00 : f32 loc(#loc16)
      %cst_5 = arith.constant 0.000000e+00 : f32 loc(#loc16)
      %cst_6 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc16)
      %41 = tt.dot %39, %40, %cst_6 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc16)
      %42 = arith.addf %arg7, %41 : tensor<64x32xf32> loc(#loc17)
      %c64_i32_7 = arith.constant 64 : i32 loc(#loc18)
      %cst_8 = arith.constant dense<64> : tensor<64x64xi32> loc(#loc18)
      %43 = tt.addptr %arg8, %cst_8 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc18)
      %c64_i32_9 = arith.constant 64 : i32 loc(#loc19)
      %44 = arith.muli %arg4, %c64_i32_9 : i32 loc(#loc19)
      %45 = tt.splat %44 : (i32) -> tensor<64x32xi32> loc(#loc20)
      %46 = tt.addptr %arg9, %45 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc20)
      scf.yield %42, %43, %46 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc21)
    } loc(#loc13)
    %29 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc22)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc23)
    %31 = arith.muli %29, %30 : tensor<64x1xi32> loc(#loc23)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc22)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc22)
    %34 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc24)
    %c1_i32_2 = arith.constant 1 : i32 loc(#loc25)
    %cst_3 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc25)
    %35 = arith.muli %34, %cst_3 : tensor<1x32xi32> loc(#loc25)
    %36 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc24)
    %37 = tt.broadcast %35 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc24)
    %38 = tt.addptr %36, %37 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc24)
    tt.store %38, %28#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
  tt.func private @"zeros____0cconstexpr_(constexpr_64_, constexpr_32_)__1cconstexpr_fp32_"() -> tensor<64x32xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc29)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc29)
    tt.return %cst_0 : tensor<64x32xf32> loc(#loc30)
  } loc(#loc28)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:69)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:69)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1976:27)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc24 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc25 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:69)
#loc26 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc27 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc28 = loc("/triton/python/triton/language/standard.py":84:0)
#loc29 = loc("/triton/python/triton/language/standard.py":93:31)
#loc30 = loc("/triton/python/triton/language/standard.py":93:11)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @zeros____0cconstexpr_(constexpr_64_, constexpr_32_)__1cconstexpr_fp32_) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc1)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc2)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc3)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc4)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc5)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc5)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc4)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc4)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc6)
    %c1_i32 = arith.constant 1 : i32 loc(#loc7)
    %cst = arith.constant dense<1> : tensor<1x64xi32> loc(#loc7)
    %9 = arith.muli %8, %cst : tensor<1x64xi32> loc(#loc7)
    %10 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc6)
    %11 = tt.broadcast %9 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc6)
    %12 = tt.addptr %10, %11 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc6)
    %13 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc8)
    %14 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc9)
    %15 = arith.muli %13, %14 : tensor<64x1xi32> loc(#loc9)
    %16 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc8)
    %17 = tt.addptr %16, %15 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc8)
    %18 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc10)
    %c1_i32_0 = arith.constant 1 : i32 loc(#loc11)
    %cst_1 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc11)
    %19 = arith.muli %18, %cst_1 : tensor<1x32xi32> loc(#loc11)
    %20 = tt.broadcast %17 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc10)
    %21 = tt.broadcast %19 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc10)
    %22 = tt.addptr %20, %21 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc10)
    %23 = tt.call @"zeros____0cconstexpr_(constexpr_64_, constexpr_32_)__1cconstexpr_fp32_"() : () -> tensor<64x32xf32> loc(#loc12)
    %c0_i32 = arith.constant 0 : i32 loc(#loc13)
    %c128_i32 = arith.constant 128 : i32 loc(#loc13)
    %c64_i32 = arith.constant 64 : i32 loc(#loc13)
    %24 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc13)
    %25 = arith.bitcast %c128_i32 : i32 to i32 loc(#loc13)
    %26 = arith.bitcast %c64_i32 : i32 to i32 loc(#loc13)
    %27 = llvm.mlir.undef : i32 loc(#loc13)
    %28:3 = scf.for %arg6 = %24 to %25 step %26 iter_args(%arg7 = %23, %arg8 = %12, %arg9 = %22) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %39 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc14)
      %40 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc15)
      %cst_4 = arith.constant 0.000000e+00 : f32 loc(#loc16)
      %cst_5 = arith.constant 0.000000e+00 : f32 loc(#loc16)
      %cst_6 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc16)
      %41 = tt.dot %39, %40, %cst_6 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc16)
      %42 = arith.addf %arg7, %41 : tensor<64x32xf32> loc(#loc17)
      %c64_i32_7 = arith.constant 64 : i32 loc(#loc18)
      %cst_8 = arith.constant dense<64> : tensor<64x64xi32> loc(#loc18)
      %43 = tt.addptr %arg8, %cst_8 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc18)
      %c64_i32_9 = arith.constant 64 : i32 loc(#loc19)
      %44 = arith.muli %arg4, %c64_i32_9 : i32 loc(#loc19)
      %45 = tt.splat %44 : (i32) -> tensor<64x32xi32> loc(#loc20)
      %46 = tt.addptr %arg9, %45 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc20)
      scf.yield %42, %43, %46 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc21)
    } loc(#loc13)
    %29 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc22)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc23)
    %31 = arith.muli %29, %30 : tensor<64x1xi32> loc(#loc23)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc22)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc22)
    %34 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc24)
    %c1_i32_2 = arith.constant 1 : i32 loc(#loc25)
    %cst_3 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc25)
    %35 = arith.muli %34, %cst_3 : tensor<1x32xi32> loc(#loc25)
    %36 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc24)
    %37 = tt.broadcast %35 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc24)
    %38 = tt.addptr %36, %37 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc24)
    tt.store %38, %28#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
  tt.func private @"zeros____0cconstexpr_(constexpr_64_, constexpr_32_)__1cconstexpr_fp32_"() -> tensor<64x32xf32> attributes {noinline = false} {
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc29)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc29)
    tt.return %cst_0 : tensor<64x32xf32> loc(#loc30)
  } loc(#loc28)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:69)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:69)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1976:27)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc24 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc25 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:69)
#loc26 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc27 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc28 = loc("/triton/python/triton/language/standard.py":84:0)
#loc29 = loc("/triton/python/triton/language/standard.py":93:31)
#loc30 = loc("/triton/python/triton/language/standard.py":93:11)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @matmul_kernel_0d1d2d3de4c5de6c7de8c) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc1)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc2)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc3)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc4)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc5)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc5)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc4)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc4)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc6)
    %c1_i32 = arith.constant 1 : i32 loc(#loc7)
    %cst = arith.constant dense<1> : tensor<1x64xi32> loc(#loc7)
    %9 = arith.muli %8, %cst : tensor<1x64xi32> loc(#loc7)
    %10 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc6)
    %11 = tt.broadcast %9 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc6)
    %12 = tt.addptr %10, %11 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc6)
    %13 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc8)
    %14 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc9)
    %15 = arith.muli %13, %14 : tensor<64x1xi32> loc(#loc9)
    %16 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc8)
    %17 = tt.addptr %16, %15 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc8)
    %18 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc10)
    %c1_i32_0 = arith.constant 1 : i32 loc(#loc11)
    %cst_1 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc11)
    %19 = arith.muli %18, %cst_1 : tensor<1x32xi32> loc(#loc11)
    %20 = tt.broadcast %17 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc10)
    %21 = tt.broadcast %19 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc10)
    %22 = tt.addptr %20, %21 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc10)
    %23 = tt.call @"zeros____0cconstexpr_(constexpr_64_, constexpr_32_)__1cconstexpr_fp32_"() : () -> tensor<64x32xf32> loc(#loc12)
    %c0_i32 = arith.constant 0 : i32 loc(#loc13)
    %c128_i32 = arith.constant 128 : i32 loc(#loc13)
    %c64_i32 = arith.constant 64 : i32 loc(#loc13)
    %24 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc13)
    %25 = arith.bitcast %c128_i32 : i32 to i32 loc(#loc13)
    %26 = arith.bitcast %c64_i32 : i32 to i32 loc(#loc13)
    %27 = llvm.mlir.undef : i32 loc(#loc13)
    %28:3 = scf.for %arg6 = %24 to %25 step %26 iter_args(%arg7 = %23, %arg8 = %12, %arg9 = %22) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %39 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc14)
      %40 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc15)
      %cst_4 = arith.constant 0.000000e+00 : f32 loc(#loc16)
      %cst_5 = arith.constant 0.000000e+00 : f32 loc(#loc16)
      %cst_6 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc16)
      %41 = tt.dot %39, %40, %cst_6 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc16)
      %42 = arith.addf %arg7, %41 : tensor<64x32xf32> loc(#loc17)
      %c64_i32_7 = arith.constant 64 : i32 loc(#loc18)
      %cst_8 = arith.constant dense<64> : tensor<64x64xi32> loc(#loc18)
      %43 = tt.addptr %arg8, %cst_8 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc18)
      %c64_i32_9 = arith.constant 64 : i32 loc(#loc19)
      %44 = arith.muli %arg4, %c64_i32_9 : i32 loc(#loc19)
      %45 = tt.splat %44 : (i32) -> tensor<64x32xi32> loc(#loc20)
      %46 = tt.addptr %arg9, %45 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc20)
      scf.yield %42, %43, %46 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc21)
    } loc(#loc13)
    %29 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc22)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc23)
    %31 = arith.muli %29, %30 : tensor<64x1xi32> loc(#loc23)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc22)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc22)
    %34 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc24)
    %c1_i32_2 = arith.constant 1 : i32 loc(#loc25)
    %cst_3 = arith.constant dense<1> : tensor<1x32xi32> loc(#loc25)
    %35 = arith.muli %34, %cst_3 : tensor<1x32xi32> loc(#loc25)
    %36 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc24)
    %37 = tt.broadcast %35 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc24)
    %38 = tt.addptr %36, %37 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc24)
    tt.store %38, %28#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
  tt.func private @"zeros____0cconstexpr_(constexpr_64_, constexpr_32_)__1cconstexpr_fp32_"() -> tensor<64x32xf32> attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc29)
    tt.return %cst : tensor<64x32xf32> loc(#loc30)
  } loc(#loc28)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:69)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:69)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1976:27)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc24 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc25 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:69)
#loc26 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc27 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc28 = loc("/triton/python/triton/language/standard.py":84:0)
#loc29 = loc("/triton/python/triton/language/standard.py":93:31)
#loc30 = loc("/triton/python/triton/language/standard.py":93:11)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @matmul_kernel_0d1d2d3de4c5de6c7de8c) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc6)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc7)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc8)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc8)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc7)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc9)
    %9 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc9)
    %10 = tt.broadcast %8 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc9)
    %11 = tt.addptr %9, %10 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc9)
    %12 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc10)
    %13 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc11)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc11)
    %15 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %17 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc12)
    %18 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc12)
    %19 = tt.broadcast %17 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc12)
    %20 = tt.addptr %18, %19 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc12)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc27)
    %21:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_1, %arg8 = %11, %arg9 = %20) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %31 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc15)
      %32 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc16)
      %33 = tt.dot %31, %32, %cst_0 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc3)
      %34 = arith.addf %arg7, %33 : tensor<64x32xf32> loc(#loc17)
      %35 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %36 = arith.muli %arg4, %c64_i32 : i32 loc(#loc18)
      %37 = tt.splat %36 : (i32) -> tensor<64x32xi32> loc(#loc19)
      %38 = tt.addptr %arg9, %37 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc19)
      scf.yield %34, %35, %38 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc20)
    } loc(#loc1)
    %22 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc21)
    %23 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc22)
    %24 = arith.muli %22, %23 : tensor<64x1xi32> loc(#loc22)
    %25 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc21)
    %26 = tt.addptr %25, %24 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc21)
    %27 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc23)
    %28 = tt.broadcast %26 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc23)
    %29 = tt.broadcast %27 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc23)
    %30 = tt.addptr %28, %29 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc23)
    tt.store %30, %21#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc24)
    tt.return loc(#loc25)
  } loc(#loc)
  tt.func private @"zeros____0cconstexpr_(constexpr_64_, constexpr_32_)__1cconstexpr_fp32_"() -> tensor<64x32xf32> attributes {noinline = false} loc(#loc26)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc13 = loc("/triton/python/triton/language/standard.py":93:31)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1976:27)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc24 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc25 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc26 = loc("/triton/python/triton/language/standard.py":84:0)
#loc27 = loc(callsite(#loc13 at #loc14))


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc6)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc7)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc8)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc8)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc7)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc9)
    %9 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc9)
    %10 = tt.broadcast %8 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc9)
    %11 = tt.addptr %9, %10 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc9)
    %12 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc10)
    %13 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc11)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc11)
    %15 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %17 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc12)
    %18 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc12)
    %19 = tt.broadcast %17 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc12)
    %20 = tt.addptr %18, %19 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc12)
    %21:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %11, %arg9 = %20) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %31 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc13)
      %32 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc14)
      %33 = tt.dot %31, %32, %cst_0 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc3)
      %34 = arith.addf %arg7, %33 : tensor<64x32xf32> loc(#loc15)
      %35 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %36 = arith.muli %arg4, %c64_i32 : i32 loc(#loc16)
      %37 = tt.splat %36 : (i32) -> tensor<64x32xi32> loc(#loc17)
      %38 = tt.addptr %arg9, %37 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc17)
      scf.yield %34, %35, %38 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc18)
    } loc(#loc1)
    %22 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc19)
    %23 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc20)
    %24 = arith.muli %22, %23 : tensor<64x1xi32> loc(#loc20)
    %25 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc19)
    %26 = tt.addptr %25, %24 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc19)
    %27 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc21)
    %28 = tt.broadcast %26 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc21)
    %29 = tt.broadcast %27 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc21)
    %30 = tt.addptr %28, %29 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc21)
    tt.store %30, %21#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)


// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc6)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc7)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc8)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc8)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc7)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc9)
    %9 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc9)
    %10 = tt.broadcast %8 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc9)
    %11 = tt.addptr %9, %10 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc9)
    %12 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc10)
    %13 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc11)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc11)
    %15 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %17 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc12)
    %18 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc12)
    %19 = tt.broadcast %17 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc12)
    %20 = tt.addptr %18, %19 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc12)
    %21:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %11, %arg9 = %20) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %31 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc13)
      %32 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc14)
      %33 = tt.dot %31, %32, %cst_0 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc3)
      %34 = arith.addf %arg7, %33 : tensor<64x32xf32> loc(#loc15)
      %35 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %36 = arith.muli %arg4, %c64_i32 : i32 loc(#loc16)
      %37 = tt.splat %36 : (i32) -> tensor<64x32xi32> loc(#loc17)
      %38 = tt.addptr %arg9, %37 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc17)
      scf.yield %34, %35, %38 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc18)
    } loc(#loc1)
    %22 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc19)
    %23 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc20)
    %24 = arith.muli %22, %23 : tensor<64x1xi32> loc(#loc20)
    %25 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc19)
    %26 = tt.addptr %25, %24 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc19)
    %27 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc21)
    %28 = tt.broadcast %26 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc21)
    %29 = tt.broadcast %27 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc21)
    %30 = tt.addptr %28, %29 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc21)
    tt.store %30, %21#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @matmul_kernel_0d1d2d3de4c5de6c7de8c) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc6)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc7)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc8)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc8)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc7)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc9)
    %9 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc9)
    %10 = tt.broadcast %8 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc9)
    %11 = tt.addptr %9, %10 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc9)
    %12 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc10)
    %13 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc11)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc11)
    %15 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %17 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc12)
    %18 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc12)
    %19 = tt.broadcast %17 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc12)
    %20 = tt.addptr %18, %19 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc12)
    %21:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %11, %arg9 = %20) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %31 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc13)
      %32 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc14)
      %33 = tt.dot %31, %32, %cst_0 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc3)
      %34 = arith.addf %arg7, %33 : tensor<64x32xf32> loc(#loc15)
      %35 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %36 = arith.muli %arg4, %c64_i32 : i32 loc(#loc16)
      %37 = tt.splat %36 : (i32) -> tensor<64x32xi32> loc(#loc17)
      %38 = tt.addptr %arg9, %37 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc17)
      scf.yield %34, %35, %38 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc18)
    } loc(#loc1)
    %22 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc19)
    %23 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc20)
    %24 = arith.muli %22, %23 : tensor<64x1xi32> loc(#loc20)
    %25 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc19)
    %26 = tt.addptr %25, %24 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc19)
    %27 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc21)
    %28 = tt.broadcast %26 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc21)
    %29 = tt.broadcast %27 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc21)
    %30 = tt.addptr %28, %29 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc21)
    tt.store %30, %21#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc6)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc7)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc8)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc8)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc7)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc9)
    %9 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc9)
    %10 = tt.broadcast %8 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc9)
    %11 = tt.addptr %9, %10 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc9)
    %12 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc10)
    %13 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc11)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc11)
    %15 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %17 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc12)
    %18 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc12)
    %19 = tt.broadcast %17 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc12)
    %20 = tt.addptr %18, %19 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc12)
    %21:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %11, %arg9 = %20) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %31 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc13)
      %32 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc14)
      %33 = tt.dot %31, %32, %cst_0 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc3)
      %34 = arith.addf %arg7, %33 : tensor<64x32xf32> loc(#loc15)
      %35 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %36 = arith.muli %arg4, %c64_i32 : i32 loc(#loc16)
      %37 = tt.splat %36 : (i32) -> tensor<64x32xi32> loc(#loc17)
      %38 = tt.addptr %arg9, %37 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc17)
      scf.yield %34, %35, %38 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc18)
    } loc(#loc1)
    %22 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc19)
    %23 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc20)
    %24 = arith.muli %22, %23 : tensor<64x1xi32> loc(#loc20)
    %25 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc19)
    %26 = tt.addptr %25, %24 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc19)
    %27 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc21)
    %28 = tt.broadcast %26 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc21)
    %29 = tt.broadcast %27 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc21)
    %30 = tt.addptr %28, %29 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc21)
    tt.store %30, %21#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc6)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc7)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc8)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc8)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc7)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc9)
    %9 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc9)
    %10 = tt.broadcast %8 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc9)
    %11 = tt.addptr %9, %10 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc9)
    %12 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc10)
    %13 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc11)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc11)
    %15 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %17 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc12)
    %18 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc12)
    %19 = tt.broadcast %17 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc12)
    %20 = tt.addptr %18, %19 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc12)
    %21:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %11, %arg9 = %20) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %31 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc13)
      %32 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc14)
      %33 = tt.dot %31, %32, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc24)
      %34 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %35 = arith.muli %arg4, %c64_i32 : i32 loc(#loc16)
      %36 = tt.splat %35 : (i32) -> tensor<64x32xi32> loc(#loc17)
      %37 = tt.addptr %arg9, %36 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc17)
      scf.yield %33, %34, %37 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc18)
    } loc(#loc1)
    %22 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc19)
    %23 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc20)
    %24 = arith.muli %22, %23 : tensor<64x1xi32> loc(#loc20)
    %25 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc19)
    %26 = tt.addptr %25, %24 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc19)
    %27 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc21)
    %28 = tt.broadcast %26 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc21)
    %29 = tt.broadcast %27 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc21)
    %30 = tt.addptr %28, %29 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc21)
    tt.store %30, %21#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc24 = loc(fused[#loc15, #loc3])


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc6)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc7)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc8)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc8)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc7)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc9)
    %9 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc9)
    %10 = tt.broadcast %8 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc9)
    %11 = tt.addptr %9, %10 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc9)
    %12 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc10)
    %13 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc11)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc11)
    %15 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %17 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc12)
    %18 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc12)
    %19 = tt.broadcast %17 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc12)
    %20 = tt.addptr %18, %19 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc12)
    %21:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %11, %arg9 = %20) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %31 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc13)
      %32 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc14)
      %33 = tt.dot %31, %32, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc24)
      %34 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %35 = arith.muli %arg4, %c64_i32 : i32 loc(#loc16)
      %36 = tt.splat %35 : (i32) -> tensor<64x32xi32> loc(#loc17)
      %37 = tt.addptr %arg9, %36 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc17)
      scf.yield %33, %34, %37 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc18)
    } loc(#loc1)
    %22 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc19)
    %23 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc20)
    %24 = arith.muli %22, %23 : tensor<64x1xi32> loc(#loc20)
    %25 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc19)
    %26 = tt.addptr %25, %24 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc19)
    %27 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc21)
    %28 = tt.broadcast %26 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc21)
    %29 = tt.broadcast %27 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc21)
    %30 = tt.addptr %28, %29 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc21)
    tt.store %30, %21#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc24 = loc(fused[#loc15, #loc3])


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc6)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc7)
    %4 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc8)
    %5 = arith.muli %3, %4 : tensor<64x1xi32> loc(#loc8)
    %6 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc7)
    %8 = tt.expand_dims %2 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc9)
    %9 = tt.broadcast %7 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc9)
    %10 = tt.broadcast %8 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc9)
    %11 = tt.addptr %9, %10 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc9)
    %12 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc10)
    %13 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc11)
    %14 = arith.muli %12, %13 : tensor<64x1xi32> loc(#loc11)
    %15 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %16 = tt.addptr %15, %14 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %17 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc12)
    %18 = tt.broadcast %16 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc12)
    %19 = tt.broadcast %17 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc12)
    %20 = tt.addptr %18, %19 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc12)
    %21:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %11, %arg9 = %20) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %31 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc13)
      %32 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc14)
      %33 = tt.dot %31, %32, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc24)
      %34 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %35 = arith.muli %arg4, %c64_i32 : i32 loc(#loc16)
      %36 = tt.splat %35 : (i32) -> tensor<64x32xi32> loc(#loc17)
      %37 = tt.addptr %arg9, %36 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc17)
      scf.yield %33, %34, %37 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc18)
    } loc(#loc1)
    %22 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc19)
    %23 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc20)
    %24 = arith.muli %22, %23 : tensor<64x1xi32> loc(#loc20)
    %25 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc19)
    %26 = tt.addptr %25, %24 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc19)
    %27 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc21)
    %28 = tt.broadcast %26 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc21)
    %29 = tt.broadcast %27 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc21)
    %30 = tt.addptr %28, %29 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc21)
    tt.store %30, %21#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1973:26)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc24 = loc(fused[#loc15, #loc3])


// -----// IR Dump Before LoopInvariantCodeMotion (loop-invariant-code-motion) ('builtin.module' operation) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc6)
    %3 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc7)
    %4 = arith.muli %2, %3 : tensor<64x1xi32> loc(#loc7)
    %5 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc6)
    %6 = tt.addptr %5, %4 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc6)
    %7 = tt.expand_dims %0 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc8)
    %8 = tt.broadcast %6 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc8)
    %9 = tt.broadcast %7 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc8)
    %10 = tt.addptr %8, %9 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc8)
    %11 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc9)
    %12 = arith.muli %2, %11 : tensor<64x1xi32> loc(#loc9)
    %13 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %14 = tt.addptr %13, %12 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %15 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc11)
    %16 = tt.broadcast %14 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc11)
    %17 = tt.broadcast %15 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc11)
    %18 = tt.addptr %16, %17 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc11)
    %19:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %10, %arg9 = %18) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %26 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc12)
      %27 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc13)
      %28 = tt.dot %26, %27, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc23)
      %29 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %30 = arith.muli %arg4, %c64_i32 : i32 loc(#loc15)
      %31 = tt.splat %30 : (i32) -> tensor<64x32xi32> loc(#loc16)
      %32 = tt.addptr %arg9, %31 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc16)
      scf.yield %28, %29, %32 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc17)
    } loc(#loc1)
    %20 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc18)
    %21 = arith.muli %2, %20 : tensor<64x1xi32> loc(#loc18)
    %22 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc19)
    %23 = tt.addptr %22, %21 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc19)
    %24 = tt.broadcast %23 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc20)
    %25 = tt.addptr %24, %17 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc20)
    tt.store %25, %19#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc21)
    tt.return loc(#loc22)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc23 = loc(fused[#loc14, #loc3])


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc6)
    %3 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc7)
    %4 = arith.muli %2, %3 : tensor<64x1xi32> loc(#loc7)
    %5 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc6)
    %6 = tt.addptr %5, %4 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc6)
    %7 = tt.expand_dims %0 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc8)
    %8 = tt.broadcast %6 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc8)
    %9 = tt.broadcast %7 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc8)
    %10 = tt.addptr %8, %9 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc8)
    %11 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc9)
    %12 = arith.muli %2, %11 : tensor<64x1xi32> loc(#loc9)
    %13 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %14 = tt.addptr %13, %12 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %15 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc11)
    %16 = tt.broadcast %14 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc11)
    %17 = tt.broadcast %15 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc11)
    %18 = tt.addptr %16, %17 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc11)
    %19 = arith.muli %arg4, %c64_i32 : i32 loc(#loc12)
    %20 = tt.splat %19 : (i32) -> tensor<64x32xi32> loc(#loc13)
    %21:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %10, %arg9 = %18) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %28 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc14)
      %29 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc15)
      %30 = tt.dot %28, %29, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc23)
      %31 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %32 = tt.addptr %arg9, %20 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc13)
      scf.yield %30, %31, %32 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc17)
    } loc(#loc1)
    %22 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc18)
    %23 = arith.muli %2, %22 : tensor<64x1xi32> loc(#loc18)
    %24 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc19)
    %26 = tt.broadcast %25 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc20)
    %27 = tt.addptr %26, %17 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc20)
    tt.store %27, %21#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc21)
    tt.return loc(#loc22)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc23 = loc(fused[#loc16, #loc3])


// -----// IR Dump Before ConvertTritonToTritonGPU (convert-triton-to-tritongpu) ('builtin.module' operation) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc5)
    %2 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32> loc(#loc6)
    %3 = tt.splat %arg3 : (i32) -> tensor<64x1xi32> loc(#loc7)
    %4 = arith.muli %2, %3 : tensor<64x1xi32> loc(#loc7)
    %5 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc6)
    %6 = tt.addptr %5, %4 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc6)
    %7 = tt.expand_dims %0 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32> loc(#loc8)
    %8 = tt.broadcast %6 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x64x!tt.ptr<f16, 1>> loc(#loc8)
    %9 = tt.broadcast %7 : (tensor<1x64xi32>) -> tensor<64x64xi32> loc(#loc8)
    %10 = tt.addptr %8, %9 : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc8)
    %11 = tt.splat %arg4 : (i32) -> tensor<64x1xi32> loc(#loc9)
    %12 = arith.muli %2, %11 : tensor<64x1xi32> loc(#loc9)
    %13 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>> loc(#loc10)
    %14 = tt.addptr %13, %12 : tensor<64x1x!tt.ptr<f16, 1>>, tensor<64x1xi32> loc(#loc10)
    %15 = tt.expand_dims %1 {axis = 0 : i32} : (tensor<32xi32>) -> tensor<1x32xi32> loc(#loc11)
    %16 = tt.broadcast %14 : (tensor<64x1x!tt.ptr<f16, 1>>) -> tensor<64x32x!tt.ptr<f16, 1>> loc(#loc11)
    %17 = tt.broadcast %15 : (tensor<1x32xi32>) -> tensor<64x32xi32> loc(#loc11)
    %18 = tt.addptr %16, %17 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc11)
    %19 = arith.muli %arg4, %c64_i32 : i32 loc(#loc12)
    %20 = tt.splat %19 : (i32) -> tensor<64x32xi32> loc(#loc13)
    %21:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %10, %arg9 = %18) -> (tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>>)  : i32 {
      %28 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16> loc(#loc14)
      %29 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16> loc(#loc15)
      %30 = tt.dot %28, %29, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16> * tensor<64x32xf16> -> tensor<64x32xf32> loc(#loc23)
      %31 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x64xi32> loc(#loc2)
      %32 = tt.addptr %arg9, %20 : tensor<64x32x!tt.ptr<f16, 1>>, tensor<64x32xi32> loc(#loc13)
      scf.yield %30, %31, %32 : tensor<64x32xf32>, tensor<64x64x!tt.ptr<f16, 1>>, tensor<64x32x!tt.ptr<f16, 1>> loc(#loc17)
    } loc(#loc1)
    %22 = tt.splat %arg5 : (i32) -> tensor<64x1xi32> loc(#loc18)
    %23 = arith.muli %2, %22 : tensor<64x1xi32> loc(#loc18)
    %24 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>> loc(#loc19)
    %25 = tt.addptr %24, %23 : tensor<64x1x!tt.ptr<f32, 1>>, tensor<64x1xi32> loc(#loc19)
    %26 = tt.broadcast %25 : (tensor<64x1x!tt.ptr<f32, 1>>) -> tensor<64x32x!tt.ptr<f32, 1>> loc(#loc20)
    %27 = tt.addptr %26, %17 : tensor<64x32x!tt.ptr<f32, 1>>, tensor<64x32xi32> loc(#loc20)
    tt.store %27, %21#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32> loc(#loc21)
    tt.return loc(#loc22)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc23 = loc(fused[#loc16, #loc3])


// -----// IR Dump Before TritonGPUCoalesce (tritongpu-coalesce) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked1> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked1> loc(#loc5)
    %2 = triton_gpu.convert_layout %0 : (tensor<64xi32, #blocked1>) -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc6)
    %4 = triton_gpu.convert_layout %3 : (tensor<64x1xi32, #blocked2>) -> tensor<64x1xi32, #blocked> loc(#loc7)
    %5 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc7)
    %6 = arith.muli %4, %5 : tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %8 = tt.addptr %7, %6 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc6)
    %9 = triton_gpu.convert_layout %0 : (tensor<64xi32, #blocked1>) -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> loc(#loc8)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x64xi32, #blocked3> loc(#loc8)
    %11 = tt.broadcast %8 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc8)
    %12 = tt.broadcast %10 : (tensor<1x64xi32, #blocked3>) -> tensor<64x64xi32, #blocked3> loc(#loc8)
    %13 = triton_gpu.convert_layout %12 : (tensor<64x64xi32, #blocked3>) -> tensor<64x64xi32, #blocked> loc(#loc8)
    %14 = tt.addptr %11, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc8)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc9)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked> loc(#loc9)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc10)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc10)
    %19 = triton_gpu.convert_layout %1 : (tensor<32xi32, #blocked1>) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> loc(#loc11)
    %20 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x32xi32, #blocked3> loc(#loc11)
    %21 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked> loc(#loc11)
    %22 = tt.broadcast %20 : (tensor<1x32xi32, #blocked3>) -> tensor<64x32xi32, #blocked3> loc(#loc11)
    %23 = triton_gpu.convert_layout %22 : (tensor<64x32xi32, #blocked3>) -> tensor<64x32xi32, #blocked> loc(#loc11)
    %24 = tt.addptr %21, %23 : tensor<64x32x!tt.ptr<f16, 1>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc11)
    %25 = arith.muli %arg4, %c64_i32 : i32 loc(#loc12)
    %26 = tt.splat %25 : (i32) -> tensor<64x32xi32, #blocked> loc(#loc13)
    %27:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %14, %arg9 = %24) -> (tensor<64x32xf32, #blocked>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked>)  : i32 {
      %34 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc14)
      %35 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked> loc(#loc15)
      %36 = triton_gpu.convert_layout %34 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked4}>> loc(#loc14)
      %37 = triton_gpu.convert_layout %35 : (tensor<64x32xf16, #blocked>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked4}>> loc(#loc15)
      %38 = triton_gpu.convert_layout %arg7 : (tensor<64x32xf32, #blocked>) -> tensor<64x32xf32, #blocked4> loc(#loc16)
      %39 = tt.dot %36, %37, %38 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked4}>> -> tensor<64x32xf32, #blocked4> loc(#loc24)
      %40 = triton_gpu.convert_layout %39 : (tensor<64x32xf32, #blocked4>) -> tensor<64x32xf32, #blocked> loc(#loc18)
      %41 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc2)
      %42 = tt.addptr %arg9, %26 : tensor<64x32x!tt.ptr<f16, 1>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc13)
      scf.yield %40, %41, %42 : tensor<64x32xf32, #blocked>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked> loc(#loc18)
    } loc(#loc1)
    %28 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc19)
    %29 = arith.muli %4, %28 : tensor<64x1xi32, #blocked> loc(#loc19)
    %30 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked> loc(#loc20)
    %31 = tt.addptr %30, %29 : tensor<64x1x!tt.ptr<f32, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc20)
    %32 = tt.broadcast %31 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked> loc(#loc21)
    %33 = tt.addptr %32, %23 : tensor<64x32x!tt.ptr<f32, 1>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc21)
    tt.store %33, %27#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #blocked> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1976:27)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc24 = loc(fused[#loc17, #loc3])


// -----// IR Dump Before TritonGPUPlanCTAPass (triton-nvidia-gpu-plan-cta) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked5 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked6 = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked7 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked1> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked1> loc(#loc5)
    %2 = triton_gpu.convert_layout %0 : (tensor<64xi32, #blocked1>) -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc6)
    %4 = triton_gpu.convert_layout %3 : (tensor<64x1xi32, #blocked2>) -> tensor<64x1xi32, #blocked> loc(#loc7)
    %5 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc7)
    %6 = arith.muli %4, %5 : tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %8 = tt.addptr %7, %6 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc6)
    %9 = triton_gpu.convert_layout %0 : (tensor<64xi32, #blocked1>) -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> loc(#loc8)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x64xi32, #blocked3> loc(#loc8)
    %11 = tt.broadcast %8 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc8)
    %12 = tt.broadcast %10 : (tensor<1x64xi32, #blocked3>) -> tensor<64x64xi32, #blocked3> loc(#loc8)
    %13 = triton_gpu.convert_layout %12 : (tensor<64x64xi32, #blocked3>) -> tensor<64x64xi32, #blocked> loc(#loc8)
    %14 = tt.addptr %11, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc8)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc9)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked> loc(#loc9)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc10)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc10)
    %19 = triton_gpu.convert_layout %1 : (tensor<32xi32, #blocked1>) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> loc(#loc11)
    %20 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x32xi32, #blocked3> loc(#loc11)
    %21 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked> loc(#loc11)
    %22 = tt.broadcast %20 : (tensor<1x32xi32, #blocked3>) -> tensor<64x32xi32, #blocked3> loc(#loc11)
    %23 = triton_gpu.convert_layout %22 : (tensor<64x32xi32, #blocked3>) -> tensor<64x32xi32, #blocked> loc(#loc11)
    %24 = tt.addptr %21, %23 : tensor<64x32x!tt.ptr<f16, 1>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc11)
    %25 = arith.muli %arg4, %c64_i32 : i32 loc(#loc12)
    %26 = tt.splat %25 : (i32) -> tensor<64x32xi32, #blocked> loc(#loc13)
    %27:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %14, %arg9 = %24) -> (tensor<64x32xf32, #blocked>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked>)  : i32 {
      %36 = triton_gpu.convert_layout %arg8 : (tensor<64x64x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked4> loc(#loc14)
      %37 = tt.load %36 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked4> loc(#loc14)
      %38 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #blocked4>) -> tensor<64x64xf16, #blocked> loc(#loc14)
      %39 = triton_gpu.convert_layout %arg9 : (tensor<64x32x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked5> loc(#loc15)
      %40 = tt.load %39 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked5> loc(#loc15)
      %41 = triton_gpu.convert_layout %40 : (tensor<64x32xf16, #blocked5>) -> tensor<64x32xf16, #blocked> loc(#loc15)
      %42 = triton_gpu.convert_layout %38 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked6}>> loc(#loc14)
      %43 = triton_gpu.convert_layout %41 : (tensor<64x32xf16, #blocked>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked6}>> loc(#loc15)
      %44 = triton_gpu.convert_layout %arg7 : (tensor<64x32xf32, #blocked>) -> tensor<64x32xf32, #blocked6> loc(#loc16)
      %45 = tt.dot %42, %43, %44 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked6}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked6}>> -> tensor<64x32xf32, #blocked6> loc(#loc24)
      %46 = triton_gpu.convert_layout %45 : (tensor<64x32xf32, #blocked6>) -> tensor<64x32xf32, #blocked> loc(#loc18)
      %47 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc2)
      %48 = tt.addptr %arg9, %26 : tensor<64x32x!tt.ptr<f16, 1>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc13)
      scf.yield %46, %47, %48 : tensor<64x32xf32, #blocked>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked> loc(#loc18)
    } loc(#loc1)
    %28 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc19)
    %29 = arith.muli %4, %28 : tensor<64x1xi32, #blocked> loc(#loc19)
    %30 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked> loc(#loc20)
    %31 = tt.addptr %30, %29 : tensor<64x1x!tt.ptr<f32, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc20)
    %32 = tt.broadcast %31 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked> loc(#loc21)
    %33 = tt.addptr %32, %23 : tensor<64x32x!tt.ptr<f32, 1>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc21)
    %34 = triton_gpu.convert_layout %33 : (tensor<64x32x!tt.ptr<f32, 1>, #blocked>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked7> loc(#loc22)
    %35 = triton_gpu.convert_layout %27#0 : (tensor<64x32xf32, #blocked>) -> tensor<64x32xf32, #blocked7> loc(#loc22)
    tt.store %34, %35 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #blocked7> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1976:27)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc24 = loc(fused[#loc17, #loc3])


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0], CTAsPerCGA = [1], CTASplitNum = [1], CTAOrder = [0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [64, 1], warpsPerCTA = [4, 1], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 64], warpsPerCTA = [1, 4], order = [0, 1], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked5 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked6 = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked7 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc2)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked1> loc(#loc4)
    %1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked1> loc(#loc5)
    %2 = triton_gpu.convert_layout %0 : (tensor<64xi32, #blocked1>) -> tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc6)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc6)
    %4 = triton_gpu.convert_layout %3 : (tensor<64x1xi32, #blocked2>) -> tensor<64x1xi32, #blocked> loc(#loc7)
    %5 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc7)
    %6 = arith.muli %4, %5 : tensor<64x1xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %8 = tt.addptr %7, %6 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc6)
    %9 = triton_gpu.convert_layout %0 : (tensor<64xi32, #blocked1>) -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> loc(#loc8)
    %10 = tt.expand_dims %9 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x64xi32, #blocked3> loc(#loc8)
    %11 = tt.broadcast %8 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc8)
    %12 = tt.broadcast %10 : (tensor<1x64xi32, #blocked3>) -> tensor<64x64xi32, #blocked3> loc(#loc8)
    %13 = triton_gpu.convert_layout %12 : (tensor<64x64xi32, #blocked3>) -> tensor<64x64xi32, #blocked> loc(#loc8)
    %14 = tt.addptr %11, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc8)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc9)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked> loc(#loc9)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc10)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc10)
    %19 = triton_gpu.convert_layout %1 : (tensor<32xi32, #blocked1>) -> tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> loc(#loc11)
    %20 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x32xi32, #blocked3> loc(#loc11)
    %21 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked> loc(#loc11)
    %22 = tt.broadcast %20 : (tensor<1x32xi32, #blocked3>) -> tensor<64x32xi32, #blocked3> loc(#loc11)
    %23 = triton_gpu.convert_layout %22 : (tensor<64x32xi32, #blocked3>) -> tensor<64x32xi32, #blocked> loc(#loc11)
    %24 = tt.addptr %21, %23 : tensor<64x32x!tt.ptr<f16, 1>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc11)
    %25 = arith.muli %arg4, %c64_i32 : i32 loc(#loc12)
    %26 = tt.splat %25 : (i32) -> tensor<64x32xi32, #blocked> loc(#loc13)
    %27:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %14, %arg9 = %24) -> (tensor<64x32xf32, #blocked>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked>)  : i32 {
      %36 = triton_gpu.convert_layout %arg8 : (tensor<64x64x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked4> loc(#loc14)
      %37 = tt.load %36 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked4> loc(#loc14)
      %38 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #blocked4>) -> tensor<64x64xf16, #blocked> loc(#loc14)
      %39 = triton_gpu.convert_layout %arg9 : (tensor<64x32x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked5> loc(#loc15)
      %40 = tt.load %39 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked5> loc(#loc15)
      %41 = triton_gpu.convert_layout %40 : (tensor<64x32xf16, #blocked5>) -> tensor<64x32xf16, #blocked> loc(#loc15)
      %42 = triton_gpu.convert_layout %38 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked6}>> loc(#loc14)
      %43 = triton_gpu.convert_layout %41 : (tensor<64x32xf16, #blocked>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked6}>> loc(#loc15)
      %44 = triton_gpu.convert_layout %arg7 : (tensor<64x32xf32, #blocked>) -> tensor<64x32xf32, #blocked6> loc(#loc16)
      %45 = tt.dot %42, %43, %44 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked6}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked6}>> -> tensor<64x32xf32, #blocked6> loc(#loc24)
      %46 = triton_gpu.convert_layout %45 : (tensor<64x32xf32, #blocked6>) -> tensor<64x32xf32, #blocked> loc(#loc18)
      %47 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc2)
      %48 = tt.addptr %arg9, %26 : tensor<64x32x!tt.ptr<f16, 1>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc13)
      scf.yield %46, %47, %48 : tensor<64x32xf32, #blocked>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked> loc(#loc18)
    } loc(#loc1)
    %28 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc19)
    %29 = arith.muli %4, %28 : tensor<64x1xi32, #blocked> loc(#loc19)
    %30 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked> loc(#loc20)
    %31 = tt.addptr %30, %29 : tensor<64x1x!tt.ptr<f32, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc20)
    %32 = tt.broadcast %31 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked> loc(#loc21)
    %33 = tt.addptr %32, %23 : tensor<64x32x!tt.ptr<f32, 1>, #blocked>, tensor<64x32xi32, #blocked> loc(#loc21)
    %34 = triton_gpu.convert_layout %33 : (tensor<64x32x!tt.ptr<f32, 1>, #blocked>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked7> loc(#loc22)
    %35 = triton_gpu.convert_layout %27#0 : (tensor<64x32xf32, #blocked>) -> tensor<64x32xf32, #blocked7> loc(#loc22)
    tt.store %34, %35 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #blocked7> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1971:26)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1972:26)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1976:27)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc21 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc22 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc23 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc24 = loc(fused[#loc17, #loc3])


// -----// IR Dump Before TritonAMDGPUAccelerateMatmul (tritonamdgpu-accelerate-matmul) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #blocked1> loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %c128_i32 = arith.constant 128 : i32 loc(#loc3)
    %c0_i32 = arith.constant 0 : i32 loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>) -> tensor<64x1xi32, #blocked3> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked2> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked2> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked2> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x32xi32, #blocked2> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x32xi32, #blocked3> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked2> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked2>) -> tensor<64x32xi32, #blocked2> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #blocked3>) -> tensor<64x32xi32, #blocked3> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked2> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #blocked1>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked2>)  : i32 {
      %37 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %38 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked2> loc(#loc13)
      %39 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked1}>> loc(#loc12)
      %40 = triton_gpu.convert_layout %38 : (tensor<64x32xf16, #blocked2>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked1}>> loc(#loc13)
      %41 = tt.dot %39, %40, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked1}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked1}>> -> tensor<64x32xf32, #blocked1> loc(#loc21)
      %42 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc1)
      %43 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc11)
      scf.yield %41, %42, %43 : tensor<64x32xf32, #blocked1>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked2> loc(#loc15)
    } loc(#loc3)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked3> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #blocked3> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked3> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #blocked3>, tensor<64x1xi32, #blocked3> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked3>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked3> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #blocked3>, tensor<64x32xi32, #blocked3> loc(#loc18)
    %36 = triton_gpu.convert_layout %29#0 : (tensor<64x32xf32, #blocked1>) -> tensor<64x32xf32, #blocked3> loc(#loc19)
    tt.store %35, %36 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #blocked3> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc2])


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #blocked1> loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %c128_i32 = arith.constant 128 : i32 loc(#loc3)
    %c0_i32 = arith.constant 0 : i32 loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>) -> tensor<64x1xi32, #blocked3> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked2> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked2> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked2> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x32xi32, #blocked2> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>>) -> tensor<1x32xi32, #blocked3> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked2> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked2>) -> tensor<64x32xi32, #blocked2> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #blocked3>) -> tensor<64x32xi32, #blocked3> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked2> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst_0, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #blocked1>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked2>)  : i32 {
      %37 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %38 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked2> loc(#loc13)
      %39 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked1}>> loc(#loc12)
      %40 = triton_gpu.convert_layout %38 : (tensor<64x32xf16, #blocked2>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked1}>> loc(#loc13)
      %41 = triton_gpu.convert_layout %arg7 : (tensor<64x32xf32, #blocked1>) -> tensor<64x32xf32, #mfma> loc(#loc2)
      %42 = triton_gpu.convert_layout %39 : (tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #blocked1}>>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %43 = triton_gpu.convert_layout %40 : (tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #blocked1}>>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %44 = tt.dot %42, %43, %41 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %45 = triton_gpu.convert_layout %44 : (tensor<64x32xf32, #mfma>) -> tensor<64x32xf32, #blocked1> loc(#loc21)
      %46 = tt.addptr %arg8, %cst : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc1)
      %47 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc11)
      scf.yield %45, %46, %47 : tensor<64x32xf32, #blocked1>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked2> loc(#loc15)
    } loc(#loc3)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked3> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #blocked3> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked3> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #blocked3>, tensor<64x1xi32, #blocked3> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked3>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked3> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #blocked3>, tensor<64x32xi32, #blocked3> loc(#loc18)
    %36 = triton_gpu.convert_layout %29#0 : (tensor<64x32xf32, #blocked1>) -> tensor<64x32xf32, #blocked3> loc(#loc19)
    tt.store %35, %36 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #blocked3> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc2])


// -----// IR Dump Before TritonGPUOptimizeEpilogue (tritongpu-optimize-epilogue) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x32xi32, #blocked2> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #blocked2>) -> tensor<64x32xi32, #blocked2> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %37 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %38 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %39 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %40 = triton_gpu.convert_layout %38 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %41 = tt.dot %39, %40, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %42 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %43 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %41, %42, %43 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked2> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #blocked2> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked2> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked2> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc18)
    %36 = triton_gpu.convert_layout %29#0 : (tensor<64x32xf32, #mfma>) -> tensor<64x32xf32, #blocked2> loc(#loc19)
    tt.store %35, %36 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #blocked2> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x32xi32, #blocked2> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #blocked2>) -> tensor<64x32xi32, #blocked2> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %37 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %38 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %39 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %40 = triton_gpu.convert_layout %38 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %41 = tt.dot %39, %40, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %42 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %43 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %41, %42, %43 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked2> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #blocked2> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked2> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked2> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc18)
    %36 = triton_gpu.convert_layout %35 : (tensor<64x32x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    tt.store %36, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before TritonGPUPipeline (tritongpu-pipeline) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x32xi32, #blocked2> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #blocked2>) -> tensor<64x32xi32, #blocked2> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %37 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %38 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %39 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %40 = triton_gpu.convert_layout %38 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %41 = tt.dot %39, %40, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %42 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %43 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %41, %42, %43 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked2> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #blocked2> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked2> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked2> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc18)
    %36 = triton_gpu.convert_layout %35 : (tensor<64x32x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    tt.store %36, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before MaterializeLoadStore (triton-nvidia-gpu-materialize-load-store) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x32xi32, #blocked2> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #blocked2>) -> tensor<64x32xi32, #blocked2> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %37 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %38 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %39 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %40 = triton_gpu.convert_layout %38 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %41 = tt.dot %39, %40, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %42 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %43 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %41, %42, %43 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked2> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #blocked2> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked2> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked2> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc18)
    %36 = triton_gpu.convert_layout %35 : (tensor<64x32x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    tt.store %36, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before TritonGPUOptimizeDotOperands (tritongpu-optimize-dot-operands) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x32xi32, #blocked2> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #blocked2>) -> tensor<64x32xi32, #blocked2> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %37 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %38 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %39 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %40 = triton_gpu.convert_layout %38 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %41 = tt.dot %39, %40, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %42 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %43 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %41, %42, %43 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked2> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #blocked2> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked2> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked2> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc18)
    %36 = triton_gpu.convert_layout %35 : (tensor<64x32x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    tt.store %36, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before TritonGPURemoveLayoutConversions (tritongpu-remove-layout-conversions) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>>) -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>>) -> tensor<1x32xi32, #blocked2> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #blocked2>) -> tensor<64x32xi32, #blocked2> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %37 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %38 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %39 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %40 = triton_gpu.convert_layout %38 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %41 = tt.dot %39, %40, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %42 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %43 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %41, %42, %43 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #blocked2> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #blocked2> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #blocked2> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #blocked2> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #blocked2>, tensor<64x32xi32, #blocked2> loc(#loc18)
    %36 = triton_gpu.convert_layout %35 : (tensor<64x32x!tt.ptr<f32, 1>, #blocked2>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    tt.store %36, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before TritonGPUDecomposeConversions (tritongpu-decompose-conversions) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xi32, #mfma> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>>) -> tensor<1x32xi32, #mfma> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #mfma>) -> tensor<64x32xi32, #mfma> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %36 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %37 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %38 = triton_gpu.convert_layout %36 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %39 = triton_gpu.convert_layout %37 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %40 = tt.dot %38, %39, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %41 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %42 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %40, %41, %42 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #mfma> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #mfma> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #mfma> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #mfma>, tensor<64x1xi32, #mfma> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #mfma>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #mfma>, tensor<64x32xi32, #mfma> loc(#loc18)
    tt.store %35, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before TritonGPUWSFixupMissingAttrs (triton-nvidia-gpu-ws-fixup-missing-attrs) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xi32, #mfma> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>>) -> tensor<1x32xi32, #mfma> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #mfma>) -> tensor<64x32xi32, #mfma> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %36 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %37 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %38 = triton_gpu.convert_layout %36 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #shared> loc(#loc12)
      %39 = triton_gpu.convert_layout %38 : (tensor<64x64xf16, #shared>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %40 = triton_gpu.convert_layout %37 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #shared1> loc(#loc13)
      %41 = triton_gpu.convert_layout %40 : (tensor<64x32xf16, #shared1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %42 = tt.dot %39, %41, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %43 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %44 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %42, %43, %44 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #mfma> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #mfma> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #mfma> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #mfma>, tensor<64x1xi32, #mfma> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #mfma>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #mfma>, tensor<64x32xi32, #mfma> loc(#loc18)
    tt.store %35, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before TritonGPUReorderInstructions (tritongpu-reorder-instructions) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xi32, #mfma> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>>) -> tensor<1x32xi32, #mfma> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #mfma>) -> tensor<64x32xi32, #mfma> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %36 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %37 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %38 = triton_gpu.convert_layout %36 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #shared> loc(#loc12)
      %39 = triton_gpu.convert_layout %38 : (tensor<64x64xf16, #shared>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %40 = triton_gpu.convert_layout %37 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #shared1> loc(#loc13)
      %41 = triton_gpu.convert_layout %40 : (tensor<64x32xf16, #shared1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %42 = tt.dot %39, %41, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %43 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %44 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %42, %43, %44 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #mfma> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #mfma> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #mfma> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #mfma>, tensor<64x1xi32, #mfma> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #mfma>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #mfma>, tensor<64x32xi32, #mfma> loc(#loc18)
    tt.store %35, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xi32, #mfma> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>>) -> tensor<1x32xi32, #mfma> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #mfma>) -> tensor<64x32xi32, #mfma> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %36 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %37 = triton_gpu.convert_layout %36 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #shared> loc(#loc12)
      %38 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #shared>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %39 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %40 = triton_gpu.convert_layout %39 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #shared1> loc(#loc13)
      %41 = triton_gpu.convert_layout %40 : (tensor<64x32xf16, #shared1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %42 = tt.dot %38, %41, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %43 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %44 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %42, %43, %44 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #mfma> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #mfma> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #mfma> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #mfma>, tensor<64x1xi32, #mfma> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #mfma>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #mfma>, tensor<64x32xi32, #mfma> loc(#loc18)
    tt.store %35, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xi32, #mfma> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>>) -> tensor<1x32xi32, #mfma> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #mfma>) -> tensor<64x32xi32, #mfma> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %36 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %37 = triton_gpu.convert_layout %36 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #shared> loc(#loc12)
      %38 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #shared>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %39 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %40 = triton_gpu.convert_layout %39 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #shared1> loc(#loc13)
      %41 = triton_gpu.convert_layout %40 : (tensor<64x32xf16, #shared1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %42 = tt.dot %38, %41, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %43 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %44 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %42, %43, %44 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #mfma> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #mfma> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #mfma> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #mfma>, tensor<64x1xi32, #mfma> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #mfma>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #mfma>, tensor<64x32xi32, #mfma> loc(#loc18)
    tt.store %35, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump Before TritonGPUWSFixupMissingAttrs (triton-nvidia-gpu-ws-fixup-missing-attrs) ('builtin.module' operation) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xi32, #mfma> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>>) -> tensor<1x32xi32, #mfma> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #mfma>) -> tensor<64x32xi32, #mfma> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    %29:3 = scf.for %arg6 = %c0_i32 to %c128_i32 step %c64_i32 iter_args(%arg7 = %cst, %arg8 = %14, %arg9 = %26) -> (tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>)  : i32 {
      %36 = tt.load %arg8 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
      %37 = triton_gpu.convert_layout %36 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #shared> loc(#loc12)
      %38 = triton_gpu.convert_layout %37 : (tensor<64x64xf16, #shared>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
      %39 = tt.load %arg9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
      %40 = triton_gpu.convert_layout %39 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #shared1> loc(#loc13)
      %41 = triton_gpu.convert_layout %40 : (tensor<64x32xf16, #shared1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
      %42 = tt.dot %38, %41, %arg7 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc21)
      %43 = tt.addptr %arg8, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
      %44 = tt.addptr %arg9, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
      scf.yield %42, %43, %44 : tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc15)
    } loc(#loc2)
    %30 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #mfma> loc(#loc16)
    %31 = arith.muli %5, %30 : tensor<64x1xi32, #mfma> loc(#loc16)
    %32 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #mfma> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<64x1x!tt.ptr<f32, 1>, #mfma>, tensor<64x1xi32, #mfma> loc(#loc17)
    %34 = tt.broadcast %33 : (tensor<64x1x!tt.ptr<f32, 1>, #mfma>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc18)
    %35 = tt.addptr %34, %25 : tensor<64x32x!tt.ptr<f32, 1>, #mfma>, tensor<64x32xi32, #mfma> loc(#loc18)
    tt.store %35, %29#0 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:8)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc20 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc21 = loc(fused[#loc14, #loc1])


// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, triton_gpu.externs = {library_0 = "/triton/python/triton/third_party/hip/lib/bitcode/opencl.bc", library_1 = "/triton/python/triton/third_party/hip/lib/bitcode/ocml.bc", library_2 = "/triton/python/triton/third_party/hip/lib/bitcode/ockl.bc", library_3 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !tt.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !tt.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x32xf32, #mfma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %c128_i32 = arith.constant 128 : i32 loc(#loc2)
    %c64_i32 = arith.constant 64 : i32 loc(#loc2)
    %cst_0 = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>> loc(#loc4)
    %3 = tt.expand_dims %0 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.expand_dims %1 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #mfma}>>) -> tensor<64x1xi32, #mfma> loc(#loc4)
    %6 = tt.splat %arg3 : (i32) -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = arith.muli %3, %6 : tensor<64x1xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg0 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked> loc(#loc4)
    %9 = tt.addptr %8, %7 : tensor<64x1x!tt.ptr<f16, 1>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc4)
    %10 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : (tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x64xi32, #blocked> loc(#loc6)
    %12 = tt.broadcast %9 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked>) -> tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc6)
    %13 = tt.broadcast %11 : (tensor<1x64xi32, #blocked>) -> tensor<64x64xi32, #blocked> loc(#loc6)
    %14 = tt.addptr %12, %13 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc6)
    %15 = tt.splat %arg4 : (i32) -> tensor<64x1xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %4, %15 : tensor<64x1xi32, #blocked1> loc(#loc7)
    %17 = tt.splat %arg1 : (!tt.ptr<f16, 1>) -> tensor<64x1x!tt.ptr<f16, 1>, #blocked1> loc(#loc8)
    %18 = tt.addptr %17, %16 : tensor<64x1x!tt.ptr<f16, 1>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc8)
    %19 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc9)
    %20 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>> loc(#loc9)
    %21 = tt.expand_dims %19 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1> loc(#loc9)
    %22 = tt.expand_dims %20 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #mfma}>>) -> tensor<1x32xi32, #mfma> loc(#loc9)
    %23 = tt.broadcast %18 : (tensor<64x1x!tt.ptr<f16, 1>, #blocked1>) -> tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc9)
    %24 = tt.broadcast %21 : (tensor<1x32xi32, #blocked1>) -> tensor<64x32xi32, #blocked1> loc(#loc9)
    %25 = tt.broadcast %22 : (tensor<1x32xi32, #mfma>) -> tensor<64x32xi32, #mfma> loc(#loc9)
    %26 = tt.addptr %23, %24 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc9)
    %27 = arith.muli %arg4, %c64_i32 : i32 loc(#loc10)
    %28 = tt.splat %27 : (i32) -> tensor<64x32xi32, #blocked1> loc(#loc11)
    cf.br ^bb1(%c0_i32, %cst, %14, %26 : i32, tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>) loc(#loc2)
  ^bb1(%29: i32 loc("/triton/python/test/unit/language/test_core_amd.py":1977:25), %30: tensor<64x32xf32, #mfma> loc("/triton/python/test/unit/language/test_core_amd.py":1980:33), %31: tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc("/triton/python/test/unit/language/test_core_amd.py":1974:51), %32: tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)):  // 2 preds: ^bb0, ^bb2
    %33 = arith.cmpi slt, %29, %c128_i32 : i32 loc(#loc2)
    cf.cond_br %33, ^bb2, ^bb3 loc(#loc2)
  ^bb2:  // pred: ^bb1
    %34 = tt.load %31 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x64xf16, #blocked> loc(#loc12)
    %35 = triton_gpu.convert_layout %34 : (tensor<64x64xf16, #blocked>) -> tensor<64x64xf16, #shared> loc(#loc12)
    %36 = triton_gpu.convert_layout %35 : (tensor<64x64xf16, #shared>) -> tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> loc(#loc12)
    %37 = tt.load %32 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x32xf16, #blocked1> loc(#loc13)
    %38 = triton_gpu.convert_layout %37 : (tensor<64x32xf16, #blocked1>) -> tensor<64x32xf16, #shared1> loc(#loc13)
    %39 = triton_gpu.convert_layout %38 : (tensor<64x32xf16, #shared1>) -> tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> loc(#loc13)
    %40 = tt.dot %36, %39, %30 {allowTF32 = true, maxNumImpreciseAcc = 0 : i32} : tensor<64x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mfma, kWidth = 4}>> * tensor<64x32xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mfma, kWidth = 4}>> -> tensor<64x32xf32, #mfma> loc(#loc20)
    %41 = tt.addptr %31, %cst_0 : tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc3)
    %42 = tt.addptr %32, %28 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1>, tensor<64x32xi32, #blocked1> loc(#loc11)
    %43 = arith.addi %29, %c64_i32 : i32 loc(#loc2)
    cf.br ^bb1(%43, %40, %41, %42 : i32, tensor<64x32xf32, #mfma>, tensor<64x64x!tt.ptr<f16, 1>, #blocked>, tensor<64x32x!tt.ptr<f16, 1>, #blocked1>) loc(#loc2)
  ^bb3:  // pred: ^bb1
    %44 = tt.splat %arg5 : (i32) -> tensor<64x1xi32, #mfma> loc(#loc15)
    %45 = arith.muli %5, %44 : tensor<64x1xi32, #mfma> loc(#loc15)
    %46 = tt.splat %arg2 : (!tt.ptr<f32, 1>) -> tensor<64x1x!tt.ptr<f32, 1>, #mfma> loc(#loc16)
    %47 = tt.addptr %46, %45 : tensor<64x1x!tt.ptr<f32, 1>, #mfma>, tensor<64x1xi32, #mfma> loc(#loc16)
    %48 = tt.broadcast %47 : (tensor<64x1x!tt.ptr<f32, 1>, #mfma>) -> tensor<64x32x!tt.ptr<f32, 1>, #mfma> loc(#loc17)
    %49 = tt.addptr %48, %25 : tensor<64x32x!tt.ptr<f32, 1>, #mfma>, tensor<64x32xi32, #mfma> loc(#loc17)
    tt.store %49, %30 {cache = 1 : i32, evict = 1 : i32} : tensor<64x32xf32, #mfma> loc(#loc18)
    tt.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc20 = loc(fused[#loc14, #loc1])


// -----// IR Dump After ConvertTritonGPUToLLVM (convert-triton-gpu-to-llvm) //----- //
#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [16, 4], warpsPerCTA = [4, 1], order = [1, 0], CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [0, 1]}>
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#mfma = #triton_gpu.mfma<{nonKDim = 32, warpsPerCTA = [2, 2], isTransposed = false, CTAsPerCGA = [1, 1], CTASplitNum = [1, 1], CTAOrder = [1, 0]}>
module attributes {"triton_gpu.compute-capability" = 0 : i32, triton_gpu.externs = {library_0 = "/triton/python/triton/third_party/hip/lib/bitcode/opencl.bc", library_1 = "/triton/python/triton/third_party/hip/lib/bitcode/ocml.bc", library_2 = "/triton/python/triton/third_party/hip/lib/bitcode/ockl.bc", library_3 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 8192 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public", "triton_gpu.num-tma-load" = 0 : i32, "triton_gpu.num-tma-store" = 0 : i32} {
    %0 = rocdl.workitem.id.x : i32 loc(#loc1)
    %1 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %2 = llvm.urem %0, %1  : i32 loc(#loc1)
    %3 = llvm.udiv %0, %1  : i32 loc(#loc1)
    %4 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %5 = llvm.urem %3, %4  : i32 loc(#loc1)
    %6 = llvm.udiv %3, %4  : i32 loc(#loc1)
    %7 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %8 = llvm.urem %6, %7  : i32 loc(#loc1)
    %9 = llvm.udiv %6, %7  : i32 loc(#loc1)
    %10 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %11 = llvm.urem %2, %10  : i32 loc(#loc1)
    %12 = llvm.udiv %2, %10  : i32 loc(#loc1)
    %13 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %14 = llvm.urem %12, %13  : i32 loc(#loc1)
    %15 = llvm.udiv %12, %13  : i32 loc(#loc1)
    %16 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %17 = llvm.urem %8, %16  : i32 loc(#loc1)
    %18 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %19 = llvm.urem %14, %18  : i32 loc(#loc1)
    %20 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %21 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %22 = llvm.mul %17, %20  : i32 loc(#loc1)
    %23 = llvm.add %19, %22  : i32 loc(#loc1)
    %24 = llvm.mul %21, %23  : i32 loc(#loc1)
    %25 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %26 = llvm.urem %5, %25  : i32 loc(#loc1)
    %27 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %28 = llvm.urem %11, %27  : i32 loc(#loc1)
    %29 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %30 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %31 = llvm.mul %26, %29  : i32 loc(#loc1)
    %32 = llvm.add %28, %31  : i32 loc(#loc1)
    %33 = llvm.mul %30, %32  : i32 loc(#loc1)
    %34 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %35 = nvgpu.cluster_id loc(#loc1)
    %36 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %37 = llvm.urem %34, %36  : i32 loc(#loc1)
    %38 = llvm.udiv %34, %36  : i32 loc(#loc1)
    %39 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %40 = llvm.urem %38, %39  : i32 loc(#loc1)
    %41 = llvm.udiv %38, %39  : i32 loc(#loc1)
    %42 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %43 = llvm.urem %37, %42  : i32 loc(#loc1)
    %44 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %45 = llvm.urem %40, %44  : i32 loc(#loc1)
    %46 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %47 = llvm.mul %43, %46  : i32 loc(#loc1)
    %48 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %49 = llvm.mul %45, %48  : i32 loc(#loc1)
    %50 = llvm.add %24, %47  : i32 loc(#loc1)
    %51 = llvm.add %33, %49  : i32 loc(#loc1)
    %52 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %53 = llvm.add %50, %52  : i32 loc(#loc1)
    %54 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %55 = llvm.add %50, %54  : i32 loc(#loc1)
    %56 = rocdl.workitem.id.x : i32 loc(#loc1)
    %57 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %58 = llvm.urem %56, %57  : i32 loc(#loc1)
    %59 = llvm.udiv %56, %57  : i32 loc(#loc1)
    %60 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %61 = llvm.urem %59, %60  : i32 loc(#loc1)
    %62 = llvm.udiv %59, %60  : i32 loc(#loc1)
    %63 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %64 = llvm.urem %62, %63  : i32 loc(#loc1)
    %65 = llvm.udiv %62, %63  : i32 loc(#loc1)
    %66 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %67 = llvm.urem %58, %66  : i32 loc(#loc1)
    %68 = llvm.udiv %58, %66  : i32 loc(#loc1)
    %69 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %70 = llvm.urem %68, %69  : i32 loc(#loc1)
    %71 = llvm.udiv %68, %69  : i32 loc(#loc1)
    %72 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %73 = llvm.urem %64, %72  : i32 loc(#loc1)
    %74 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %75 = llvm.urem %70, %74  : i32 loc(#loc1)
    %76 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %77 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %78 = llvm.mul %73, %76  : i32 loc(#loc1)
    %79 = llvm.add %75, %78  : i32 loc(#loc1)
    %80 = llvm.mul %77, %79  : i32 loc(#loc1)
    %81 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %82 = llvm.urem %61, %81  : i32 loc(#loc1)
    %83 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %84 = llvm.urem %67, %83  : i32 loc(#loc1)
    %85 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %86 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %87 = llvm.mul %82, %85  : i32 loc(#loc1)
    %88 = llvm.add %84, %87  : i32 loc(#loc1)
    %89 = llvm.mul %86, %88  : i32 loc(#loc1)
    %90 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %91 = nvgpu.cluster_id loc(#loc1)
    %92 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %93 = llvm.urem %90, %92  : i32 loc(#loc1)
    %94 = llvm.udiv %90, %92  : i32 loc(#loc1)
    %95 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %96 = llvm.urem %94, %95  : i32 loc(#loc1)
    %97 = llvm.udiv %94, %95  : i32 loc(#loc1)
    %98 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %99 = llvm.urem %93, %98  : i32 loc(#loc1)
    %100 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %101 = llvm.urem %96, %100  : i32 loc(#loc1)
    %102 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %103 = llvm.mul %99, %102  : i32 loc(#loc1)
    %104 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %105 = llvm.mul %101, %104  : i32 loc(#loc1)
    %106 = llvm.add %80, %103  : i32 loc(#loc1)
    %107 = llvm.add %89, %105  : i32 loc(#loc1)
    %108 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %109 = llvm.add %106, %108  : i32 loc(#loc1)
    %110 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %111 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %112 = rocdl.workitem.id.x : i32 loc(#loc1)
    %113 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %114 = llvm.urem %112, %113  : i32 loc(#loc1)
    %115 = llvm.udiv %112, %113  : i32 loc(#loc1)
    %116 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %117 = llvm.urem %115, %110  : i32 loc(#loc1)
    %118 = llvm.urem %117, %116  : i32 loc(#loc1)
    %119 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %120 = llvm.udiv %115, %110  : i32 loc(#loc1)
    %121 = llvm.urem %120, %111  : i32 loc(#loc1)
    %122 = llvm.urem %121, %119  : i32 loc(#loc1)
    %123 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %124 = llvm.mul %118, %123  : i32 loc(#loc1)
    %125 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %126 = llvm.mul %122, %125  : i32 loc(#loc1)
    %127 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %128 = llvm.udiv %114, %127  : i32 loc(#loc1)
    %129 = llvm.mlir.constant(4 : i32) : i32 loc(#loc1)
    %130 = llvm.mul %129, %128  : i32 loc(#loc1)
    %131 = llvm.add %130, %124  : i32 loc(#loc1)
    %132 = llvm.mlir.constant(32 : i32) : i32 loc(#loc1)
    %133 = llvm.urem %114, %132  : i32 loc(#loc1)
    %134 = llvm.add %133, %126  : i32 loc(#loc1)
    %135 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %136 = nvgpu.cluster_id loc(#loc1)
    %137 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %138 = llvm.urem %135, %137  : i32 loc(#loc1)
    %139 = llvm.udiv %135, %137  : i32 loc(#loc1)
    %140 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %141 = llvm.urem %139, %140  : i32 loc(#loc1)
    %142 = llvm.udiv %139, %140  : i32 loc(#loc1)
    %143 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %144 = llvm.urem %141, %143  : i32 loc(#loc1)
    %145 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %146 = llvm.urem %138, %145  : i32 loc(#loc1)
    %147 = llvm.mlir.constant(64 : i32) : i32 loc(#loc1)
    %148 = llvm.mul %144, %147  : i32 loc(#loc1)
    %149 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %150 = llvm.mul %146, %149  : i32 loc(#loc1)
    %151 = llvm.add %131, %148  : i32 loc(#loc1)
    %152 = llvm.add %134, %150  : i32 loc(#loc1)
    %153 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %154 = llvm.add %151, %153  : i32 loc(#loc1)
    %155 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %156 = llvm.add %151, %155  : i32 loc(#loc1)
    %157 = llvm.mlir.constant(2 : i32) : i32 loc(#loc1)
    %158 = llvm.add %151, %157  : i32 loc(#loc1)
    %159 = llvm.mlir.constant(3 : i32) : i32 loc(#loc1)
    %160 = llvm.add %151, %159  : i32 loc(#loc1)
    %161 = llvm.mlir.constant(8 : i32) : i32 loc(#loc1)
    %162 = llvm.add %151, %161  : i32 loc(#loc1)
    %163 = llvm.mlir.constant(9 : i32) : i32 loc(#loc1)
    %164 = llvm.add %151, %163  : i32 loc(#loc1)
    %165 = llvm.mlir.constant(10 : i32) : i32 loc(#loc1)
    %166 = llvm.add %151, %165  : i32 loc(#loc1)
    %167 = llvm.mlir.constant(11 : i32) : i32 loc(#loc1)
    %168 = llvm.add %151, %167  : i32 loc(#loc1)
    %169 = llvm.mlir.constant(16 : i32) : i32 loc(#loc1)
    %170 = llvm.add %151, %169  : i32 loc(#loc1)
    %171 = llvm.mlir.constant(17 : i32) : i32 loc(#loc1)
    %172 = llvm.add %151, %171  : i32 loc(#loc1)
    %173 = llvm.mlir.constant(18 : i32) : i32 loc(#loc1)
    %174 = llvm.add %151, %173  : i32 loc(#loc1)
    %175 = llvm.mlir.constant(19 : i32) : i32 loc(#loc1)
    %176 = llvm.add %151, %175  : i32 loc(#loc1)
    %177 = llvm.mlir.constant(24 : i32) : i32 loc(#loc1)
    %178 = llvm.add %151, %177  : i32 loc(#loc1)
    %179 = llvm.mlir.constant(25 : i32) : i32 loc(#loc1)
    %180 = llvm.add %151, %179  : i32 loc(#loc1)
    %181 = llvm.mlir.constant(26 : i32) : i32 loc(#loc1)
    %182 = llvm.add %151, %181  : i32 loc(#loc1)
    %183 = llvm.mlir.constant(27 : i32) : i32 loc(#loc1)
    %184 = llvm.add %151, %183  : i32 loc(#loc1)
    %185 = rocdl.workitem.id.x : i32 loc(#loc2)
    %186 = llvm.mlir.constant(64 : i32) : i32 loc(#loc2)
    %187 = llvm.urem %185, %186  : i32 loc(#loc2)
    %188 = llvm.udiv %185, %186  : i32 loc(#loc2)
    %189 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %190 = llvm.urem %188, %189  : i32 loc(#loc2)
    %191 = llvm.udiv %188, %189  : i32 loc(#loc2)
    %192 = llvm.mlir.constant(4 : i32) : i32 loc(#loc2)
    %193 = llvm.urem %191, %192  : i32 loc(#loc2)
    %194 = llvm.udiv %191, %192  : i32 loc(#loc2)
    %195 = llvm.mlir.constant(8 : i32) : i32 loc(#loc2)
    %196 = llvm.urem %187, %195  : i32 loc(#loc2)
    %197 = llvm.udiv %187, %195  : i32 loc(#loc2)
    %198 = llvm.mlir.constant(8 : i32) : i32 loc(#loc2)
    %199 = llvm.urem %197, %198  : i32 loc(#loc2)
    %200 = llvm.udiv %197, %198  : i32 loc(#loc2)
    %201 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %202 = llvm.urem %193, %201  : i32 loc(#loc2)
    %203 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %204 = llvm.urem %199, %203  : i32 loc(#loc2)
    %205 = llvm.mlir.constant(8 : i32) : i32 loc(#loc2)
    %206 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %207 = llvm.mul %202, %205  : i32 loc(#loc2)
    %208 = llvm.add %204, %207  : i32 loc(#loc2)
    %209 = llvm.mul %206, %208  : i32 loc(#loc2)
    %210 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %211 = llvm.urem %190, %210  : i32 loc(#loc2)
    %212 = llvm.mlir.constant(8 : i32) : i32 loc(#loc2)
    %213 = llvm.urem %196, %212  : i32 loc(#loc2)
    %214 = llvm.mlir.constant(8 : i32) : i32 loc(#loc2)
    %215 = llvm.mlir.constant(8 : i32) : i32 loc(#loc2)
    %216 = llvm.mul %211, %214  : i32 loc(#loc2)
    %217 = llvm.add %213, %216  : i32 loc(#loc2)
    %218 = llvm.mul %215, %217  : i32 loc(#loc2)
    %219 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %220 = nvgpu.cluster_id loc(#loc2)
    %221 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %222 = llvm.urem %219, %221  : i32 loc(#loc2)
    %223 = llvm.udiv %219, %221  : i32 loc(#loc2)
    %224 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %225 = llvm.urem %223, %224  : i32 loc(#loc2)
    %226 = llvm.udiv %223, %224  : i32 loc(#loc2)
    %227 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %228 = llvm.urem %222, %227  : i32 loc(#loc2)
    %229 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %230 = llvm.urem %225, %229  : i32 loc(#loc2)
    %231 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %232 = llvm.mul %228, %231  : i32 loc(#loc2)
    %233 = llvm.mlir.constant(64 : i32) : i32 loc(#loc2)
    %234 = llvm.mul %230, %233  : i32 loc(#loc2)
    %235 = llvm.add %209, %232  : i32 loc(#loc2)
    %236 = llvm.add %218, %234  : i32 loc(#loc2)
    %237 = llvm.mlir.constant(0 : i32) : i32 loc(#loc2)
    %238 = llvm.add %236, %237  : i32 loc(#loc2)
    %239 = llvm.mlir.constant(1 : i32) : i32 loc(#loc2)
    %240 = llvm.add %236, %239  : i32 loc(#loc2)
    %241 = llvm.mlir.constant(2 : i32) : i32 loc(#loc2)
    %242 = llvm.add %236, %241  : i32 loc(#loc2)
    %243 = llvm.mlir.constant(3 : i32) : i32 loc(#loc2)
    %244 = llvm.add %236, %243  : i32 loc(#loc2)
    %245 = llvm.mlir.constant(4 : i32) : i32 loc(#loc2)
    %246 = llvm.add %236, %245  : i32 loc(#loc2)
    %247 = llvm.mlir.constant(5 : i32) : i32 loc(#loc2)
    %248 = llvm.add %236, %247  : i32 loc(#loc2)
    %249 = llvm.mlir.constant(6 : i32) : i32 loc(#loc2)
    %250 = llvm.add %236, %249  : i32 loc(#loc2)
    %251 = llvm.mlir.constant(7 : i32) : i32 loc(#loc2)
    %252 = llvm.add %236, %251  : i32 loc(#loc2)
    %253 = rocdl.workitem.id.x : i32 loc(#loc3)
    %254 = llvm.mlir.constant(64 : i32) : i32 loc(#loc3)
    %255 = llvm.urem %253, %254  : i32 loc(#loc3)
    %256 = llvm.udiv %253, %254  : i32 loc(#loc3)
    %257 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %258 = llvm.urem %256, %257  : i32 loc(#loc3)
    %259 = llvm.udiv %256, %257  : i32 loc(#loc3)
    %260 = llvm.mlir.constant(4 : i32) : i32 loc(#loc3)
    %261 = llvm.urem %259, %260  : i32 loc(#loc3)
    %262 = llvm.udiv %259, %260  : i32 loc(#loc3)
    %263 = llvm.mlir.constant(4 : i32) : i32 loc(#loc3)
    %264 = llvm.urem %255, %263  : i32 loc(#loc3)
    %265 = llvm.udiv %255, %263  : i32 loc(#loc3)
    %266 = llvm.mlir.constant(16 : i32) : i32 loc(#loc3)
    %267 = llvm.urem %265, %266  : i32 loc(#loc3)
    %268 = llvm.udiv %265, %266  : i32 loc(#loc3)
    %269 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %270 = llvm.urem %261, %269  : i32 loc(#loc3)
    %271 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %272 = llvm.urem %267, %271  : i32 loc(#loc3)
    %273 = llvm.mlir.constant(16 : i32) : i32 loc(#loc3)
    %274 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %275 = llvm.mul %270, %273  : i32 loc(#loc3)
    %276 = llvm.add %272, %275  : i32 loc(#loc3)
    %277 = llvm.mul %274, %276  : i32 loc(#loc3)
    %278 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %279 = llvm.urem %258, %278  : i32 loc(#loc3)
    %280 = llvm.mlir.constant(4 : i32) : i32 loc(#loc3)
    %281 = llvm.urem %264, %280  : i32 loc(#loc3)
    %282 = llvm.mlir.constant(4 : i32) : i32 loc(#loc3)
    %283 = llvm.mlir.constant(8 : i32) : i32 loc(#loc3)
    %284 = llvm.mul %279, %282  : i32 loc(#loc3)
    %285 = llvm.add %281, %284  : i32 loc(#loc3)
    %286 = llvm.mul %283, %285  : i32 loc(#loc3)
    %287 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %288 = nvgpu.cluster_id loc(#loc3)
    %289 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %290 = llvm.urem %287, %289  : i32 loc(#loc3)
    %291 = llvm.udiv %287, %289  : i32 loc(#loc3)
    %292 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %293 = llvm.urem %291, %292  : i32 loc(#loc3)
    %294 = llvm.udiv %291, %292  : i32 loc(#loc3)
    %295 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %296 = llvm.urem %290, %295  : i32 loc(#loc3)
    %297 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %298 = llvm.urem %293, %297  : i32 loc(#loc3)
    %299 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %300 = llvm.mul %296, %299  : i32 loc(#loc3)
    %301 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %302 = llvm.mul %298, %301  : i32 loc(#loc3)
    %303 = llvm.add %277, %300  : i32 loc(#loc3)
    %304 = llvm.add %286, %302  : i32 loc(#loc3)
    %305 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %306 = llvm.add %304, %305  : i32 loc(#loc3)
    %307 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %308 = llvm.add %304, %307  : i32 loc(#loc3)
    %309 = llvm.mlir.constant(2 : i32) : i32 loc(#loc3)
    %310 = llvm.add %304, %309  : i32 loc(#loc3)
    %311 = llvm.mlir.constant(3 : i32) : i32 loc(#loc3)
    %312 = llvm.add %304, %311  : i32 loc(#loc3)
    %313 = llvm.mlir.constant(4 : i32) : i32 loc(#loc3)
    %314 = llvm.add %304, %313  : i32 loc(#loc3)
    %315 = llvm.mlir.constant(5 : i32) : i32 loc(#loc3)
    %316 = llvm.add %304, %315  : i32 loc(#loc3)
    %317 = llvm.mlir.constant(6 : i32) : i32 loc(#loc3)
    %318 = llvm.add %304, %317  : i32 loc(#loc3)
    %319 = llvm.mlir.constant(7 : i32) : i32 loc(#loc3)
    %320 = llvm.add %304, %319  : i32 loc(#loc3)
    %321 = llvm.mlir.constant(2 : i32) : i32 loc(#loc3)
    %322 = llvm.mlir.constant(2 : i32) : i32 loc(#loc3)
    %323 = rocdl.workitem.id.x : i32 loc(#loc3)
    %324 = llvm.mlir.constant(64 : i32) : i32 loc(#loc3)
    %325 = llvm.urem %323, %324  : i32 loc(#loc3)
    %326 = llvm.udiv %323, %324  : i32 loc(#loc3)
    %327 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %328 = llvm.urem %326, %321  : i32 loc(#loc3)
    %329 = llvm.urem %328, %327  : i32 loc(#loc3)
    %330 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %331 = llvm.udiv %326, %321  : i32 loc(#loc3)
    %332 = llvm.urem %331, %322  : i32 loc(#loc3)
    %333 = llvm.urem %332, %330  : i32 loc(#loc3)
    %334 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %335 = llvm.mul %329, %334  : i32 loc(#loc3)
    %336 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %337 = llvm.mul %333, %336  : i32 loc(#loc3)
    %338 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %339 = llvm.udiv %325, %338  : i32 loc(#loc3)
    %340 = llvm.mlir.constant(4 : i32) : i32 loc(#loc3)
    %341 = llvm.mul %340, %339  : i32 loc(#loc3)
    %342 = llvm.add %341, %335  : i32 loc(#loc3)
    %343 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %344 = llvm.urem %325, %343  : i32 loc(#loc3)
    %345 = llvm.add %344, %337  : i32 loc(#loc3)
    %346 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %347 = nvgpu.cluster_id loc(#loc3)
    %348 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %349 = llvm.urem %346, %348  : i32 loc(#loc3)
    %350 = llvm.udiv %346, %348  : i32 loc(#loc3)
    %351 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %352 = llvm.urem %350, %351  : i32 loc(#loc3)
    %353 = llvm.udiv %350, %351  : i32 loc(#loc3)
    %354 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %355 = llvm.urem %352, %354  : i32 loc(#loc3)
    %356 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %357 = llvm.urem %349, %356  : i32 loc(#loc3)
    %358 = llvm.mlir.constant(1 : i32) : i32 loc(#loc3)
    %359 = llvm.mul %355, %358  : i32 loc(#loc3)
    %360 = llvm.mlir.constant(32 : i32) : i32 loc(#loc3)
    %361 = llvm.mul %357, %360  : i32 loc(#loc3)
    %362 = llvm.add %342, %359  : i32 loc(#loc3)
    %363 = llvm.add %345, %361  : i32 loc(#loc3)
    %364 = llvm.mlir.constant(0 : i32) : i32 loc(#loc3)
    %365 = llvm.add %363, %364  : i32 loc(#loc3)
    %366 = rocdl.workitem.id.x : i32 loc(#loc4)
    %367 = llvm.mlir.constant(64 : i32) : i32 loc(#loc4)
    %368 = llvm.urem %366, %367  : i32 loc(#loc4)
    %369 = llvm.udiv %366, %367  : i32 loc(#loc4)
    %370 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %371 = llvm.urem %369, %370  : i32 loc(#loc4)
    %372 = llvm.udiv %369, %370  : i32 loc(#loc4)
    %373 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %374 = llvm.urem %372, %373  : i32 loc(#loc4)
    %375 = llvm.udiv %372, %373  : i32 loc(#loc4)
    %376 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %377 = llvm.urem %368, %376  : i32 loc(#loc4)
    %378 = llvm.udiv %368, %376  : i32 loc(#loc4)
    %379 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %380 = llvm.urem %378, %379  : i32 loc(#loc4)
    %381 = llvm.udiv %378, %379  : i32 loc(#loc4)
    %382 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %383 = llvm.urem %374, %382  : i32 loc(#loc4)
    %384 = llvm.mlir.constant(64 : i32) : i32 loc(#loc4)
    %385 = llvm.urem %380, %384  : i32 loc(#loc4)
    %386 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %387 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %388 = llvm.mul %383, %386  : i32 loc(#loc4)
    %389 = llvm.add %385, %388  : i32 loc(#loc4)
    %390 = llvm.mul %387, %389  : i32 loc(#loc4)
    %391 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %392 = llvm.urem %371, %391  : i32 loc(#loc4)
    %393 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %394 = llvm.urem %377, %393  : i32 loc(#loc4)
    %395 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %396 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %397 = llvm.mul %392, %395  : i32 loc(#loc4)
    %398 = llvm.add %394, %397  : i32 loc(#loc4)
    %399 = llvm.mul %396, %398  : i32 loc(#loc4)
    %400 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %401 = llvm.add %390, %400  : i32 loc(#loc4)
    %402 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %403 = llvm.add %399, %402  : i32 loc(#loc4)
    %404 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %405 = llvm.add %390, %404  : i32 loc(#loc4)
    %406 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %407 = llvm.add %399, %406  : i32 loc(#loc4)
    %408 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %409 = llvm.add %390, %408  : i32 loc(#loc4)
    %410 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %411 = llvm.add %399, %410  : i32 loc(#loc4)
    %412 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %413 = llvm.add %390, %412  : i32 loc(#loc4)
    %414 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %415 = llvm.add %399, %414  : i32 loc(#loc4)
    %416 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %417 = llvm.add %390, %416  : i32 loc(#loc4)
    %418 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %419 = llvm.add %399, %418  : i32 loc(#loc4)
    %420 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %421 = llvm.add %390, %420  : i32 loc(#loc4)
    %422 = llvm.mlir.constant(5 : i32) : i32 loc(#loc4)
    %423 = llvm.add %399, %422  : i32 loc(#loc4)
    %424 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %425 = llvm.add %390, %424  : i32 loc(#loc4)
    %426 = llvm.mlir.constant(6 : i32) : i32 loc(#loc4)
    %427 = llvm.add %399, %426  : i32 loc(#loc4)
    %428 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %429 = llvm.add %390, %428  : i32 loc(#loc4)
    %430 = llvm.mlir.constant(7 : i32) : i32 loc(#loc4)
    %431 = llvm.add %399, %430  : i32 loc(#loc4)
    %432 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %433 = llvm.add %390, %432  : i32 loc(#loc4)
    %434 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %435 = llvm.add %399, %434  : i32 loc(#loc4)
    %436 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %437 = llvm.add %390, %436  : i32 loc(#loc4)
    %438 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %439 = llvm.add %399, %438  : i32 loc(#loc4)
    %440 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %441 = llvm.add %390, %440  : i32 loc(#loc4)
    %442 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %443 = llvm.add %399, %442  : i32 loc(#loc4)
    %444 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %445 = llvm.add %390, %444  : i32 loc(#loc4)
    %446 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %447 = llvm.add %399, %446  : i32 loc(#loc4)
    %448 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %449 = llvm.add %390, %448  : i32 loc(#loc4)
    %450 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %451 = llvm.add %399, %450  : i32 loc(#loc4)
    %452 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %453 = llvm.add %390, %452  : i32 loc(#loc4)
    %454 = llvm.mlir.constant(5 : i32) : i32 loc(#loc4)
    %455 = llvm.add %399, %454  : i32 loc(#loc4)
    %456 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %457 = llvm.add %390, %456  : i32 loc(#loc4)
    %458 = llvm.mlir.constant(6 : i32) : i32 loc(#loc4)
    %459 = llvm.add %399, %458  : i32 loc(#loc4)
    %460 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %461 = llvm.add %390, %460  : i32 loc(#loc4)
    %462 = llvm.mlir.constant(7 : i32) : i32 loc(#loc4)
    %463 = llvm.add %399, %462  : i32 loc(#loc4)
    %464 = rocdl.workitem.id.x : i32 loc(#loc5)
    %465 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %466 = llvm.urem %464, %465  : i32 loc(#loc5)
    %467 = llvm.udiv %464, %465  : i32 loc(#loc5)
    %468 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %469 = llvm.urem %467, %468  : i32 loc(#loc5)
    %470 = llvm.udiv %467, %468  : i32 loc(#loc5)
    %471 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %472 = llvm.urem %470, %471  : i32 loc(#loc5)
    %473 = llvm.udiv %470, %471  : i32 loc(#loc5)
    %474 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %475 = llvm.urem %466, %474  : i32 loc(#loc5)
    %476 = llvm.udiv %466, %474  : i32 loc(#loc5)
    %477 = llvm.mlir.constant(16 : i32) : i32 loc(#loc5)
    %478 = llvm.urem %476, %477  : i32 loc(#loc5)
    %479 = llvm.udiv %476, %477  : i32 loc(#loc5)
    %480 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %481 = llvm.urem %472, %480  : i32 loc(#loc5)
    %482 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %483 = llvm.urem %478, %482  : i32 loc(#loc5)
    %484 = llvm.mlir.constant(16 : i32) : i32 loc(#loc5)
    %485 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %486 = llvm.mul %481, %484  : i32 loc(#loc5)
    %487 = llvm.add %483, %486  : i32 loc(#loc5)
    %488 = llvm.mul %485, %487  : i32 loc(#loc5)
    %489 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %490 = llvm.urem %469, %489  : i32 loc(#loc5)
    %491 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %492 = llvm.urem %475, %491  : i32 loc(#loc5)
    %493 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %494 = llvm.mlir.constant(8 : i32) : i32 loc(#loc5)
    %495 = llvm.mul %490, %493  : i32 loc(#loc5)
    %496 = llvm.add %492, %495  : i32 loc(#loc5)
    %497 = llvm.mul %494, %496  : i32 loc(#loc5)
    %498 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %499 = llvm.add %488, %498  : i32 loc(#loc5)
    %500 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %501 = llvm.add %497, %500  : i32 loc(#loc5)
    %502 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %503 = llvm.add %488, %502  : i32 loc(#loc5)
    %504 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %505 = llvm.add %497, %504  : i32 loc(#loc5)
    %506 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %507 = llvm.add %488, %506  : i32 loc(#loc5)
    %508 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %509 = llvm.add %497, %508  : i32 loc(#loc5)
    %510 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %511 = llvm.add %488, %510  : i32 loc(#loc5)
    %512 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %513 = llvm.add %497, %512  : i32 loc(#loc5)
    %514 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %515 = llvm.add %488, %514  : i32 loc(#loc5)
    %516 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %517 = llvm.add %497, %516  : i32 loc(#loc5)
    %518 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %519 = llvm.add %488, %518  : i32 loc(#loc5)
    %520 = llvm.mlir.constant(5 : i32) : i32 loc(#loc5)
    %521 = llvm.add %497, %520  : i32 loc(#loc5)
    %522 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %523 = llvm.add %488, %522  : i32 loc(#loc5)
    %524 = llvm.mlir.constant(6 : i32) : i32 loc(#loc5)
    %525 = llvm.add %497, %524  : i32 loc(#loc5)
    %526 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %527 = llvm.add %488, %526  : i32 loc(#loc5)
    %528 = llvm.mlir.constant(7 : i32) : i32 loc(#loc5)
    %529 = llvm.add %497, %528  : i32 loc(#loc5)
    %530 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3> loc(#loc)
    %531 = llvm.bitcast %530 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3> loc(#loc)
    %532 = builtin.unrealized_conversion_cast %arg2 : !llvm.ptr<f32, 1> to !tt.ptr<f32, 1> loc(#loc)
    %533 = builtin.unrealized_conversion_cast %arg1 : !llvm.ptr<f16, 1> to !tt.ptr<f16, 1> loc(#loc)
    %534 = builtin.unrealized_conversion_cast %arg0 : !llvm.ptr<f16, 1> to !tt.ptr<f16, 1> loc(#loc)
    %535 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc6)
    %536 = llvm.bitcast %535 : f32 to f32 loc(#loc6)
    %537 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc6)
    %538 = llvm.insertvalue %536, %537[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %539 = llvm.insertvalue %536, %538[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %540 = llvm.insertvalue %536, %539[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %541 = llvm.insertvalue %536, %540[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %542 = llvm.insertvalue %536, %541[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %543 = llvm.insertvalue %536, %542[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %544 = llvm.insertvalue %536, %543[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %545 = llvm.insertvalue %536, %544[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %546 = llvm.insertvalue %536, %545[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %547 = llvm.insertvalue %536, %546[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %548 = llvm.insertvalue %536, %547[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %549 = llvm.insertvalue %536, %548[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %550 = llvm.insertvalue %536, %549[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %551 = llvm.insertvalue %536, %550[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %552 = llvm.insertvalue %536, %551[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %553 = llvm.insertvalue %536, %552[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc6)
    %554 = builtin.unrealized_conversion_cast %553 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> to tensor<64x32xf32, #mfma> loc(#loc6)
    %555 = builtin.unrealized_conversion_cast %554 : tensor<64x32xf32, #mfma> to !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc7)
    %556 = llvm.mlir.constant(0 : i32) : i32 loc(#loc7)
    %557 = llvm.mlir.constant(128 : i32) : i32 loc(#loc7)
    %558 = llvm.mlir.constant(64 : i32) : i32 loc(#loc7)
    %559 = llvm.mlir.constant(64 : i32) : i32 loc(#loc8)
    %560 = llvm.bitcast %559 : i32 to i32 loc(#loc8)
    %561 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc8)
    %562 = llvm.insertvalue %560, %561[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %563 = llvm.insertvalue %560, %562[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %564 = llvm.insertvalue %560, %563[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %565 = llvm.insertvalue %560, %564[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %566 = llvm.insertvalue %560, %565[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %567 = llvm.insertvalue %560, %566[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %568 = llvm.insertvalue %560, %567[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %569 = llvm.insertvalue %560, %568[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %570 = llvm.insertvalue %560, %569[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %571 = llvm.insertvalue %560, %570[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %572 = llvm.insertvalue %560, %571[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %573 = llvm.insertvalue %560, %572[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %574 = llvm.insertvalue %560, %573[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %575 = llvm.insertvalue %560, %574[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %576 = llvm.insertvalue %560, %575[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %577 = llvm.insertvalue %560, %576[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %578 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %579 = llvm.add %53, %578  : i32 loc(#loc1)
    %580 = llvm.add %55, %578  : i32 loc(#loc1)
    %581 = llvm.mlir.undef : !llvm.struct<(i32, i32)> loc(#loc1)
    %582 = llvm.insertvalue %579, %581[0] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %583 = llvm.insertvalue %580, %582[1] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %584 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %585 = llvm.add %109, %584  : i32 loc(#loc1)
    %586 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc1)
    %587 = llvm.insertvalue %585, %586[0] : !llvm.struct<(i32)>  loc(#loc1)
    %588 = llvm.mlir.constant(0 : index) : i32 loc(#loc1)
    %589 = llvm.add %154, %588  : i32 loc(#loc1)
    %590 = llvm.add %156, %588  : i32 loc(#loc1)
    %591 = llvm.add %158, %588  : i32 loc(#loc1)
    %592 = llvm.add %160, %588  : i32 loc(#loc1)
    %593 = llvm.add %162, %588  : i32 loc(#loc1)
    %594 = llvm.add %164, %588  : i32 loc(#loc1)
    %595 = llvm.add %166, %588  : i32 loc(#loc1)
    %596 = llvm.add %168, %588  : i32 loc(#loc1)
    %597 = llvm.add %170, %588  : i32 loc(#loc1)
    %598 = llvm.add %172, %588  : i32 loc(#loc1)
    %599 = llvm.add %174, %588  : i32 loc(#loc1)
    %600 = llvm.add %176, %588  : i32 loc(#loc1)
    %601 = llvm.add %178, %588  : i32 loc(#loc1)
    %602 = llvm.add %180, %588  : i32 loc(#loc1)
    %603 = llvm.add %182, %588  : i32 loc(#loc1)
    %604 = llvm.add %184, %588  : i32 loc(#loc1)
    %605 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc1)
    %606 = llvm.insertvalue %589, %605[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %607 = llvm.insertvalue %590, %606[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %608 = llvm.insertvalue %591, %607[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %609 = llvm.insertvalue %592, %608[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %610 = llvm.insertvalue %593, %609[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %611 = llvm.insertvalue %594, %610[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %612 = llvm.insertvalue %595, %611[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %613 = llvm.insertvalue %596, %612[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %614 = llvm.insertvalue %597, %613[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %615 = llvm.insertvalue %598, %614[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %616 = llvm.insertvalue %599, %615[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %617 = llvm.insertvalue %600, %616[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %618 = llvm.insertvalue %601, %617[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %619 = llvm.insertvalue %602, %618[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %620 = llvm.insertvalue %603, %619[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %621 = llvm.insertvalue %604, %620[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %622 = llvm.extractvalue %583[0] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %623 = llvm.extractvalue %583[1] : !llvm.struct<(i32, i32)>  loc(#loc1)
    %624 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc1)
    %625 = llvm.insertvalue %622, %624[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %626 = llvm.insertvalue %622, %625[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %627 = llvm.insertvalue %622, %626[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %628 = llvm.insertvalue %622, %627[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %629 = llvm.insertvalue %622, %628[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %630 = llvm.insertvalue %622, %629[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %631 = llvm.insertvalue %622, %630[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %632 = llvm.insertvalue %622, %631[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %633 = llvm.insertvalue %623, %632[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %634 = llvm.insertvalue %623, %633[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %635 = llvm.insertvalue %623, %634[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %636 = llvm.insertvalue %623, %635[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %637 = llvm.insertvalue %623, %636[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %638 = llvm.insertvalue %623, %637[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %639 = llvm.insertvalue %623, %638[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %640 = llvm.insertvalue %623, %639[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %641 = llvm.extractvalue %587[0] : !llvm.struct<(i32)>  loc(#loc1)
    %642 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc1)
    %643 = llvm.insertvalue %641, %642[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %644 = llvm.insertvalue %641, %643[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %645 = llvm.insertvalue %641, %644[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %646 = llvm.insertvalue %641, %645[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %647 = llvm.insertvalue %641, %646[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %648 = llvm.insertvalue %641, %647[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %649 = llvm.insertvalue %641, %648[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %650 = llvm.insertvalue %641, %649[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %651 = llvm.extractvalue %621[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %652 = llvm.extractvalue %621[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %653 = llvm.extractvalue %621[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %654 = llvm.extractvalue %621[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %655 = llvm.extractvalue %621[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %656 = llvm.extractvalue %621[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %657 = llvm.extractvalue %621[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %658 = llvm.extractvalue %621[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %659 = llvm.extractvalue %621[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %660 = llvm.extractvalue %621[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %661 = llvm.extractvalue %621[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %662 = llvm.extractvalue %621[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %663 = llvm.extractvalue %621[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %664 = llvm.extractvalue %621[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %665 = llvm.extractvalue %621[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %666 = llvm.extractvalue %621[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %667 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc1)
    %668 = llvm.insertvalue %651, %667[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %669 = llvm.insertvalue %652, %668[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %670 = llvm.insertvalue %653, %669[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %671 = llvm.insertvalue %654, %670[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %672 = llvm.insertvalue %655, %671[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %673 = llvm.insertvalue %656, %672[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %674 = llvm.insertvalue %657, %673[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %675 = llvm.insertvalue %658, %674[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %676 = llvm.insertvalue %659, %675[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %677 = llvm.insertvalue %660, %676[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %678 = llvm.insertvalue %661, %677[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %679 = llvm.insertvalue %662, %678[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %680 = llvm.insertvalue %663, %679[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %681 = llvm.insertvalue %664, %680[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %682 = llvm.insertvalue %665, %681[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %683 = llvm.insertvalue %666, %682[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %684 = llvm.bitcast %arg3 : i32 to i32 loc(#loc9)
    %685 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc9)
    %686 = llvm.insertvalue %684, %685[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %687 = llvm.insertvalue %684, %686[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %688 = llvm.insertvalue %684, %687[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %689 = llvm.insertvalue %684, %688[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %690 = llvm.insertvalue %684, %689[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %691 = llvm.insertvalue %684, %690[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %692 = llvm.insertvalue %684, %691[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %693 = llvm.insertvalue %684, %692[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %694 = llvm.insertvalue %684, %693[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %695 = llvm.insertvalue %684, %694[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %696 = llvm.insertvalue %684, %695[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %697 = llvm.insertvalue %684, %696[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %698 = llvm.insertvalue %684, %697[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %699 = llvm.insertvalue %684, %698[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %700 = llvm.insertvalue %684, %699[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %701 = llvm.insertvalue %684, %700[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %702 = llvm.extractvalue %640[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %703 = llvm.extractvalue %640[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %704 = llvm.extractvalue %640[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %705 = llvm.extractvalue %640[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %706 = llvm.extractvalue %640[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %707 = llvm.extractvalue %640[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %708 = llvm.extractvalue %640[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %709 = llvm.extractvalue %640[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %710 = llvm.extractvalue %640[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %711 = llvm.extractvalue %640[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %712 = llvm.extractvalue %640[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %713 = llvm.extractvalue %640[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %714 = llvm.extractvalue %640[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %715 = llvm.extractvalue %640[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %716 = llvm.extractvalue %640[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %717 = llvm.extractvalue %640[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %718 = llvm.extractvalue %701[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %719 = llvm.extractvalue %701[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %720 = llvm.extractvalue %701[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %721 = llvm.extractvalue %701[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %722 = llvm.extractvalue %701[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %723 = llvm.extractvalue %701[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %724 = llvm.extractvalue %701[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %725 = llvm.extractvalue %701[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %726 = llvm.extractvalue %701[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %727 = llvm.extractvalue %701[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %728 = llvm.extractvalue %701[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %729 = llvm.extractvalue %701[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %730 = llvm.extractvalue %701[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %731 = llvm.extractvalue %701[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %732 = llvm.extractvalue %701[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %733 = llvm.extractvalue %701[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %734 = llvm.mul %702, %718  : i32 loc(#loc9)
    %735 = llvm.mul %703, %719  : i32 loc(#loc9)
    %736 = llvm.mul %704, %720  : i32 loc(#loc9)
    %737 = llvm.mul %705, %721  : i32 loc(#loc9)
    %738 = llvm.mul %706, %722  : i32 loc(#loc9)
    %739 = llvm.mul %707, %723  : i32 loc(#loc9)
    %740 = llvm.mul %708, %724  : i32 loc(#loc9)
    %741 = llvm.mul %709, %725  : i32 loc(#loc9)
    %742 = llvm.mul %710, %726  : i32 loc(#loc9)
    %743 = llvm.mul %711, %727  : i32 loc(#loc9)
    %744 = llvm.mul %712, %728  : i32 loc(#loc9)
    %745 = llvm.mul %713, %729  : i32 loc(#loc9)
    %746 = llvm.mul %714, %730  : i32 loc(#loc9)
    %747 = llvm.mul %715, %731  : i32 loc(#loc9)
    %748 = llvm.mul %716, %732  : i32 loc(#loc9)
    %749 = llvm.mul %717, %733  : i32 loc(#loc9)
    %750 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc9)
    %751 = llvm.insertvalue %734, %750[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %752 = llvm.insertvalue %735, %751[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %753 = llvm.insertvalue %736, %752[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %754 = llvm.insertvalue %737, %753[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %755 = llvm.insertvalue %738, %754[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %756 = llvm.insertvalue %739, %755[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %757 = llvm.insertvalue %740, %756[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %758 = llvm.insertvalue %741, %757[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %759 = llvm.insertvalue %742, %758[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %760 = llvm.insertvalue %743, %759[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %761 = llvm.insertvalue %744, %760[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %762 = llvm.insertvalue %745, %761[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %763 = llvm.insertvalue %746, %762[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %764 = llvm.insertvalue %747, %763[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %765 = llvm.insertvalue %748, %764[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %766 = llvm.insertvalue %749, %765[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc9)
    %767 = llvm.bitcast %arg0 : !llvm.ptr<f16, 1> to !llvm.ptr<f16, 1> loc(#loc1)
    %768 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc1)
    %769 = llvm.insertvalue %767, %768[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %770 = llvm.insertvalue %767, %769[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %771 = llvm.insertvalue %767, %770[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %772 = llvm.insertvalue %767, %771[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %773 = llvm.insertvalue %767, %772[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %774 = llvm.insertvalue %767, %773[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %775 = llvm.insertvalue %767, %774[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %776 = llvm.insertvalue %767, %775[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %777 = llvm.insertvalue %767, %776[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %778 = llvm.insertvalue %767, %777[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %779 = llvm.insertvalue %767, %778[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %780 = llvm.insertvalue %767, %779[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %781 = llvm.insertvalue %767, %780[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %782 = llvm.insertvalue %767, %781[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %783 = llvm.insertvalue %767, %782[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %784 = llvm.insertvalue %767, %783[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %785 = llvm.extractvalue %784[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %786 = llvm.extractvalue %784[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %787 = llvm.extractvalue %784[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %788 = llvm.extractvalue %784[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %789 = llvm.extractvalue %784[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %790 = llvm.extractvalue %784[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %791 = llvm.extractvalue %784[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %792 = llvm.extractvalue %784[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %793 = llvm.extractvalue %784[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %794 = llvm.extractvalue %784[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %795 = llvm.extractvalue %784[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %796 = llvm.extractvalue %784[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %797 = llvm.extractvalue %784[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %798 = llvm.extractvalue %784[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %799 = llvm.extractvalue %784[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %800 = llvm.extractvalue %784[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %801 = llvm.extractvalue %766[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %802 = llvm.extractvalue %766[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %803 = llvm.extractvalue %766[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %804 = llvm.extractvalue %766[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %805 = llvm.extractvalue %766[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %806 = llvm.extractvalue %766[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %807 = llvm.extractvalue %766[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %808 = llvm.extractvalue %766[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %809 = llvm.extractvalue %766[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %810 = llvm.extractvalue %766[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %811 = llvm.extractvalue %766[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %812 = llvm.extractvalue %766[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %813 = llvm.extractvalue %766[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %814 = llvm.extractvalue %766[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %815 = llvm.extractvalue %766[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %816 = llvm.extractvalue %766[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc1)
    %817 = llvm.getelementptr %785[%801] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %818 = llvm.getelementptr %786[%802] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %819 = llvm.getelementptr %787[%803] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %820 = llvm.getelementptr %788[%804] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %821 = llvm.getelementptr %789[%805] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %822 = llvm.getelementptr %790[%806] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %823 = llvm.getelementptr %791[%807] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %824 = llvm.getelementptr %792[%808] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %825 = llvm.getelementptr %793[%809] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %826 = llvm.getelementptr %794[%810] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %827 = llvm.getelementptr %795[%811] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %828 = llvm.getelementptr %796[%812] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %829 = llvm.getelementptr %797[%813] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %830 = llvm.getelementptr %798[%814] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %831 = llvm.getelementptr %799[%815] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %832 = llvm.getelementptr %800[%816] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc1)
    %833 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc1)
    %834 = llvm.insertvalue %817, %833[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %835 = llvm.insertvalue %818, %834[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %836 = llvm.insertvalue %819, %835[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %837 = llvm.insertvalue %820, %836[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %838 = llvm.insertvalue %821, %837[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %839 = llvm.insertvalue %822, %838[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %840 = llvm.insertvalue %823, %839[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %841 = llvm.insertvalue %824, %840[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %842 = llvm.insertvalue %825, %841[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %843 = llvm.insertvalue %826, %842[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %844 = llvm.insertvalue %827, %843[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %845 = llvm.insertvalue %828, %844[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %846 = llvm.insertvalue %829, %845[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %847 = llvm.insertvalue %830, %846[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %848 = llvm.insertvalue %831, %847[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %849 = llvm.insertvalue %832, %848[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc1)
    %850 = llvm.mlir.constant(0 : index) : i32 loc(#loc2)
    %851 = llvm.add %238, %850  : i32 loc(#loc2)
    %852 = llvm.add %240, %850  : i32 loc(#loc2)
    %853 = llvm.add %242, %850  : i32 loc(#loc2)
    %854 = llvm.add %244, %850  : i32 loc(#loc2)
    %855 = llvm.add %246, %850  : i32 loc(#loc2)
    %856 = llvm.add %248, %850  : i32 loc(#loc2)
    %857 = llvm.add %250, %850  : i32 loc(#loc2)
    %858 = llvm.add %252, %850  : i32 loc(#loc2)
    %859 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc2)
    %860 = llvm.insertvalue %851, %859[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %861 = llvm.insertvalue %852, %860[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %862 = llvm.insertvalue %853, %861[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %863 = llvm.insertvalue %854, %862[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %864 = llvm.insertvalue %855, %863[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %865 = llvm.insertvalue %856, %864[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %866 = llvm.insertvalue %857, %865[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %867 = llvm.insertvalue %858, %866[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %868 = llvm.extractvalue %867[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %869 = llvm.extractvalue %867[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %870 = llvm.extractvalue %867[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %871 = llvm.extractvalue %867[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %872 = llvm.extractvalue %867[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %873 = llvm.extractvalue %867[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %874 = llvm.extractvalue %867[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %875 = llvm.extractvalue %867[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %876 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc2)
    %877 = llvm.insertvalue %868, %876[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %878 = llvm.insertvalue %869, %877[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %879 = llvm.insertvalue %870, %878[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %880 = llvm.insertvalue %871, %879[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %881 = llvm.insertvalue %872, %880[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %882 = llvm.insertvalue %873, %881[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %883 = llvm.insertvalue %874, %882[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %884 = llvm.insertvalue %875, %883[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %885 = llvm.extractvalue %849[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %886 = llvm.extractvalue %849[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %887 = llvm.extractvalue %849[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %888 = llvm.extractvalue %849[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %889 = llvm.extractvalue %849[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %890 = llvm.extractvalue %849[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %891 = llvm.extractvalue %849[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %892 = llvm.extractvalue %849[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %893 = llvm.extractvalue %849[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %894 = llvm.extractvalue %849[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %895 = llvm.extractvalue %849[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %896 = llvm.extractvalue %849[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %897 = llvm.extractvalue %849[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %898 = llvm.extractvalue %849[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %899 = llvm.extractvalue %849[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %900 = llvm.extractvalue %849[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %901 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc2)
    %902 = llvm.insertvalue %885, %901[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %903 = llvm.insertvalue %885, %902[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %904 = llvm.insertvalue %885, %903[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %905 = llvm.insertvalue %885, %904[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %906 = llvm.insertvalue %885, %905[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %907 = llvm.insertvalue %885, %906[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %908 = llvm.insertvalue %885, %907[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %909 = llvm.insertvalue %885, %908[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %910 = llvm.insertvalue %893, %909[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %911 = llvm.insertvalue %893, %910[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %912 = llvm.insertvalue %893, %911[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %913 = llvm.insertvalue %893, %912[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %914 = llvm.insertvalue %893, %913[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %915 = llvm.insertvalue %893, %914[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %916 = llvm.insertvalue %893, %915[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %917 = llvm.insertvalue %893, %916[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %918 = llvm.extractvalue %884[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %919 = llvm.extractvalue %884[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %920 = llvm.extractvalue %884[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %921 = llvm.extractvalue %884[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %922 = llvm.extractvalue %884[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %923 = llvm.extractvalue %884[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %924 = llvm.extractvalue %884[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %925 = llvm.extractvalue %884[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %926 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc2)
    %927 = llvm.insertvalue %918, %926[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %928 = llvm.insertvalue %919, %927[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %929 = llvm.insertvalue %920, %928[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %930 = llvm.insertvalue %921, %929[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %931 = llvm.insertvalue %922, %930[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %932 = llvm.insertvalue %923, %931[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %933 = llvm.insertvalue %924, %932[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %934 = llvm.insertvalue %925, %933[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %935 = llvm.insertvalue %918, %934[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %936 = llvm.insertvalue %919, %935[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %937 = llvm.insertvalue %920, %936[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %938 = llvm.insertvalue %921, %937[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %939 = llvm.insertvalue %922, %938[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %940 = llvm.insertvalue %923, %939[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %941 = llvm.insertvalue %924, %940[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %942 = llvm.insertvalue %925, %941[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %943 = llvm.extractvalue %917[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %944 = llvm.extractvalue %917[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %945 = llvm.extractvalue %917[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %946 = llvm.extractvalue %917[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %947 = llvm.extractvalue %917[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %948 = llvm.extractvalue %917[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %949 = llvm.extractvalue %917[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %950 = llvm.extractvalue %917[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %951 = llvm.extractvalue %917[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %952 = llvm.extractvalue %917[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %953 = llvm.extractvalue %917[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %954 = llvm.extractvalue %917[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %955 = llvm.extractvalue %917[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %956 = llvm.extractvalue %917[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %957 = llvm.extractvalue %917[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %958 = llvm.extractvalue %917[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %959 = llvm.extractvalue %942[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %960 = llvm.extractvalue %942[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %961 = llvm.extractvalue %942[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %962 = llvm.extractvalue %942[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %963 = llvm.extractvalue %942[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %964 = llvm.extractvalue %942[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %965 = llvm.extractvalue %942[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %966 = llvm.extractvalue %942[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %967 = llvm.extractvalue %942[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %968 = llvm.extractvalue %942[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %969 = llvm.extractvalue %942[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %970 = llvm.extractvalue %942[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %971 = llvm.extractvalue %942[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %972 = llvm.extractvalue %942[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %973 = llvm.extractvalue %942[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %974 = llvm.extractvalue %942[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc2)
    %975 = llvm.getelementptr %943[%959] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %976 = llvm.getelementptr %944[%960] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %977 = llvm.getelementptr %945[%961] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %978 = llvm.getelementptr %946[%962] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %979 = llvm.getelementptr %947[%963] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %980 = llvm.getelementptr %948[%964] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %981 = llvm.getelementptr %949[%965] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %982 = llvm.getelementptr %950[%966] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %983 = llvm.getelementptr %951[%967] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %984 = llvm.getelementptr %952[%968] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %985 = llvm.getelementptr %953[%969] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %986 = llvm.getelementptr %954[%970] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %987 = llvm.getelementptr %955[%971] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %988 = llvm.getelementptr %956[%972] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %989 = llvm.getelementptr %957[%973] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %990 = llvm.getelementptr %958[%974] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc2)
    %991 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc2)
    %992 = llvm.insertvalue %975, %991[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %993 = llvm.insertvalue %976, %992[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %994 = llvm.insertvalue %977, %993[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %995 = llvm.insertvalue %978, %994[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %996 = llvm.insertvalue %979, %995[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %997 = llvm.insertvalue %980, %996[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %998 = llvm.insertvalue %981, %997[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %999 = llvm.insertvalue %982, %998[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %1000 = llvm.insertvalue %983, %999[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %1001 = llvm.insertvalue %984, %1000[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %1002 = llvm.insertvalue %985, %1001[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %1003 = llvm.insertvalue %986, %1002[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %1004 = llvm.insertvalue %987, %1003[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %1005 = llvm.insertvalue %988, %1004[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %1006 = llvm.insertvalue %989, %1005[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %1007 = llvm.insertvalue %990, %1006[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc2)
    %1008 = builtin.unrealized_conversion_cast %1007 : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> to tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc2)
    %1009 = builtin.unrealized_conversion_cast %1008 : tensor<64x64x!tt.ptr<f16, 1>, #blocked> to !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc7)
    %1010 = llvm.bitcast %arg4 : i32 to i32 loc(#loc10)
    %1011 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc10)
    %1012 = llvm.insertvalue %1010, %1011[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1013 = llvm.insertvalue %1010, %1012[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1014 = llvm.insertvalue %1010, %1013[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1015 = llvm.insertvalue %1010, %1014[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1016 = llvm.insertvalue %1010, %1015[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1017 = llvm.insertvalue %1010, %1016[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1018 = llvm.insertvalue %1010, %1017[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1019 = llvm.insertvalue %1010, %1018[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1020 = llvm.extractvalue %650[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1021 = llvm.extractvalue %650[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1022 = llvm.extractvalue %650[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1023 = llvm.extractvalue %650[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1024 = llvm.extractvalue %650[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1025 = llvm.extractvalue %650[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1026 = llvm.extractvalue %650[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1027 = llvm.extractvalue %650[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1028 = llvm.extractvalue %1019[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1029 = llvm.extractvalue %1019[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1030 = llvm.extractvalue %1019[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1031 = llvm.extractvalue %1019[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1032 = llvm.extractvalue %1019[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1033 = llvm.extractvalue %1019[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1034 = llvm.extractvalue %1019[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1035 = llvm.extractvalue %1019[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1036 = llvm.mul %1020, %1028  : i32 loc(#loc10)
    %1037 = llvm.mul %1021, %1029  : i32 loc(#loc10)
    %1038 = llvm.mul %1022, %1030  : i32 loc(#loc10)
    %1039 = llvm.mul %1023, %1031  : i32 loc(#loc10)
    %1040 = llvm.mul %1024, %1032  : i32 loc(#loc10)
    %1041 = llvm.mul %1025, %1033  : i32 loc(#loc10)
    %1042 = llvm.mul %1026, %1034  : i32 loc(#loc10)
    %1043 = llvm.mul %1027, %1035  : i32 loc(#loc10)
    %1044 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc10)
    %1045 = llvm.insertvalue %1036, %1044[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1046 = llvm.insertvalue %1037, %1045[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1047 = llvm.insertvalue %1038, %1046[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1048 = llvm.insertvalue %1039, %1047[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1049 = llvm.insertvalue %1040, %1048[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1050 = llvm.insertvalue %1041, %1049[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1051 = llvm.insertvalue %1042, %1050[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1052 = llvm.insertvalue %1043, %1051[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc10)
    %1053 = llvm.bitcast %arg1 : !llvm.ptr<f16, 1> to !llvm.ptr<f16, 1> loc(#loc11)
    %1054 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc11)
    %1055 = llvm.insertvalue %1053, %1054[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1056 = llvm.insertvalue %1053, %1055[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1057 = llvm.insertvalue %1053, %1056[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1058 = llvm.insertvalue %1053, %1057[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1059 = llvm.insertvalue %1053, %1058[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1060 = llvm.insertvalue %1053, %1059[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1061 = llvm.insertvalue %1053, %1060[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1062 = llvm.insertvalue %1053, %1061[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1063 = llvm.extractvalue %1062[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1064 = llvm.extractvalue %1062[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1065 = llvm.extractvalue %1062[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1066 = llvm.extractvalue %1062[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1067 = llvm.extractvalue %1062[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1068 = llvm.extractvalue %1062[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1069 = llvm.extractvalue %1062[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1070 = llvm.extractvalue %1062[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1071 = llvm.extractvalue %1052[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %1072 = llvm.extractvalue %1052[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %1073 = llvm.extractvalue %1052[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %1074 = llvm.extractvalue %1052[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %1075 = llvm.extractvalue %1052[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %1076 = llvm.extractvalue %1052[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %1077 = llvm.extractvalue %1052[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %1078 = llvm.extractvalue %1052[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc11)
    %1079 = llvm.getelementptr %1063[%1071] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %1080 = llvm.getelementptr %1064[%1072] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %1081 = llvm.getelementptr %1065[%1073] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %1082 = llvm.getelementptr %1066[%1074] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %1083 = llvm.getelementptr %1067[%1075] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %1084 = llvm.getelementptr %1068[%1076] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %1085 = llvm.getelementptr %1069[%1077] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %1086 = llvm.getelementptr %1070[%1078] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %1087 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc11)
    %1088 = llvm.insertvalue %1079, %1087[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1089 = llvm.insertvalue %1080, %1088[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1090 = llvm.insertvalue %1081, %1089[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1091 = llvm.insertvalue %1082, %1090[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1092 = llvm.insertvalue %1083, %1091[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1093 = llvm.insertvalue %1084, %1092[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1094 = llvm.insertvalue %1085, %1093[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1095 = llvm.insertvalue %1086, %1094[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc11)
    %1096 = llvm.mlir.constant(0 : index) : i32 loc(#loc3)
    %1097 = llvm.add %306, %1096  : i32 loc(#loc3)
    %1098 = llvm.add %308, %1096  : i32 loc(#loc3)
    %1099 = llvm.add %310, %1096  : i32 loc(#loc3)
    %1100 = llvm.add %312, %1096  : i32 loc(#loc3)
    %1101 = llvm.add %314, %1096  : i32 loc(#loc3)
    %1102 = llvm.add %316, %1096  : i32 loc(#loc3)
    %1103 = llvm.add %318, %1096  : i32 loc(#loc3)
    %1104 = llvm.add %320, %1096  : i32 loc(#loc3)
    %1105 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc3)
    %1106 = llvm.insertvalue %1097, %1105[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1107 = llvm.insertvalue %1098, %1106[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1108 = llvm.insertvalue %1099, %1107[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1109 = llvm.insertvalue %1100, %1108[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1110 = llvm.insertvalue %1101, %1109[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1111 = llvm.insertvalue %1102, %1110[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1112 = llvm.insertvalue %1103, %1111[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1113 = llvm.insertvalue %1104, %1112[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1114 = llvm.mlir.constant(0 : index) : i32 loc(#loc3)
    %1115 = llvm.add %365, %1114  : i32 loc(#loc3)
    %1116 = llvm.mlir.undef : !llvm.struct<(i32)> loc(#loc3)
    %1117 = llvm.insertvalue %1115, %1116[0] : !llvm.struct<(i32)>  loc(#loc3)
    %1118 = llvm.extractvalue %1113[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1119 = llvm.extractvalue %1113[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1120 = llvm.extractvalue %1113[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1121 = llvm.extractvalue %1113[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1122 = llvm.extractvalue %1113[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1123 = llvm.extractvalue %1113[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1124 = llvm.extractvalue %1113[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1125 = llvm.extractvalue %1113[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1126 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc3)
    %1127 = llvm.insertvalue %1118, %1126[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1128 = llvm.insertvalue %1119, %1127[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1129 = llvm.insertvalue %1120, %1128[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1130 = llvm.insertvalue %1121, %1129[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1131 = llvm.insertvalue %1122, %1130[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1132 = llvm.insertvalue %1123, %1131[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1133 = llvm.insertvalue %1124, %1132[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1134 = llvm.insertvalue %1125, %1133[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1135 = llvm.extractvalue %1117[0] : !llvm.struct<(i32)>  loc(#loc3)
    %1136 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc3)
    %1137 = llvm.insertvalue %1135, %1136[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1138 = llvm.insertvalue %1135, %1137[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1139 = llvm.insertvalue %1135, %1138[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1140 = llvm.insertvalue %1135, %1139[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1141 = llvm.insertvalue %1135, %1140[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1142 = llvm.insertvalue %1135, %1141[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1143 = llvm.insertvalue %1135, %1142[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1144 = llvm.insertvalue %1135, %1143[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1145 = llvm.insertvalue %1135, %1144[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1146 = llvm.insertvalue %1135, %1145[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1147 = llvm.insertvalue %1135, %1146[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1148 = llvm.insertvalue %1135, %1147[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1149 = llvm.insertvalue %1135, %1148[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1150 = llvm.insertvalue %1135, %1149[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1151 = llvm.insertvalue %1135, %1150[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1152 = llvm.insertvalue %1135, %1151[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1153 = llvm.extractvalue %1095[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1154 = llvm.extractvalue %1095[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1155 = llvm.extractvalue %1095[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1156 = llvm.extractvalue %1095[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1157 = llvm.extractvalue %1095[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1158 = llvm.extractvalue %1095[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1159 = llvm.extractvalue %1095[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1160 = llvm.extractvalue %1095[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1161 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc3)
    %1162 = llvm.insertvalue %1153, %1161[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1163 = llvm.insertvalue %1153, %1162[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1164 = llvm.insertvalue %1153, %1163[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1165 = llvm.insertvalue %1153, %1164[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1166 = llvm.insertvalue %1153, %1165[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1167 = llvm.insertvalue %1153, %1166[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1168 = llvm.insertvalue %1153, %1167[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1169 = llvm.insertvalue %1153, %1168[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1170 = llvm.extractvalue %1134[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1171 = llvm.extractvalue %1134[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1172 = llvm.extractvalue %1134[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1173 = llvm.extractvalue %1134[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1174 = llvm.extractvalue %1134[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1175 = llvm.extractvalue %1134[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1176 = llvm.extractvalue %1134[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1177 = llvm.extractvalue %1134[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1178 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc3)
    %1179 = llvm.insertvalue %1170, %1178[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1180 = llvm.insertvalue %1171, %1179[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1181 = llvm.insertvalue %1172, %1180[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1182 = llvm.insertvalue %1173, %1181[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1183 = llvm.insertvalue %1174, %1182[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1184 = llvm.insertvalue %1175, %1183[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1185 = llvm.insertvalue %1176, %1184[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1186 = llvm.insertvalue %1177, %1185[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1187 = llvm.extractvalue %1152[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1188 = llvm.extractvalue %1152[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1189 = llvm.extractvalue %1152[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1190 = llvm.extractvalue %1152[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1191 = llvm.extractvalue %1152[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1192 = llvm.extractvalue %1152[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1193 = llvm.extractvalue %1152[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1194 = llvm.extractvalue %1152[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1195 = llvm.extractvalue %1152[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1196 = llvm.extractvalue %1152[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1197 = llvm.extractvalue %1152[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1198 = llvm.extractvalue %1152[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1199 = llvm.extractvalue %1152[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1200 = llvm.extractvalue %1152[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1201 = llvm.extractvalue %1152[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1202 = llvm.extractvalue %1152[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1203 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc3)
    %1204 = llvm.insertvalue %1187, %1203[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1205 = llvm.insertvalue %1187, %1204[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1206 = llvm.insertvalue %1187, %1205[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1207 = llvm.insertvalue %1187, %1206[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1208 = llvm.insertvalue %1187, %1207[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1209 = llvm.insertvalue %1187, %1208[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1210 = llvm.insertvalue %1187, %1209[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1211 = llvm.insertvalue %1187, %1210[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1212 = llvm.insertvalue %1187, %1211[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1213 = llvm.insertvalue %1187, %1212[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1214 = llvm.insertvalue %1187, %1213[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1215 = llvm.insertvalue %1187, %1214[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1216 = llvm.insertvalue %1187, %1215[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1217 = llvm.insertvalue %1187, %1216[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1218 = llvm.insertvalue %1187, %1217[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1219 = llvm.insertvalue %1187, %1218[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1220 = llvm.extractvalue %1169[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1221 = llvm.extractvalue %1169[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1222 = llvm.extractvalue %1169[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1223 = llvm.extractvalue %1169[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1224 = llvm.extractvalue %1169[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1225 = llvm.extractvalue %1169[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1226 = llvm.extractvalue %1169[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1227 = llvm.extractvalue %1169[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1228 = llvm.extractvalue %1186[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1229 = llvm.extractvalue %1186[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1230 = llvm.extractvalue %1186[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1231 = llvm.extractvalue %1186[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1232 = llvm.extractvalue %1186[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1233 = llvm.extractvalue %1186[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1234 = llvm.extractvalue %1186[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1235 = llvm.extractvalue %1186[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc3)
    %1236 = llvm.getelementptr %1220[%1228] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc3)
    %1237 = llvm.getelementptr %1221[%1229] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc3)
    %1238 = llvm.getelementptr %1222[%1230] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc3)
    %1239 = llvm.getelementptr %1223[%1231] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc3)
    %1240 = llvm.getelementptr %1224[%1232] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc3)
    %1241 = llvm.getelementptr %1225[%1233] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc3)
    %1242 = llvm.getelementptr %1226[%1234] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc3)
    %1243 = llvm.getelementptr %1227[%1235] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc3)
    %1244 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc3)
    %1245 = llvm.insertvalue %1236, %1244[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1246 = llvm.insertvalue %1237, %1245[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1247 = llvm.insertvalue %1238, %1246[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1248 = llvm.insertvalue %1239, %1247[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1249 = llvm.insertvalue %1240, %1248[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1250 = llvm.insertvalue %1241, %1249[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1251 = llvm.insertvalue %1242, %1250[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1252 = llvm.insertvalue %1243, %1251[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %1253 = builtin.unrealized_conversion_cast %1252 : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> to tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc3)
    %1254 = builtin.unrealized_conversion_cast %1253 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1> to !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc7)
    %1255 = llvm.mul %arg4, %558  : i32 loc(#loc12)
    %1256 = llvm.bitcast %1255 : i32 to i32 loc(#loc13)
    %1257 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc13)
    %1258 = llvm.insertvalue %1256, %1257[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %1259 = llvm.insertvalue %1256, %1258[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %1260 = llvm.insertvalue %1256, %1259[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %1261 = llvm.insertvalue %1256, %1260[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %1262 = llvm.insertvalue %1256, %1261[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %1263 = llvm.insertvalue %1256, %1262[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %1264 = llvm.insertvalue %1256, %1263[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %1265 = llvm.insertvalue %1256, %1264[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    llvm.br ^bb1(%556, %555, %1009, %1254 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc7)
  ^bb1(%1266: i32 loc("/triton/python/test/unit/language/test_core_amd.py":1977:25), %1267: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/triton/python/test/unit/language/test_core_amd.py":1980:33), %1268: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1974:51), %1269: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)):  // 2 preds: ^bb0, ^bb2
    %1270 = builtin.unrealized_conversion_cast %1269 : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> to tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc3)
    %1271 = builtin.unrealized_conversion_cast %1268 : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> to tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc2)
    %1272 = builtin.unrealized_conversion_cast %1267 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> to tensor<64x32xf32, #mfma> loc(#loc6)
    %1273 = llvm.icmp "slt" %1266, %557 : i32 loc(#loc7)
    llvm.cond_br %1273, ^bb2, ^bb3 loc(#loc7)
  ^bb2:  // pred: ^bb1
    %1274 = llvm.extractvalue %1268[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1275 = llvm.extractvalue %1268[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1276 = llvm.extractvalue %1268[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1277 = llvm.extractvalue %1268[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1278 = llvm.extractvalue %1268[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1279 = llvm.extractvalue %1268[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1280 = llvm.extractvalue %1268[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1281 = llvm.extractvalue %1268[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1282 = llvm.extractvalue %1268[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1283 = llvm.extractvalue %1268[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1284 = llvm.extractvalue %1268[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1285 = llvm.extractvalue %1268[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1286 = llvm.extractvalue %1268[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1287 = llvm.extractvalue %1268[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1288 = llvm.extractvalue %1268[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1289 = llvm.extractvalue %1268[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %1290 = llvm.mlir.constant(true) : i1 loc(#loc4)
    %1291 = llvm.addrspacecast %1274 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %1292 = scf.if %1290 -> (i32) {
      %3570 = llvm.load %1291 : !llvm.ptr<i32> loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } loc(#loc4)
    %1293 = llvm.bitcast %1292 : i32 to vector<2xf16> loc(#loc4)
    %1294 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %1295 = llvm.extractelement %1293[%1294 : i32] : vector<2xf16> loc(#loc4)
    %1296 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %1297 = llvm.extractelement %1293[%1296 : i32] : vector<2xf16> loc(#loc4)
    %1298 = llvm.addrspacecast %1276 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %1299 = scf.if %1290 -> (i32) {
      %3570 = llvm.load %1298 : !llvm.ptr<i32> loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } loc(#loc4)
    %1300 = llvm.bitcast %1299 : i32 to vector<2xf16> loc(#loc4)
    %1301 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %1302 = llvm.extractelement %1300[%1301 : i32] : vector<2xf16> loc(#loc4)
    %1303 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %1304 = llvm.extractelement %1300[%1303 : i32] : vector<2xf16> loc(#loc4)
    %1305 = llvm.addrspacecast %1278 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %1306 = scf.if %1290 -> (i32) {
      %3570 = llvm.load %1305 : !llvm.ptr<i32> loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } loc(#loc4)
    %1307 = llvm.bitcast %1306 : i32 to vector<2xf16> loc(#loc4)
    %1308 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %1309 = llvm.extractelement %1307[%1308 : i32] : vector<2xf16> loc(#loc4)
    %1310 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %1311 = llvm.extractelement %1307[%1310 : i32] : vector<2xf16> loc(#loc4)
    %1312 = llvm.addrspacecast %1280 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %1313 = scf.if %1290 -> (i32) {
      %3570 = llvm.load %1312 : !llvm.ptr<i32> loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } loc(#loc4)
    %1314 = llvm.bitcast %1313 : i32 to vector<2xf16> loc(#loc4)
    %1315 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %1316 = llvm.extractelement %1314[%1315 : i32] : vector<2xf16> loc(#loc4)
    %1317 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %1318 = llvm.extractelement %1314[%1317 : i32] : vector<2xf16> loc(#loc4)
    %1319 = llvm.mlir.constant(true) : i1 loc(#loc4)
    %1320 = llvm.addrspacecast %1282 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %1321 = scf.if %1319 -> (i32) {
      %3570 = llvm.load %1320 : !llvm.ptr<i32> loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } loc(#loc4)
    %1322 = llvm.bitcast %1321 : i32 to vector<2xf16> loc(#loc4)
    %1323 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %1324 = llvm.extractelement %1322[%1323 : i32] : vector<2xf16> loc(#loc4)
    %1325 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %1326 = llvm.extractelement %1322[%1325 : i32] : vector<2xf16> loc(#loc4)
    %1327 = llvm.addrspacecast %1284 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %1328 = scf.if %1319 -> (i32) {
      %3570 = llvm.load %1327 : !llvm.ptr<i32> loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } loc(#loc4)
    %1329 = llvm.bitcast %1328 : i32 to vector<2xf16> loc(#loc4)
    %1330 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %1331 = llvm.extractelement %1329[%1330 : i32] : vector<2xf16> loc(#loc4)
    %1332 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %1333 = llvm.extractelement %1329[%1332 : i32] : vector<2xf16> loc(#loc4)
    %1334 = llvm.addrspacecast %1286 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %1335 = scf.if %1319 -> (i32) {
      %3570 = llvm.load %1334 : !llvm.ptr<i32> loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } loc(#loc4)
    %1336 = llvm.bitcast %1335 : i32 to vector<2xf16> loc(#loc4)
    %1337 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %1338 = llvm.extractelement %1336[%1337 : i32] : vector<2xf16> loc(#loc4)
    %1339 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %1340 = llvm.extractelement %1336[%1339 : i32] : vector<2xf16> loc(#loc4)
    %1341 = llvm.addrspacecast %1288 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %1342 = scf.if %1319 -> (i32) {
      %3570 = llvm.load %1341 : !llvm.ptr<i32> loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
      scf.yield %3570 : i32 loc(#loc4)
    } loc(#loc4)
    %1343 = llvm.bitcast %1342 : i32 to vector<2xf16> loc(#loc4)
    %1344 = llvm.mlir.constant(0 : index) : i32 loc(#loc4)
    %1345 = llvm.extractelement %1343[%1344 : i32] : vector<2xf16> loc(#loc4)
    %1346 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %1347 = llvm.extractelement %1343[%1346 : i32] : vector<2xf16> loc(#loc4)
    %1348 = llvm.mlir.undef : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)> loc(#loc4)
    %1349 = llvm.insertvalue %1295, %1348[0] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1350 = llvm.insertvalue %1297, %1349[1] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1351 = llvm.insertvalue %1302, %1350[2] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1352 = llvm.insertvalue %1304, %1351[3] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1353 = llvm.insertvalue %1309, %1352[4] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1354 = llvm.insertvalue %1311, %1353[5] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1355 = llvm.insertvalue %1316, %1354[6] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1356 = llvm.insertvalue %1318, %1355[7] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1357 = llvm.insertvalue %1324, %1356[8] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1358 = llvm.insertvalue %1326, %1357[9] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1359 = llvm.insertvalue %1331, %1358[10] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1360 = llvm.insertvalue %1333, %1359[11] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1361 = llvm.insertvalue %1338, %1360[12] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1362 = llvm.insertvalue %1340, %1361[13] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1363 = llvm.insertvalue %1345, %1362[14] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1364 = llvm.insertvalue %1347, %1363[15] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    rocdl.barrier loc(#loc4)
    %1365 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1366 = llvm.getelementptr %531[%1365] : (!llvm.ptr<i8, 3>, i32) -> !llvm.ptr<i8, 3> loc(#loc4)
    %1367 = llvm.bitcast %1366 : !llvm.ptr<i8, 3> to !llvm.ptr<f16, 3> loc(#loc4)
    %1368 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1369 = llvm.mlir.constant(64 : i32) : i32 loc(#loc4)
    %1370 = llvm.extractvalue %1364[0] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1371 = llvm.extractvalue %1364[1] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1372 = llvm.extractvalue %1364[2] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1373 = llvm.extractvalue %1364[3] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1374 = llvm.extractvalue %1364[4] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1375 = llvm.extractvalue %1364[5] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1376 = llvm.extractvalue %1364[6] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1377 = llvm.extractvalue %1364[7] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1378 = llvm.extractvalue %1364[8] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1379 = llvm.extractvalue %1364[9] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1380 = llvm.extractvalue %1364[10] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1381 = llvm.extractvalue %1364[11] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1382 = llvm.extractvalue %1364[12] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1383 = llvm.extractvalue %1364[13] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1384 = llvm.extractvalue %1364[14] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1385 = llvm.extractvalue %1364[15] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc4)
    %1386 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1387 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1388 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1389 = llvm.mul %1386, %1369  : i32 loc(#loc4)
    %1390 = llvm.add %1388, %1389  : i32 loc(#loc4)
    %1391 = llvm.mul %1387, %1368  : i32 loc(#loc4)
    %1392 = llvm.add %1390, %1391  : i32 loc(#loc4)
    %1393 = llvm.getelementptr %1367[%1392] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1394 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1395 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1396 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1397 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1398 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1399 = llvm.udiv %401, %1398  : i32 loc(#loc4)
    %1400 = llvm.urem %1399, %1397  : i32 loc(#loc4)
    %1401 = llvm.mul %401, %1369  : i32 loc(#loc4)
    %1402 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1403 = llvm.udiv %403, %1402  : i32 loc(#loc4)
    %1404 = llvm.xor %1403, %1400  : i32 loc(#loc4)
    %1405 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1406 = llvm.mul %1404, %1405  : i32 loc(#loc4)
    %1407 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1408 = llvm.urem %403, %1407  : i32 loc(#loc4)
    %1409 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1410 = llvm.udiv %1408, %1409  : i32 loc(#loc4)
    %1411 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1412 = llvm.mul %1410, %1411  : i32 loc(#loc4)
    %1413 = llvm.add %1406, %1412  : i32 loc(#loc4)
    %1414 = llvm.mul %1413, %1368  : i32 loc(#loc4)
    %1415 = llvm.add %1401, %1414  : i32 loc(#loc4)
    %1416 = llvm.add %1396, %1415  : i32 loc(#loc4)
    %1417 = llvm.getelementptr %1393[%1416] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1418 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1419 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1420 = llvm.mul %1419, %1369  : i32 loc(#loc4)
    %1421 = llvm.add %1420, %1418  : i32 loc(#loc4)
    %1422 = llvm.getelementptr %1417[%1421] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1423 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1424 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1425 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1426 = llvm.udiv %417, %1425  : i32 loc(#loc4)
    %1427 = llvm.urem %1426, %1424  : i32 loc(#loc4)
    %1428 = llvm.mul %401, %1369  : i32 loc(#loc4)
    %1429 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1430 = llvm.udiv %419, %1429  : i32 loc(#loc4)
    %1431 = llvm.xor %1430, %1427  : i32 loc(#loc4)
    %1432 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1433 = llvm.mul %1431, %1432  : i32 loc(#loc4)
    %1434 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1435 = llvm.urem %419, %1434  : i32 loc(#loc4)
    %1436 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1437 = llvm.udiv %1435, %1436  : i32 loc(#loc4)
    %1438 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1439 = llvm.mul %1437, %1438  : i32 loc(#loc4)
    %1440 = llvm.add %1433, %1439  : i32 loc(#loc4)
    %1441 = llvm.mul %1440, %1368  : i32 loc(#loc4)
    %1442 = llvm.add %1428, %1441  : i32 loc(#loc4)
    %1443 = llvm.add %1423, %1442  : i32 loc(#loc4)
    %1444 = llvm.getelementptr %1393[%1443] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1445 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1446 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1447 = llvm.mul %1446, %1369  : i32 loc(#loc4)
    %1448 = llvm.add %1447, %1445  : i32 loc(#loc4)
    %1449 = llvm.getelementptr %1444[%1448] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1450 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1451 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1452 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1453 = llvm.udiv %433, %1452  : i32 loc(#loc4)
    %1454 = llvm.urem %1453, %1451  : i32 loc(#loc4)
    %1455 = llvm.mul %401, %1369  : i32 loc(#loc4)
    %1456 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1457 = llvm.udiv %403, %1456  : i32 loc(#loc4)
    %1458 = llvm.xor %1457, %1454  : i32 loc(#loc4)
    %1459 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1460 = llvm.mul %1458, %1459  : i32 loc(#loc4)
    %1461 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1462 = llvm.urem %403, %1461  : i32 loc(#loc4)
    %1463 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1464 = llvm.udiv %1462, %1463  : i32 loc(#loc4)
    %1465 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1466 = llvm.mul %1464, %1465  : i32 loc(#loc4)
    %1467 = llvm.add %1460, %1466  : i32 loc(#loc4)
    %1468 = llvm.mul %1467, %1368  : i32 loc(#loc4)
    %1469 = llvm.add %1455, %1468  : i32 loc(#loc4)
    %1470 = llvm.add %1450, %1469  : i32 loc(#loc4)
    %1471 = llvm.getelementptr %1393[%1470] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1472 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1473 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %1474 = llvm.mul %1473, %1369  : i32 loc(#loc4)
    %1475 = llvm.add %1474, %1472  : i32 loc(#loc4)
    %1476 = llvm.getelementptr %1471[%1475] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1477 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1478 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1479 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1480 = llvm.udiv %449, %1479  : i32 loc(#loc4)
    %1481 = llvm.urem %1480, %1478  : i32 loc(#loc4)
    %1482 = llvm.mul %401, %1369  : i32 loc(#loc4)
    %1483 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1484 = llvm.udiv %419, %1483  : i32 loc(#loc4)
    %1485 = llvm.xor %1484, %1481  : i32 loc(#loc4)
    %1486 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1487 = llvm.mul %1485, %1486  : i32 loc(#loc4)
    %1488 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1489 = llvm.urem %419, %1488  : i32 loc(#loc4)
    %1490 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1491 = llvm.udiv %1489, %1490  : i32 loc(#loc4)
    %1492 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1493 = llvm.mul %1491, %1492  : i32 loc(#loc4)
    %1494 = llvm.add %1487, %1493  : i32 loc(#loc4)
    %1495 = llvm.mul %1494, %1368  : i32 loc(#loc4)
    %1496 = llvm.add %1482, %1495  : i32 loc(#loc4)
    %1497 = llvm.add %1477, %1496  : i32 loc(#loc4)
    %1498 = llvm.getelementptr %1393[%1497] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1499 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1500 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %1501 = llvm.mul %1500, %1369  : i32 loc(#loc4)
    %1502 = llvm.add %1501, %1499  : i32 loc(#loc4)
    %1503 = llvm.getelementptr %1498[%1502] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1504 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1505 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1506 = llvm.insertelement %1370, %1504[%1505 : i32] : vector<4xf16> loc(#loc4)
    %1507 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1508 = llvm.insertelement %1371, %1506[%1507 : i32] : vector<4xf16> loc(#loc4)
    %1509 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1510 = llvm.insertelement %1372, %1508[%1509 : i32] : vector<4xf16> loc(#loc4)
    %1511 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1512 = llvm.insertelement %1373, %1510[%1511 : i32] : vector<4xf16> loc(#loc4)
    %1513 = llvm.bitcast %1422 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %1512, %1513 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1514 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1515 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1516 = llvm.insertelement %1374, %1514[%1515 : i32] : vector<4xf16> loc(#loc4)
    %1517 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1518 = llvm.insertelement %1375, %1516[%1517 : i32] : vector<4xf16> loc(#loc4)
    %1519 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1520 = llvm.insertelement %1376, %1518[%1519 : i32] : vector<4xf16> loc(#loc4)
    %1521 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1522 = llvm.insertelement %1377, %1520[%1521 : i32] : vector<4xf16> loc(#loc4)
    %1523 = llvm.bitcast %1449 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %1522, %1523 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1524 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1525 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1526 = llvm.insertelement %1378, %1524[%1525 : i32] : vector<4xf16> loc(#loc4)
    %1527 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1528 = llvm.insertelement %1379, %1526[%1527 : i32] : vector<4xf16> loc(#loc4)
    %1529 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1530 = llvm.insertelement %1380, %1528[%1529 : i32] : vector<4xf16> loc(#loc4)
    %1531 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1532 = llvm.insertelement %1381, %1530[%1531 : i32] : vector<4xf16> loc(#loc4)
    %1533 = llvm.bitcast %1476 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %1532, %1533 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1534 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1535 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1536 = llvm.insertelement %1382, %1534[%1535 : i32] : vector<4xf16> loc(#loc4)
    %1537 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1538 = llvm.insertelement %1383, %1536[%1537 : i32] : vector<4xf16> loc(#loc4)
    %1539 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1540 = llvm.insertelement %1384, %1538[%1539 : i32] : vector<4xf16> loc(#loc4)
    %1541 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1542 = llvm.insertelement %1385, %1540[%1541 : i32] : vector<4xf16> loc(#loc4)
    %1543 = llvm.bitcast %1503 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %1542, %1543 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1544 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1545 = llvm.mlir.constant(64 : i32) : i32 loc(#loc4)
    %1546 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1547 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)> loc(#loc4)
    %1548 = llvm.insertvalue %1367, %1547[0] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc4)
    %1549 = llvm.insertvalue %1545, %1548[1] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc4)
    %1550 = llvm.insertvalue %1544, %1549[2] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc4)
    %1551 = llvm.insertvalue %1546, %1550[3] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc4)
    %1552 = llvm.insertvalue %1546, %1551[4] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc4)
    rocdl.barrier loc(#loc4)
    %1553 = llvm.extractvalue %1552[0] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc4)
    %1554 = llvm.extractvalue %1552[1] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc4)
    %1555 = llvm.extractvalue %1552[2] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc4)
    %1556 = llvm.extractvalue %1552[3] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc4)
    %1557 = llvm.extractvalue %1552[4] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc4)
    %1558 = rocdl.workitem.id.x : i32 loc(#loc4)
    %1559 = llvm.mlir.constant(64 : i32) : i32 loc(#loc4)
    %1560 = llvm.udiv %1558, %1559  : i32 loc(#loc4)
    %1561 = llvm.urem %1558, %1559  : i32 loc(#loc4)
    %1562 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1563 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1564 = llvm.urem %1560, %1563  : i32 loc(#loc4)
    %1565 = llvm.urem %1564, %1562  : i32 loc(#loc4)
    %1566 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1567 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %1568 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %1569 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1570 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %1571 = llvm.mul %1565, %1570  : i32 loc(#loc4)
    %1572 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1573 = llvm.urem %1561, %1568  : i32 loc(#loc4)
    %1574 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1575 = llvm.icmp "uge" %1561, %1567 : i32 loc(#loc4)
    %1576 = llvm.select %1575, %1574, %1566 : i1, i32 loc(#loc4)
    %1577 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1578 = llvm.add %1569, %1571  : i32 loc(#loc4)
    %1579 = llvm.add %1578, %1566  : i32 loc(#loc4)
    %1580 = llvm.add %1579, %1573  : i32 loc(#loc4)
    %1581 = llvm.add %1580, %1566  : i32 loc(#loc4)
    %1582 = llvm.add %1566, %1566  : i32 loc(#loc4)
    %1583 = llvm.add %1582, %1572  : i32 loc(#loc4)
    %1584 = llvm.add %1583, %1576  : i32 loc(#loc4)
    %1585 = llvm.add %1584, %1577  : i32 loc(#loc4)
    %1586 = llvm.add %1581, %1556  : i32 loc(#loc4)
    %1587 = llvm.add %1585, %1557  : i32 loc(#loc4)
    %1588 = llvm.mlir.constant(8 : i32) : i32 loc(#loc4)
    %1589 = llvm.urem %1561, %1568  : i32 loc(#loc4)
    %1590 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1591 = llvm.icmp "uge" %1561, %1567 : i32 loc(#loc4)
    %1592 = llvm.select %1591, %1590, %1566 : i1, i32 loc(#loc4)
    %1593 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1594 = llvm.add %1569, %1571  : i32 loc(#loc4)
    %1595 = llvm.add %1594, %1566  : i32 loc(#loc4)
    %1596 = llvm.add %1595, %1589  : i32 loc(#loc4)
    %1597 = llvm.add %1596, %1566  : i32 loc(#loc4)
    %1598 = llvm.add %1566, %1566  : i32 loc(#loc4)
    %1599 = llvm.add %1598, %1588  : i32 loc(#loc4)
    %1600 = llvm.add %1599, %1592  : i32 loc(#loc4)
    %1601 = llvm.add %1600, %1593  : i32 loc(#loc4)
    %1602 = llvm.add %1597, %1556  : i32 loc(#loc4)
    %1603 = llvm.add %1601, %1557  : i32 loc(#loc4)
    %1604 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1605 = llvm.urem %1561, %1568  : i32 loc(#loc4)
    %1606 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1607 = llvm.icmp "uge" %1561, %1567 : i32 loc(#loc4)
    %1608 = llvm.select %1607, %1606, %1566 : i1, i32 loc(#loc4)
    %1609 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1610 = llvm.add %1569, %1571  : i32 loc(#loc4)
    %1611 = llvm.add %1610, %1566  : i32 loc(#loc4)
    %1612 = llvm.add %1611, %1605  : i32 loc(#loc4)
    %1613 = llvm.add %1612, %1566  : i32 loc(#loc4)
    %1614 = llvm.add %1566, %1566  : i32 loc(#loc4)
    %1615 = llvm.add %1614, %1604  : i32 loc(#loc4)
    %1616 = llvm.add %1615, %1608  : i32 loc(#loc4)
    %1617 = llvm.add %1616, %1609  : i32 loc(#loc4)
    %1618 = llvm.add %1613, %1556  : i32 loc(#loc4)
    %1619 = llvm.add %1617, %1557  : i32 loc(#loc4)
    %1620 = llvm.mlir.constant(24 : i32) : i32 loc(#loc4)
    %1621 = llvm.urem %1561, %1568  : i32 loc(#loc4)
    %1622 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1623 = llvm.icmp "uge" %1561, %1567 : i32 loc(#loc4)
    %1624 = llvm.select %1623, %1622, %1566 : i1, i32 loc(#loc4)
    %1625 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1626 = llvm.add %1569, %1571  : i32 loc(#loc4)
    %1627 = llvm.add %1626, %1566  : i32 loc(#loc4)
    %1628 = llvm.add %1627, %1621  : i32 loc(#loc4)
    %1629 = llvm.add %1628, %1566  : i32 loc(#loc4)
    %1630 = llvm.add %1566, %1566  : i32 loc(#loc4)
    %1631 = llvm.add %1630, %1620  : i32 loc(#loc4)
    %1632 = llvm.add %1631, %1624  : i32 loc(#loc4)
    %1633 = llvm.add %1632, %1625  : i32 loc(#loc4)
    %1634 = llvm.add %1629, %1556  : i32 loc(#loc4)
    %1635 = llvm.add %1633, %1557  : i32 loc(#loc4)
    %1636 = llvm.mlir.constant(32 : i32) : i32 loc(#loc4)
    %1637 = llvm.urem %1561, %1568  : i32 loc(#loc4)
    %1638 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1639 = llvm.icmp "uge" %1561, %1567 : i32 loc(#loc4)
    %1640 = llvm.select %1639, %1638, %1566 : i1, i32 loc(#loc4)
    %1641 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1642 = llvm.add %1569, %1571  : i32 loc(#loc4)
    %1643 = llvm.add %1642, %1566  : i32 loc(#loc4)
    %1644 = llvm.add %1643, %1637  : i32 loc(#loc4)
    %1645 = llvm.add %1644, %1566  : i32 loc(#loc4)
    %1646 = llvm.add %1566, %1566  : i32 loc(#loc4)
    %1647 = llvm.add %1646, %1636  : i32 loc(#loc4)
    %1648 = llvm.add %1647, %1640  : i32 loc(#loc4)
    %1649 = llvm.add %1648, %1641  : i32 loc(#loc4)
    %1650 = llvm.add %1645, %1556  : i32 loc(#loc4)
    %1651 = llvm.add %1649, %1557  : i32 loc(#loc4)
    %1652 = llvm.mlir.constant(40 : i32) : i32 loc(#loc4)
    %1653 = llvm.urem %1561, %1568  : i32 loc(#loc4)
    %1654 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1655 = llvm.icmp "uge" %1561, %1567 : i32 loc(#loc4)
    %1656 = llvm.select %1655, %1654, %1566 : i1, i32 loc(#loc4)
    %1657 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1658 = llvm.add %1569, %1571  : i32 loc(#loc4)
    %1659 = llvm.add %1658, %1566  : i32 loc(#loc4)
    %1660 = llvm.add %1659, %1653  : i32 loc(#loc4)
    %1661 = llvm.add %1660, %1566  : i32 loc(#loc4)
    %1662 = llvm.add %1566, %1566  : i32 loc(#loc4)
    %1663 = llvm.add %1662, %1652  : i32 loc(#loc4)
    %1664 = llvm.add %1663, %1656  : i32 loc(#loc4)
    %1665 = llvm.add %1664, %1657  : i32 loc(#loc4)
    %1666 = llvm.add %1661, %1556  : i32 loc(#loc4)
    %1667 = llvm.add %1665, %1557  : i32 loc(#loc4)
    %1668 = llvm.mlir.constant(48 : i32) : i32 loc(#loc4)
    %1669 = llvm.urem %1561, %1568  : i32 loc(#loc4)
    %1670 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1671 = llvm.icmp "uge" %1561, %1567 : i32 loc(#loc4)
    %1672 = llvm.select %1671, %1670, %1566 : i1, i32 loc(#loc4)
    %1673 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1674 = llvm.add %1569, %1571  : i32 loc(#loc4)
    %1675 = llvm.add %1674, %1566  : i32 loc(#loc4)
    %1676 = llvm.add %1675, %1669  : i32 loc(#loc4)
    %1677 = llvm.add %1676, %1566  : i32 loc(#loc4)
    %1678 = llvm.add %1566, %1566  : i32 loc(#loc4)
    %1679 = llvm.add %1678, %1668  : i32 loc(#loc4)
    %1680 = llvm.add %1679, %1672  : i32 loc(#loc4)
    %1681 = llvm.add %1680, %1673  : i32 loc(#loc4)
    %1682 = llvm.add %1677, %1556  : i32 loc(#loc4)
    %1683 = llvm.add %1681, %1557  : i32 loc(#loc4)
    %1684 = llvm.mlir.constant(56 : i32) : i32 loc(#loc4)
    %1685 = llvm.urem %1561, %1568  : i32 loc(#loc4)
    %1686 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1687 = llvm.icmp "uge" %1561, %1567 : i32 loc(#loc4)
    %1688 = llvm.select %1687, %1686, %1566 : i1, i32 loc(#loc4)
    %1689 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1690 = llvm.add %1569, %1571  : i32 loc(#loc4)
    %1691 = llvm.add %1690, %1566  : i32 loc(#loc4)
    %1692 = llvm.add %1691, %1685  : i32 loc(#loc4)
    %1693 = llvm.add %1692, %1566  : i32 loc(#loc4)
    %1694 = llvm.add %1566, %1566  : i32 loc(#loc4)
    %1695 = llvm.add %1694, %1684  : i32 loc(#loc4)
    %1696 = llvm.add %1695, %1688  : i32 loc(#loc4)
    %1697 = llvm.add %1696, %1689  : i32 loc(#loc4)
    %1698 = llvm.add %1693, %1556  : i32 loc(#loc4)
    %1699 = llvm.add %1697, %1557  : i32 loc(#loc4)
    %1700 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1701 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1702 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1703 = llvm.udiv %1586, %1701  : i32 loc(#loc4)
    %1704 = llvm.urem %1703, %1702  : i32 loc(#loc4)
    %1705 = llvm.udiv %1587, %1700  : i32 loc(#loc4)
    %1706 = llvm.xor %1705, %1704  : i32 loc(#loc4)
    %1707 = llvm.mul %1706, %1700  : i32 loc(#loc4)
    %1708 = llvm.urem %1587, %1700  : i32 loc(#loc4)
    %1709 = llvm.add %1707, %1708  : i32 loc(#loc4)
    %1710 = llvm.mul %1586, %1554  : i32 loc(#loc4)
    %1711 = llvm.mul %1709, %1555  : i32 loc(#loc4)
    %1712 = llvm.add %1710, %1711  : i32 loc(#loc4)
    %1713 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1714 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1715 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1716 = llvm.udiv %1602, %1714  : i32 loc(#loc4)
    %1717 = llvm.urem %1716, %1715  : i32 loc(#loc4)
    %1718 = llvm.udiv %1603, %1713  : i32 loc(#loc4)
    %1719 = llvm.xor %1718, %1717  : i32 loc(#loc4)
    %1720 = llvm.mul %1719, %1713  : i32 loc(#loc4)
    %1721 = llvm.urem %1603, %1713  : i32 loc(#loc4)
    %1722 = llvm.add %1720, %1721  : i32 loc(#loc4)
    %1723 = llvm.mul %1602, %1554  : i32 loc(#loc4)
    %1724 = llvm.mul %1722, %1555  : i32 loc(#loc4)
    %1725 = llvm.add %1723, %1724  : i32 loc(#loc4)
    %1726 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1727 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1728 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1729 = llvm.udiv %1618, %1727  : i32 loc(#loc4)
    %1730 = llvm.urem %1729, %1728  : i32 loc(#loc4)
    %1731 = llvm.udiv %1619, %1726  : i32 loc(#loc4)
    %1732 = llvm.xor %1731, %1730  : i32 loc(#loc4)
    %1733 = llvm.mul %1732, %1726  : i32 loc(#loc4)
    %1734 = llvm.urem %1619, %1726  : i32 loc(#loc4)
    %1735 = llvm.add %1733, %1734  : i32 loc(#loc4)
    %1736 = llvm.mul %1618, %1554  : i32 loc(#loc4)
    %1737 = llvm.mul %1735, %1555  : i32 loc(#loc4)
    %1738 = llvm.add %1736, %1737  : i32 loc(#loc4)
    %1739 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1740 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1741 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1742 = llvm.udiv %1634, %1740  : i32 loc(#loc4)
    %1743 = llvm.urem %1742, %1741  : i32 loc(#loc4)
    %1744 = llvm.udiv %1635, %1739  : i32 loc(#loc4)
    %1745 = llvm.xor %1744, %1743  : i32 loc(#loc4)
    %1746 = llvm.mul %1745, %1739  : i32 loc(#loc4)
    %1747 = llvm.urem %1635, %1739  : i32 loc(#loc4)
    %1748 = llvm.add %1746, %1747  : i32 loc(#loc4)
    %1749 = llvm.mul %1634, %1554  : i32 loc(#loc4)
    %1750 = llvm.mul %1748, %1555  : i32 loc(#loc4)
    %1751 = llvm.add %1749, %1750  : i32 loc(#loc4)
    %1752 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1753 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1754 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1755 = llvm.udiv %1650, %1753  : i32 loc(#loc4)
    %1756 = llvm.urem %1755, %1754  : i32 loc(#loc4)
    %1757 = llvm.udiv %1651, %1752  : i32 loc(#loc4)
    %1758 = llvm.xor %1757, %1756  : i32 loc(#loc4)
    %1759 = llvm.mul %1758, %1752  : i32 loc(#loc4)
    %1760 = llvm.urem %1651, %1752  : i32 loc(#loc4)
    %1761 = llvm.add %1759, %1760  : i32 loc(#loc4)
    %1762 = llvm.mul %1650, %1554  : i32 loc(#loc4)
    %1763 = llvm.mul %1761, %1555  : i32 loc(#loc4)
    %1764 = llvm.add %1762, %1763  : i32 loc(#loc4)
    %1765 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1766 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1767 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1768 = llvm.udiv %1666, %1766  : i32 loc(#loc4)
    %1769 = llvm.urem %1768, %1767  : i32 loc(#loc4)
    %1770 = llvm.udiv %1667, %1765  : i32 loc(#loc4)
    %1771 = llvm.xor %1770, %1769  : i32 loc(#loc4)
    %1772 = llvm.mul %1771, %1765  : i32 loc(#loc4)
    %1773 = llvm.urem %1667, %1765  : i32 loc(#loc4)
    %1774 = llvm.add %1772, %1773  : i32 loc(#loc4)
    %1775 = llvm.mul %1666, %1554  : i32 loc(#loc4)
    %1776 = llvm.mul %1774, %1555  : i32 loc(#loc4)
    %1777 = llvm.add %1775, %1776  : i32 loc(#loc4)
    %1778 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1779 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1780 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1781 = llvm.udiv %1682, %1779  : i32 loc(#loc4)
    %1782 = llvm.urem %1781, %1780  : i32 loc(#loc4)
    %1783 = llvm.udiv %1683, %1778  : i32 loc(#loc4)
    %1784 = llvm.xor %1783, %1782  : i32 loc(#loc4)
    %1785 = llvm.mul %1784, %1778  : i32 loc(#loc4)
    %1786 = llvm.urem %1683, %1778  : i32 loc(#loc4)
    %1787 = llvm.add %1785, %1786  : i32 loc(#loc4)
    %1788 = llvm.mul %1682, %1554  : i32 loc(#loc4)
    %1789 = llvm.mul %1787, %1555  : i32 loc(#loc4)
    %1790 = llvm.add %1788, %1789  : i32 loc(#loc4)
    %1791 = llvm.mlir.constant(4 : i32) : i32 loc(#loc4)
    %1792 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1793 = llvm.mlir.constant(16 : i32) : i32 loc(#loc4)
    %1794 = llvm.udiv %1698, %1792  : i32 loc(#loc4)
    %1795 = llvm.urem %1794, %1793  : i32 loc(#loc4)
    %1796 = llvm.udiv %1699, %1791  : i32 loc(#loc4)
    %1797 = llvm.xor %1796, %1795  : i32 loc(#loc4)
    %1798 = llvm.mul %1797, %1791  : i32 loc(#loc4)
    %1799 = llvm.urem %1699, %1791  : i32 loc(#loc4)
    %1800 = llvm.add %1798, %1799  : i32 loc(#loc4)
    %1801 = llvm.mul %1698, %1554  : i32 loc(#loc4)
    %1802 = llvm.mul %1800, %1555  : i32 loc(#loc4)
    %1803 = llvm.add %1801, %1802  : i32 loc(#loc4)
    %1804 = llvm.mul %1556, %1554  : i32 loc(#loc4)
    %1805 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1806 = llvm.sub %1805, %1804  : i32 loc(#loc4)
    %1807 = llvm.getelementptr %1553[%1806] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1808 = llvm.mul %1557, %1555  : i32 loc(#loc4)
    %1809 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1810 = llvm.sub %1809, %1808  : i32 loc(#loc4)
    %1811 = llvm.getelementptr %1807[%1810] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1812 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1813 = llvm.getelementptr %1811[%1712] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1814 = llvm.bitcast %1813 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1815 = llvm.load %1814 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1816 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1817 = llvm.extractelement %1815[%1816 : i32] : vector<4xf16> loc(#loc4)
    %1818 = llvm.bitcast %1817 : f16 to f16 loc(#loc4)
    %1819 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1820 = llvm.insertelement %1818, %1812[%1819 : i32] : vector<4xf16> loc(#loc4)
    %1821 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1822 = llvm.extractelement %1815[%1821 : i32] : vector<4xf16> loc(#loc4)
    %1823 = llvm.bitcast %1822 : f16 to f16 loc(#loc4)
    %1824 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1825 = llvm.insertelement %1823, %1820[%1824 : i32] : vector<4xf16> loc(#loc4)
    %1826 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1827 = llvm.extractelement %1815[%1826 : i32] : vector<4xf16> loc(#loc4)
    %1828 = llvm.bitcast %1827 : f16 to f16 loc(#loc4)
    %1829 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1830 = llvm.insertelement %1828, %1825[%1829 : i32] : vector<4xf16> loc(#loc4)
    %1831 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1832 = llvm.extractelement %1815[%1831 : i32] : vector<4xf16> loc(#loc4)
    %1833 = llvm.bitcast %1832 : f16 to f16 loc(#loc4)
    %1834 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1835 = llvm.insertelement %1833, %1830[%1834 : i32] : vector<4xf16> loc(#loc4)
    %1836 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1837 = llvm.getelementptr %1811[%1725] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1838 = llvm.bitcast %1837 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1839 = llvm.load %1838 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1840 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1841 = llvm.extractelement %1839[%1840 : i32] : vector<4xf16> loc(#loc4)
    %1842 = llvm.bitcast %1841 : f16 to f16 loc(#loc4)
    %1843 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1844 = llvm.insertelement %1842, %1836[%1843 : i32] : vector<4xf16> loc(#loc4)
    %1845 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1846 = llvm.extractelement %1839[%1845 : i32] : vector<4xf16> loc(#loc4)
    %1847 = llvm.bitcast %1846 : f16 to f16 loc(#loc4)
    %1848 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1849 = llvm.insertelement %1847, %1844[%1848 : i32] : vector<4xf16> loc(#loc4)
    %1850 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1851 = llvm.extractelement %1839[%1850 : i32] : vector<4xf16> loc(#loc4)
    %1852 = llvm.bitcast %1851 : f16 to f16 loc(#loc4)
    %1853 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1854 = llvm.insertelement %1852, %1849[%1853 : i32] : vector<4xf16> loc(#loc4)
    %1855 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1856 = llvm.extractelement %1839[%1855 : i32] : vector<4xf16> loc(#loc4)
    %1857 = llvm.bitcast %1856 : f16 to f16 loc(#loc4)
    %1858 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1859 = llvm.insertelement %1857, %1854[%1858 : i32] : vector<4xf16> loc(#loc4)
    %1860 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1861 = llvm.getelementptr %1811[%1738] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1862 = llvm.bitcast %1861 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1863 = llvm.load %1862 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1864 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1865 = llvm.extractelement %1863[%1864 : i32] : vector<4xf16> loc(#loc4)
    %1866 = llvm.bitcast %1865 : f16 to f16 loc(#loc4)
    %1867 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1868 = llvm.insertelement %1866, %1860[%1867 : i32] : vector<4xf16> loc(#loc4)
    %1869 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1870 = llvm.extractelement %1863[%1869 : i32] : vector<4xf16> loc(#loc4)
    %1871 = llvm.bitcast %1870 : f16 to f16 loc(#loc4)
    %1872 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1873 = llvm.insertelement %1871, %1868[%1872 : i32] : vector<4xf16> loc(#loc4)
    %1874 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1875 = llvm.extractelement %1863[%1874 : i32] : vector<4xf16> loc(#loc4)
    %1876 = llvm.bitcast %1875 : f16 to f16 loc(#loc4)
    %1877 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1878 = llvm.insertelement %1876, %1873[%1877 : i32] : vector<4xf16> loc(#loc4)
    %1879 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1880 = llvm.extractelement %1863[%1879 : i32] : vector<4xf16> loc(#loc4)
    %1881 = llvm.bitcast %1880 : f16 to f16 loc(#loc4)
    %1882 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1883 = llvm.insertelement %1881, %1878[%1882 : i32] : vector<4xf16> loc(#loc4)
    %1884 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1885 = llvm.getelementptr %1811[%1751] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1886 = llvm.bitcast %1885 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1887 = llvm.load %1886 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1888 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1889 = llvm.extractelement %1887[%1888 : i32] : vector<4xf16> loc(#loc4)
    %1890 = llvm.bitcast %1889 : f16 to f16 loc(#loc4)
    %1891 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1892 = llvm.insertelement %1890, %1884[%1891 : i32] : vector<4xf16> loc(#loc4)
    %1893 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1894 = llvm.extractelement %1887[%1893 : i32] : vector<4xf16> loc(#loc4)
    %1895 = llvm.bitcast %1894 : f16 to f16 loc(#loc4)
    %1896 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1897 = llvm.insertelement %1895, %1892[%1896 : i32] : vector<4xf16> loc(#loc4)
    %1898 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1899 = llvm.extractelement %1887[%1898 : i32] : vector<4xf16> loc(#loc4)
    %1900 = llvm.bitcast %1899 : f16 to f16 loc(#loc4)
    %1901 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1902 = llvm.insertelement %1900, %1897[%1901 : i32] : vector<4xf16> loc(#loc4)
    %1903 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1904 = llvm.extractelement %1887[%1903 : i32] : vector<4xf16> loc(#loc4)
    %1905 = llvm.bitcast %1904 : f16 to f16 loc(#loc4)
    %1906 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1907 = llvm.insertelement %1905, %1902[%1906 : i32] : vector<4xf16> loc(#loc4)
    %1908 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1909 = llvm.getelementptr %1811[%1764] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1910 = llvm.bitcast %1909 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1911 = llvm.load %1910 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1912 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1913 = llvm.extractelement %1911[%1912 : i32] : vector<4xf16> loc(#loc4)
    %1914 = llvm.bitcast %1913 : f16 to f16 loc(#loc4)
    %1915 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1916 = llvm.insertelement %1914, %1908[%1915 : i32] : vector<4xf16> loc(#loc4)
    %1917 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1918 = llvm.extractelement %1911[%1917 : i32] : vector<4xf16> loc(#loc4)
    %1919 = llvm.bitcast %1918 : f16 to f16 loc(#loc4)
    %1920 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1921 = llvm.insertelement %1919, %1916[%1920 : i32] : vector<4xf16> loc(#loc4)
    %1922 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1923 = llvm.extractelement %1911[%1922 : i32] : vector<4xf16> loc(#loc4)
    %1924 = llvm.bitcast %1923 : f16 to f16 loc(#loc4)
    %1925 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1926 = llvm.insertelement %1924, %1921[%1925 : i32] : vector<4xf16> loc(#loc4)
    %1927 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1928 = llvm.extractelement %1911[%1927 : i32] : vector<4xf16> loc(#loc4)
    %1929 = llvm.bitcast %1928 : f16 to f16 loc(#loc4)
    %1930 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1931 = llvm.insertelement %1929, %1926[%1930 : i32] : vector<4xf16> loc(#loc4)
    %1932 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1933 = llvm.getelementptr %1811[%1777] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1934 = llvm.bitcast %1933 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1935 = llvm.load %1934 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1936 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1937 = llvm.extractelement %1935[%1936 : i32] : vector<4xf16> loc(#loc4)
    %1938 = llvm.bitcast %1937 : f16 to f16 loc(#loc4)
    %1939 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1940 = llvm.insertelement %1938, %1932[%1939 : i32] : vector<4xf16> loc(#loc4)
    %1941 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1942 = llvm.extractelement %1935[%1941 : i32] : vector<4xf16> loc(#loc4)
    %1943 = llvm.bitcast %1942 : f16 to f16 loc(#loc4)
    %1944 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1945 = llvm.insertelement %1943, %1940[%1944 : i32] : vector<4xf16> loc(#loc4)
    %1946 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1947 = llvm.extractelement %1935[%1946 : i32] : vector<4xf16> loc(#loc4)
    %1948 = llvm.bitcast %1947 : f16 to f16 loc(#loc4)
    %1949 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1950 = llvm.insertelement %1948, %1945[%1949 : i32] : vector<4xf16> loc(#loc4)
    %1951 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1952 = llvm.extractelement %1935[%1951 : i32] : vector<4xf16> loc(#loc4)
    %1953 = llvm.bitcast %1952 : f16 to f16 loc(#loc4)
    %1954 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1955 = llvm.insertelement %1953, %1950[%1954 : i32] : vector<4xf16> loc(#loc4)
    %1956 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1957 = llvm.getelementptr %1811[%1790] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1958 = llvm.bitcast %1957 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1959 = llvm.load %1958 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1960 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1961 = llvm.extractelement %1959[%1960 : i32] : vector<4xf16> loc(#loc4)
    %1962 = llvm.bitcast %1961 : f16 to f16 loc(#loc4)
    %1963 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1964 = llvm.insertelement %1962, %1956[%1963 : i32] : vector<4xf16> loc(#loc4)
    %1965 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1966 = llvm.extractelement %1959[%1965 : i32] : vector<4xf16> loc(#loc4)
    %1967 = llvm.bitcast %1966 : f16 to f16 loc(#loc4)
    %1968 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1969 = llvm.insertelement %1967, %1964[%1968 : i32] : vector<4xf16> loc(#loc4)
    %1970 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1971 = llvm.extractelement %1959[%1970 : i32] : vector<4xf16> loc(#loc4)
    %1972 = llvm.bitcast %1971 : f16 to f16 loc(#loc4)
    %1973 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1974 = llvm.insertelement %1972, %1969[%1973 : i32] : vector<4xf16> loc(#loc4)
    %1975 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1976 = llvm.extractelement %1959[%1975 : i32] : vector<4xf16> loc(#loc4)
    %1977 = llvm.bitcast %1976 : f16 to f16 loc(#loc4)
    %1978 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %1979 = llvm.insertelement %1977, %1974[%1978 : i32] : vector<4xf16> loc(#loc4)
    %1980 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %1981 = llvm.getelementptr %1811[%1803] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %1982 = llvm.bitcast %1981 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1983 = llvm.load %1982 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %1984 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1985 = llvm.extractelement %1983[%1984 : i32] : vector<4xf16> loc(#loc4)
    %1986 = llvm.bitcast %1985 : f16 to f16 loc(#loc4)
    %1987 = llvm.mlir.constant(0 : i32) : i32 loc(#loc4)
    %1988 = llvm.insertelement %1986, %1980[%1987 : i32] : vector<4xf16> loc(#loc4)
    %1989 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1990 = llvm.extractelement %1983[%1989 : i32] : vector<4xf16> loc(#loc4)
    %1991 = llvm.bitcast %1990 : f16 to f16 loc(#loc4)
    %1992 = llvm.mlir.constant(1 : i32) : i32 loc(#loc4)
    %1993 = llvm.insertelement %1991, %1988[%1992 : i32] : vector<4xf16> loc(#loc4)
    %1994 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1995 = llvm.extractelement %1983[%1994 : i32] : vector<4xf16> loc(#loc4)
    %1996 = llvm.bitcast %1995 : f16 to f16 loc(#loc4)
    %1997 = llvm.mlir.constant(2 : i32) : i32 loc(#loc4)
    %1998 = llvm.insertelement %1996, %1993[%1997 : i32] : vector<4xf16> loc(#loc4)
    %1999 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %2000 = llvm.extractelement %1983[%1999 : i32] : vector<4xf16> loc(#loc4)
    %2001 = llvm.bitcast %2000 : f16 to f16 loc(#loc4)
    %2002 = llvm.mlir.constant(3 : i32) : i32 loc(#loc4)
    %2003 = llvm.insertelement %2001, %1998[%2002 : i32] : vector<4xf16> loc(#loc4)
    %2004 = llvm.mlir.undef : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)> loc(#loc4)
    %2005 = llvm.insertvalue %1835, %2004[0] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc4)
    %2006 = llvm.insertvalue %1859, %2005[1] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc4)
    %2007 = llvm.insertvalue %1883, %2006[2] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc4)
    %2008 = llvm.insertvalue %1907, %2007[3] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc4)
    %2009 = llvm.insertvalue %1931, %2008[4] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc4)
    %2010 = llvm.insertvalue %1955, %2009[5] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc4)
    %2011 = llvm.insertvalue %1979, %2010[6] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc4)
    %2012 = llvm.insertvalue %2003, %2011[7] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc4)
    %2013 = llvm.extractvalue %1269[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc5)
    %2014 = llvm.extractvalue %1269[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc5)
    %2015 = llvm.extractvalue %1269[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc5)
    %2016 = llvm.extractvalue %1269[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc5)
    %2017 = llvm.extractvalue %1269[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc5)
    %2018 = llvm.extractvalue %1269[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc5)
    %2019 = llvm.extractvalue %1269[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc5)
    %2020 = llvm.extractvalue %1269[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc5)
    %2021 = llvm.mlir.constant(true) : i1 loc(#loc5)
    %2022 = llvm.addrspacecast %2013 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc5)
    %2023 = scf.if %2021 -> (i32) {
      %3570 = llvm.load %2022 : !llvm.ptr<i32> loc(#loc5)
      scf.yield %3570 : i32 loc(#loc5)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
      scf.yield %3570 : i32 loc(#loc5)
    } loc(#loc5)
    %2024 = llvm.bitcast %2023 : i32 to vector<2xf16> loc(#loc5)
    %2025 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %2026 = llvm.extractelement %2024[%2025 : i32] : vector<2xf16> loc(#loc5)
    %2027 = llvm.mlir.constant(1 : index) : i32 loc(#loc5)
    %2028 = llvm.extractelement %2024[%2027 : i32] : vector<2xf16> loc(#loc5)
    %2029 = llvm.addrspacecast %2015 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc5)
    %2030 = scf.if %2021 -> (i32) {
      %3570 = llvm.load %2029 : !llvm.ptr<i32> loc(#loc5)
      scf.yield %3570 : i32 loc(#loc5)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
      scf.yield %3570 : i32 loc(#loc5)
    } loc(#loc5)
    %2031 = llvm.bitcast %2030 : i32 to vector<2xf16> loc(#loc5)
    %2032 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %2033 = llvm.extractelement %2031[%2032 : i32] : vector<2xf16> loc(#loc5)
    %2034 = llvm.mlir.constant(1 : index) : i32 loc(#loc5)
    %2035 = llvm.extractelement %2031[%2034 : i32] : vector<2xf16> loc(#loc5)
    %2036 = llvm.addrspacecast %2017 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc5)
    %2037 = scf.if %2021 -> (i32) {
      %3570 = llvm.load %2036 : !llvm.ptr<i32> loc(#loc5)
      scf.yield %3570 : i32 loc(#loc5)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
      scf.yield %3570 : i32 loc(#loc5)
    } loc(#loc5)
    %2038 = llvm.bitcast %2037 : i32 to vector<2xf16> loc(#loc5)
    %2039 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %2040 = llvm.extractelement %2038[%2039 : i32] : vector<2xf16> loc(#loc5)
    %2041 = llvm.mlir.constant(1 : index) : i32 loc(#loc5)
    %2042 = llvm.extractelement %2038[%2041 : i32] : vector<2xf16> loc(#loc5)
    %2043 = llvm.addrspacecast %2019 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc5)
    %2044 = scf.if %2021 -> (i32) {
      %3570 = llvm.load %2043 : !llvm.ptr<i32> loc(#loc5)
      scf.yield %3570 : i32 loc(#loc5)
    } else {
      %3570 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
      scf.yield %3570 : i32 loc(#loc5)
    } loc(#loc5)
    %2045 = llvm.bitcast %2044 : i32 to vector<2xf16> loc(#loc5)
    %2046 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %2047 = llvm.extractelement %2045[%2046 : i32] : vector<2xf16> loc(#loc5)
    %2048 = llvm.mlir.constant(1 : index) : i32 loc(#loc5)
    %2049 = llvm.extractelement %2045[%2048 : i32] : vector<2xf16> loc(#loc5)
    %2050 = llvm.mlir.undef : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)> loc(#loc5)
    %2051 = llvm.insertvalue %2026, %2050[0] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2052 = llvm.insertvalue %2028, %2051[1] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2053 = llvm.insertvalue %2033, %2052[2] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2054 = llvm.insertvalue %2035, %2053[3] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2055 = llvm.insertvalue %2040, %2054[4] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2056 = llvm.insertvalue %2042, %2055[5] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2057 = llvm.insertvalue %2047, %2056[6] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2058 = llvm.insertvalue %2049, %2057[7] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    rocdl.barrier loc(#loc5)
    %2059 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2060 = llvm.getelementptr %531[%2059] : (!llvm.ptr<i8, 3>, i32) -> !llvm.ptr<i8, 3> loc(#loc5)
    %2061 = llvm.bitcast %2060 : !llvm.ptr<i8, 3> to !llvm.ptr<f16, 3> loc(#loc5)
    %2062 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2063 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2064 = llvm.extractvalue %2058[0] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2065 = llvm.extractvalue %2058[1] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2066 = llvm.extractvalue %2058[2] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2067 = llvm.extractvalue %2058[3] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2068 = llvm.extractvalue %2058[4] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2069 = llvm.extractvalue %2058[5] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2070 = llvm.extractvalue %2058[6] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2071 = llvm.extractvalue %2058[7] : !llvm.struct<(f16, f16, f16, f16, f16, f16, f16, f16)>  loc(#loc5)
    %2072 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2073 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2074 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2075 = llvm.mul %2072, %2063  : i32 loc(#loc5)
    %2076 = llvm.add %2074, %2075  : i32 loc(#loc5)
    %2077 = llvm.mul %2073, %2062  : i32 loc(#loc5)
    %2078 = llvm.add %2076, %2077  : i32 loc(#loc5)
    %2079 = llvm.getelementptr %2061[%2078] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2080 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2081 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2082 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2083 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2084 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2085 = llvm.udiv %499, %2084  : i32 loc(#loc5)
    %2086 = llvm.urem %2085, %2083  : i32 loc(#loc5)
    %2087 = llvm.mul %499, %2063  : i32 loc(#loc5)
    %2088 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2089 = llvm.udiv %501, %2088  : i32 loc(#loc5)
    %2090 = llvm.xor %2089, %2086  : i32 loc(#loc5)
    %2091 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2092 = llvm.mul %2090, %2091  : i32 loc(#loc5)
    %2093 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2094 = llvm.urem %501, %2093  : i32 loc(#loc5)
    %2095 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2096 = llvm.udiv %2094, %2095  : i32 loc(#loc5)
    %2097 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2098 = llvm.mul %2096, %2097  : i32 loc(#loc5)
    %2099 = llvm.add %2092, %2098  : i32 loc(#loc5)
    %2100 = llvm.mul %2099, %2062  : i32 loc(#loc5)
    %2101 = llvm.add %2087, %2100  : i32 loc(#loc5)
    %2102 = llvm.add %2082, %2101  : i32 loc(#loc5)
    %2103 = llvm.getelementptr %2079[%2102] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2104 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2105 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2106 = llvm.mul %2105, %2063  : i32 loc(#loc5)
    %2107 = llvm.add %2106, %2104  : i32 loc(#loc5)
    %2108 = llvm.getelementptr %2103[%2107] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2109 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2110 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2111 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2112 = llvm.udiv %503, %2111  : i32 loc(#loc5)
    %2113 = llvm.urem %2112, %2110  : i32 loc(#loc5)
    %2114 = llvm.mul %499, %2063  : i32 loc(#loc5)
    %2115 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2116 = llvm.udiv %501, %2115  : i32 loc(#loc5)
    %2117 = llvm.xor %2116, %2113  : i32 loc(#loc5)
    %2118 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2119 = llvm.mul %2117, %2118  : i32 loc(#loc5)
    %2120 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2121 = llvm.urem %501, %2120  : i32 loc(#loc5)
    %2122 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2123 = llvm.udiv %2121, %2122  : i32 loc(#loc5)
    %2124 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2125 = llvm.mul %2123, %2124  : i32 loc(#loc5)
    %2126 = llvm.add %2119, %2125  : i32 loc(#loc5)
    %2127 = llvm.mul %2126, %2062  : i32 loc(#loc5)
    %2128 = llvm.add %2114, %2127  : i32 loc(#loc5)
    %2129 = llvm.add %2109, %2128  : i32 loc(#loc5)
    %2130 = llvm.getelementptr %2079[%2129] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2131 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2132 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2133 = llvm.mul %2132, %2063  : i32 loc(#loc5)
    %2134 = llvm.add %2133, %2131  : i32 loc(#loc5)
    %2135 = llvm.getelementptr %2130[%2134] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2136 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2137 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2138 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2139 = llvm.udiv %507, %2138  : i32 loc(#loc5)
    %2140 = llvm.urem %2139, %2137  : i32 loc(#loc5)
    %2141 = llvm.mul %499, %2063  : i32 loc(#loc5)
    %2142 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2143 = llvm.udiv %501, %2142  : i32 loc(#loc5)
    %2144 = llvm.xor %2143, %2140  : i32 loc(#loc5)
    %2145 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2146 = llvm.mul %2144, %2145  : i32 loc(#loc5)
    %2147 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2148 = llvm.urem %501, %2147  : i32 loc(#loc5)
    %2149 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2150 = llvm.udiv %2148, %2149  : i32 loc(#loc5)
    %2151 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2152 = llvm.mul %2150, %2151  : i32 loc(#loc5)
    %2153 = llvm.add %2146, %2152  : i32 loc(#loc5)
    %2154 = llvm.mul %2153, %2062  : i32 loc(#loc5)
    %2155 = llvm.add %2141, %2154  : i32 loc(#loc5)
    %2156 = llvm.add %2136, %2155  : i32 loc(#loc5)
    %2157 = llvm.getelementptr %2079[%2156] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2158 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2159 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2160 = llvm.mul %2159, %2063  : i32 loc(#loc5)
    %2161 = llvm.add %2160, %2158  : i32 loc(#loc5)
    %2162 = llvm.getelementptr %2157[%2161] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2163 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2164 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2165 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2166 = llvm.udiv %511, %2165  : i32 loc(#loc5)
    %2167 = llvm.urem %2166, %2164  : i32 loc(#loc5)
    %2168 = llvm.mul %499, %2063  : i32 loc(#loc5)
    %2169 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2170 = llvm.udiv %501, %2169  : i32 loc(#loc5)
    %2171 = llvm.xor %2170, %2167  : i32 loc(#loc5)
    %2172 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2173 = llvm.mul %2171, %2172  : i32 loc(#loc5)
    %2174 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2175 = llvm.urem %501, %2174  : i32 loc(#loc5)
    %2176 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2177 = llvm.udiv %2175, %2176  : i32 loc(#loc5)
    %2178 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2179 = llvm.mul %2177, %2178  : i32 loc(#loc5)
    %2180 = llvm.add %2173, %2179  : i32 loc(#loc5)
    %2181 = llvm.mul %2180, %2062  : i32 loc(#loc5)
    %2182 = llvm.add %2168, %2181  : i32 loc(#loc5)
    %2183 = llvm.add %2163, %2182  : i32 loc(#loc5)
    %2184 = llvm.getelementptr %2079[%2183] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2185 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %2186 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2187 = llvm.mul %2186, %2063  : i32 loc(#loc5)
    %2188 = llvm.add %2187, %2185  : i32 loc(#loc5)
    %2189 = llvm.getelementptr %2184[%2188] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2190 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2191 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2192 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2193 = llvm.udiv %515, %2192  : i32 loc(#loc5)
    %2194 = llvm.urem %2193, %2191  : i32 loc(#loc5)
    %2195 = llvm.mul %499, %2063  : i32 loc(#loc5)
    %2196 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2197 = llvm.udiv %501, %2196  : i32 loc(#loc5)
    %2198 = llvm.xor %2197, %2194  : i32 loc(#loc5)
    %2199 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2200 = llvm.mul %2198, %2199  : i32 loc(#loc5)
    %2201 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2202 = llvm.urem %501, %2201  : i32 loc(#loc5)
    %2203 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2204 = llvm.udiv %2202, %2203  : i32 loc(#loc5)
    %2205 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2206 = llvm.mul %2204, %2205  : i32 loc(#loc5)
    %2207 = llvm.add %2200, %2206  : i32 loc(#loc5)
    %2208 = llvm.mul %2207, %2062  : i32 loc(#loc5)
    %2209 = llvm.add %2195, %2208  : i32 loc(#loc5)
    %2210 = llvm.add %2190, %2209  : i32 loc(#loc5)
    %2211 = llvm.getelementptr %2079[%2210] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2212 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %2213 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2214 = llvm.mul %2213, %2063  : i32 loc(#loc5)
    %2215 = llvm.add %2214, %2212  : i32 loc(#loc5)
    %2216 = llvm.getelementptr %2211[%2215] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2217 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2218 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2219 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2220 = llvm.udiv %519, %2219  : i32 loc(#loc5)
    %2221 = llvm.urem %2220, %2218  : i32 loc(#loc5)
    %2222 = llvm.mul %499, %2063  : i32 loc(#loc5)
    %2223 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2224 = llvm.udiv %501, %2223  : i32 loc(#loc5)
    %2225 = llvm.xor %2224, %2221  : i32 loc(#loc5)
    %2226 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2227 = llvm.mul %2225, %2226  : i32 loc(#loc5)
    %2228 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2229 = llvm.urem %501, %2228  : i32 loc(#loc5)
    %2230 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2231 = llvm.udiv %2229, %2230  : i32 loc(#loc5)
    %2232 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2233 = llvm.mul %2231, %2232  : i32 loc(#loc5)
    %2234 = llvm.add %2227, %2233  : i32 loc(#loc5)
    %2235 = llvm.mul %2234, %2062  : i32 loc(#loc5)
    %2236 = llvm.add %2222, %2235  : i32 loc(#loc5)
    %2237 = llvm.add %2217, %2236  : i32 loc(#loc5)
    %2238 = llvm.getelementptr %2079[%2237] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2239 = llvm.mlir.constant(5 : i32) : i32 loc(#loc5)
    %2240 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2241 = llvm.mul %2240, %2063  : i32 loc(#loc5)
    %2242 = llvm.add %2241, %2239  : i32 loc(#loc5)
    %2243 = llvm.getelementptr %2238[%2242] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2244 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2245 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2246 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2247 = llvm.udiv %523, %2246  : i32 loc(#loc5)
    %2248 = llvm.urem %2247, %2245  : i32 loc(#loc5)
    %2249 = llvm.mul %499, %2063  : i32 loc(#loc5)
    %2250 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2251 = llvm.udiv %501, %2250  : i32 loc(#loc5)
    %2252 = llvm.xor %2251, %2248  : i32 loc(#loc5)
    %2253 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2254 = llvm.mul %2252, %2253  : i32 loc(#loc5)
    %2255 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2256 = llvm.urem %501, %2255  : i32 loc(#loc5)
    %2257 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2258 = llvm.udiv %2256, %2257  : i32 loc(#loc5)
    %2259 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2260 = llvm.mul %2258, %2259  : i32 loc(#loc5)
    %2261 = llvm.add %2254, %2260  : i32 loc(#loc5)
    %2262 = llvm.mul %2261, %2062  : i32 loc(#loc5)
    %2263 = llvm.add %2249, %2262  : i32 loc(#loc5)
    %2264 = llvm.add %2244, %2263  : i32 loc(#loc5)
    %2265 = llvm.getelementptr %2079[%2264] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2266 = llvm.mlir.constant(6 : i32) : i32 loc(#loc5)
    %2267 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2268 = llvm.mul %2267, %2063  : i32 loc(#loc5)
    %2269 = llvm.add %2268, %2266  : i32 loc(#loc5)
    %2270 = llvm.getelementptr %2265[%2269] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2271 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2272 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2273 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2274 = llvm.udiv %527, %2273  : i32 loc(#loc5)
    %2275 = llvm.urem %2274, %2272  : i32 loc(#loc5)
    %2276 = llvm.mul %499, %2063  : i32 loc(#loc5)
    %2277 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2278 = llvm.udiv %501, %2277  : i32 loc(#loc5)
    %2279 = llvm.xor %2278, %2275  : i32 loc(#loc5)
    %2280 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2281 = llvm.mul %2279, %2280  : i32 loc(#loc5)
    %2282 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2283 = llvm.urem %501, %2282  : i32 loc(#loc5)
    %2284 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2285 = llvm.udiv %2283, %2284  : i32 loc(#loc5)
    %2286 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2287 = llvm.mul %2285, %2286  : i32 loc(#loc5)
    %2288 = llvm.add %2281, %2287  : i32 loc(#loc5)
    %2289 = llvm.mul %2288, %2062  : i32 loc(#loc5)
    %2290 = llvm.add %2276, %2289  : i32 loc(#loc5)
    %2291 = llvm.add %2271, %2290  : i32 loc(#loc5)
    %2292 = llvm.getelementptr %2079[%2291] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2293 = llvm.mlir.constant(7 : i32) : i32 loc(#loc5)
    %2294 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2295 = llvm.mul %2294, %2063  : i32 loc(#loc5)
    %2296 = llvm.add %2295, %2293  : i32 loc(#loc5)
    %2297 = llvm.getelementptr %2292[%2296] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2298 = llvm.mlir.undef : vector<1xf16> loc(#loc5)
    %2299 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2300 = llvm.insertelement %2064, %2298[%2299 : i32] : vector<1xf16> loc(#loc5)
    %2301 = llvm.bitcast %2108 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    llvm.store %2300, %2301 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2302 = llvm.mlir.undef : vector<1xf16> loc(#loc5)
    %2303 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2304 = llvm.insertelement %2065, %2302[%2303 : i32] : vector<1xf16> loc(#loc5)
    %2305 = llvm.bitcast %2135 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    llvm.store %2304, %2305 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2306 = llvm.mlir.undef : vector<1xf16> loc(#loc5)
    %2307 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2308 = llvm.insertelement %2066, %2306[%2307 : i32] : vector<1xf16> loc(#loc5)
    %2309 = llvm.bitcast %2162 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    llvm.store %2308, %2309 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2310 = llvm.mlir.undef : vector<1xf16> loc(#loc5)
    %2311 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2312 = llvm.insertelement %2067, %2310[%2311 : i32] : vector<1xf16> loc(#loc5)
    %2313 = llvm.bitcast %2189 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    llvm.store %2312, %2313 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2314 = llvm.mlir.undef : vector<1xf16> loc(#loc5)
    %2315 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2316 = llvm.insertelement %2068, %2314[%2315 : i32] : vector<1xf16> loc(#loc5)
    %2317 = llvm.bitcast %2216 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    llvm.store %2316, %2317 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2318 = llvm.mlir.undef : vector<1xf16> loc(#loc5)
    %2319 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2320 = llvm.insertelement %2069, %2318[%2319 : i32] : vector<1xf16> loc(#loc5)
    %2321 = llvm.bitcast %2243 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    llvm.store %2320, %2321 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2322 = llvm.mlir.undef : vector<1xf16> loc(#loc5)
    %2323 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2324 = llvm.insertelement %2070, %2322[%2323 : i32] : vector<1xf16> loc(#loc5)
    %2325 = llvm.bitcast %2270 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    llvm.store %2324, %2325 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2326 = llvm.mlir.undef : vector<1xf16> loc(#loc5)
    %2327 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2328 = llvm.insertelement %2071, %2326[%2327 : i32] : vector<1xf16> loc(#loc5)
    %2329 = llvm.bitcast %2297 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    llvm.store %2328, %2329 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2330 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2331 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2332 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2333 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)> loc(#loc5)
    %2334 = llvm.insertvalue %2061, %2333[0] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc5)
    %2335 = llvm.insertvalue %2331, %2334[1] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc5)
    %2336 = llvm.insertvalue %2330, %2335[2] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc5)
    %2337 = llvm.insertvalue %2332, %2336[3] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc5)
    %2338 = llvm.insertvalue %2332, %2337[4] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc5)
    rocdl.barrier loc(#loc5)
    %2339 = llvm.extractvalue %2338[0] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc5)
    %2340 = llvm.extractvalue %2338[1] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc5)
    %2341 = llvm.extractvalue %2338[2] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc5)
    %2342 = llvm.extractvalue %2338[3] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc5)
    %2343 = llvm.extractvalue %2338[4] : !llvm.struct<(ptr<f16, 3>, i32, i32, i32, i32)>  loc(#loc5)
    %2344 = rocdl.workitem.id.x : i32 loc(#loc5)
    %2345 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %2346 = llvm.udiv %2344, %2345  : i32 loc(#loc5)
    %2347 = llvm.urem %2344, %2345  : i32 loc(#loc5)
    %2348 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2349 = llvm.udiv %2346, %2348  : i32 loc(#loc5)
    %2350 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2351 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2352 = llvm.urem %2349, %2351  : i32 loc(#loc5)
    %2353 = llvm.urem %2352, %2350  : i32 loc(#loc5)
    %2354 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2355 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2356 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2357 = llvm.mul %2353, %2356  : i32 loc(#loc5)
    %2358 = llvm.urem %2347, %2355  : i32 loc(#loc5)
    %2359 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2360 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2361 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2362 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2363 = llvm.select %2362, %2361, %2354 : i1, i32 loc(#loc5)
    %2364 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2365 = llvm.add %2364, %2363  : i32 loc(#loc5)
    %2366 = llvm.add %2365, %2358  : i32 loc(#loc5)
    %2367 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2368 = llvm.add %2367, %2360  : i32 loc(#loc5)
    %2369 = llvm.add %2368, %2366  : i32 loc(#loc5)
    %2370 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2371 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2372 = llvm.select %2371, %2370, %2354 : i1, i32 loc(#loc5)
    %2373 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2374 = llvm.add %2373, %2372  : i32 loc(#loc5)
    %2375 = llvm.add %2374, %2358  : i32 loc(#loc5)
    %2376 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2377 = llvm.add %2376, %2360  : i32 loc(#loc5)
    %2378 = llvm.add %2377, %2375  : i32 loc(#loc5)
    %2379 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2380 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2381 = llvm.select %2380, %2379, %2354 : i1, i32 loc(#loc5)
    %2382 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %2383 = llvm.add %2382, %2381  : i32 loc(#loc5)
    %2384 = llvm.add %2383, %2358  : i32 loc(#loc5)
    %2385 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2386 = llvm.add %2385, %2360  : i32 loc(#loc5)
    %2387 = llvm.add %2386, %2384  : i32 loc(#loc5)
    %2388 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2389 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2390 = llvm.select %2389, %2388, %2354 : i1, i32 loc(#loc5)
    %2391 = llvm.mlir.constant(96 : i32) : i32 loc(#loc5)
    %2392 = llvm.add %2391, %2390  : i32 loc(#loc5)
    %2393 = llvm.add %2392, %2358  : i32 loc(#loc5)
    %2394 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2395 = llvm.add %2394, %2360  : i32 loc(#loc5)
    %2396 = llvm.add %2395, %2393  : i32 loc(#loc5)
    %2397 = llvm.mlir.constant(256 : i32) : i32 loc(#loc5)
    %2398 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2399 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2400 = llvm.select %2399, %2398, %2354 : i1, i32 loc(#loc5)
    %2401 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2402 = llvm.add %2401, %2400  : i32 loc(#loc5)
    %2403 = llvm.add %2402, %2358  : i32 loc(#loc5)
    %2404 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2405 = llvm.add %2404, %2397  : i32 loc(#loc5)
    %2406 = llvm.add %2405, %2403  : i32 loc(#loc5)
    %2407 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2408 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2409 = llvm.select %2408, %2407, %2354 : i1, i32 loc(#loc5)
    %2410 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2411 = llvm.add %2410, %2409  : i32 loc(#loc5)
    %2412 = llvm.add %2411, %2358  : i32 loc(#loc5)
    %2413 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2414 = llvm.add %2413, %2397  : i32 loc(#loc5)
    %2415 = llvm.add %2414, %2412  : i32 loc(#loc5)
    %2416 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2417 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2418 = llvm.select %2417, %2416, %2354 : i1, i32 loc(#loc5)
    %2419 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %2420 = llvm.add %2419, %2418  : i32 loc(#loc5)
    %2421 = llvm.add %2420, %2358  : i32 loc(#loc5)
    %2422 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2423 = llvm.add %2422, %2397  : i32 loc(#loc5)
    %2424 = llvm.add %2423, %2421  : i32 loc(#loc5)
    %2425 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2426 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2427 = llvm.select %2426, %2425, %2354 : i1, i32 loc(#loc5)
    %2428 = llvm.mlir.constant(96 : i32) : i32 loc(#loc5)
    %2429 = llvm.add %2428, %2427  : i32 loc(#loc5)
    %2430 = llvm.add %2429, %2358  : i32 loc(#loc5)
    %2431 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2432 = llvm.add %2431, %2397  : i32 loc(#loc5)
    %2433 = llvm.add %2432, %2430  : i32 loc(#loc5)
    %2434 = llvm.mlir.constant(512 : i32) : i32 loc(#loc5)
    %2435 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2436 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2437 = llvm.select %2436, %2435, %2354 : i1, i32 loc(#loc5)
    %2438 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2439 = llvm.add %2438, %2437  : i32 loc(#loc5)
    %2440 = llvm.add %2439, %2358  : i32 loc(#loc5)
    %2441 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2442 = llvm.add %2441, %2434  : i32 loc(#loc5)
    %2443 = llvm.add %2442, %2440  : i32 loc(#loc5)
    %2444 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2445 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2446 = llvm.select %2445, %2444, %2354 : i1, i32 loc(#loc5)
    %2447 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2448 = llvm.add %2447, %2446  : i32 loc(#loc5)
    %2449 = llvm.add %2448, %2358  : i32 loc(#loc5)
    %2450 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2451 = llvm.add %2450, %2434  : i32 loc(#loc5)
    %2452 = llvm.add %2451, %2449  : i32 loc(#loc5)
    %2453 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2454 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2455 = llvm.select %2454, %2453, %2354 : i1, i32 loc(#loc5)
    %2456 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %2457 = llvm.add %2456, %2455  : i32 loc(#loc5)
    %2458 = llvm.add %2457, %2358  : i32 loc(#loc5)
    %2459 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2460 = llvm.add %2459, %2434  : i32 loc(#loc5)
    %2461 = llvm.add %2460, %2458  : i32 loc(#loc5)
    %2462 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2463 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2464 = llvm.select %2463, %2462, %2354 : i1, i32 loc(#loc5)
    %2465 = llvm.mlir.constant(96 : i32) : i32 loc(#loc5)
    %2466 = llvm.add %2465, %2464  : i32 loc(#loc5)
    %2467 = llvm.add %2466, %2358  : i32 loc(#loc5)
    %2468 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2469 = llvm.add %2468, %2434  : i32 loc(#loc5)
    %2470 = llvm.add %2469, %2467  : i32 loc(#loc5)
    %2471 = llvm.mlir.constant(768 : i32) : i32 loc(#loc5)
    %2472 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2473 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2474 = llvm.select %2473, %2472, %2354 : i1, i32 loc(#loc5)
    %2475 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2476 = llvm.add %2475, %2474  : i32 loc(#loc5)
    %2477 = llvm.add %2476, %2358  : i32 loc(#loc5)
    %2478 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2479 = llvm.add %2478, %2471  : i32 loc(#loc5)
    %2480 = llvm.add %2479, %2477  : i32 loc(#loc5)
    %2481 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2482 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2483 = llvm.select %2482, %2481, %2354 : i1, i32 loc(#loc5)
    %2484 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2485 = llvm.add %2484, %2483  : i32 loc(#loc5)
    %2486 = llvm.add %2485, %2358  : i32 loc(#loc5)
    %2487 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2488 = llvm.add %2487, %2471  : i32 loc(#loc5)
    %2489 = llvm.add %2488, %2486  : i32 loc(#loc5)
    %2490 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2491 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2492 = llvm.select %2491, %2490, %2354 : i1, i32 loc(#loc5)
    %2493 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %2494 = llvm.add %2493, %2492  : i32 loc(#loc5)
    %2495 = llvm.add %2494, %2358  : i32 loc(#loc5)
    %2496 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2497 = llvm.add %2496, %2471  : i32 loc(#loc5)
    %2498 = llvm.add %2497, %2495  : i32 loc(#loc5)
    %2499 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2500 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2501 = llvm.select %2500, %2499, %2354 : i1, i32 loc(#loc5)
    %2502 = llvm.mlir.constant(96 : i32) : i32 loc(#loc5)
    %2503 = llvm.add %2502, %2501  : i32 loc(#loc5)
    %2504 = llvm.add %2503, %2358  : i32 loc(#loc5)
    %2505 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2506 = llvm.add %2505, %2471  : i32 loc(#loc5)
    %2507 = llvm.add %2506, %2504  : i32 loc(#loc5)
    %2508 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc5)
    %2509 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2510 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2511 = llvm.select %2510, %2509, %2354 : i1, i32 loc(#loc5)
    %2512 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2513 = llvm.add %2512, %2511  : i32 loc(#loc5)
    %2514 = llvm.add %2513, %2358  : i32 loc(#loc5)
    %2515 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2516 = llvm.add %2515, %2508  : i32 loc(#loc5)
    %2517 = llvm.add %2516, %2514  : i32 loc(#loc5)
    %2518 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2519 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2520 = llvm.select %2519, %2518, %2354 : i1, i32 loc(#loc5)
    %2521 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2522 = llvm.add %2521, %2520  : i32 loc(#loc5)
    %2523 = llvm.add %2522, %2358  : i32 loc(#loc5)
    %2524 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2525 = llvm.add %2524, %2508  : i32 loc(#loc5)
    %2526 = llvm.add %2525, %2523  : i32 loc(#loc5)
    %2527 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2528 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2529 = llvm.select %2528, %2527, %2354 : i1, i32 loc(#loc5)
    %2530 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %2531 = llvm.add %2530, %2529  : i32 loc(#loc5)
    %2532 = llvm.add %2531, %2358  : i32 loc(#loc5)
    %2533 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2534 = llvm.add %2533, %2508  : i32 loc(#loc5)
    %2535 = llvm.add %2534, %2532  : i32 loc(#loc5)
    %2536 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2537 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2538 = llvm.select %2537, %2536, %2354 : i1, i32 loc(#loc5)
    %2539 = llvm.mlir.constant(96 : i32) : i32 loc(#loc5)
    %2540 = llvm.add %2539, %2538  : i32 loc(#loc5)
    %2541 = llvm.add %2540, %2358  : i32 loc(#loc5)
    %2542 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2543 = llvm.add %2542, %2508  : i32 loc(#loc5)
    %2544 = llvm.add %2543, %2541  : i32 loc(#loc5)
    %2545 = llvm.mlir.constant(1280 : i32) : i32 loc(#loc5)
    %2546 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2547 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2548 = llvm.select %2547, %2546, %2354 : i1, i32 loc(#loc5)
    %2549 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2550 = llvm.add %2549, %2548  : i32 loc(#loc5)
    %2551 = llvm.add %2550, %2358  : i32 loc(#loc5)
    %2552 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2553 = llvm.add %2552, %2545  : i32 loc(#loc5)
    %2554 = llvm.add %2553, %2551  : i32 loc(#loc5)
    %2555 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2556 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2557 = llvm.select %2556, %2555, %2354 : i1, i32 loc(#loc5)
    %2558 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2559 = llvm.add %2558, %2557  : i32 loc(#loc5)
    %2560 = llvm.add %2559, %2358  : i32 loc(#loc5)
    %2561 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2562 = llvm.add %2561, %2545  : i32 loc(#loc5)
    %2563 = llvm.add %2562, %2560  : i32 loc(#loc5)
    %2564 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2565 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2566 = llvm.select %2565, %2564, %2354 : i1, i32 loc(#loc5)
    %2567 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %2568 = llvm.add %2567, %2566  : i32 loc(#loc5)
    %2569 = llvm.add %2568, %2358  : i32 loc(#loc5)
    %2570 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2571 = llvm.add %2570, %2545  : i32 loc(#loc5)
    %2572 = llvm.add %2571, %2569  : i32 loc(#loc5)
    %2573 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2574 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2575 = llvm.select %2574, %2573, %2354 : i1, i32 loc(#loc5)
    %2576 = llvm.mlir.constant(96 : i32) : i32 loc(#loc5)
    %2577 = llvm.add %2576, %2575  : i32 loc(#loc5)
    %2578 = llvm.add %2577, %2358  : i32 loc(#loc5)
    %2579 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2580 = llvm.add %2579, %2545  : i32 loc(#loc5)
    %2581 = llvm.add %2580, %2578  : i32 loc(#loc5)
    %2582 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc5)
    %2583 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2584 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2585 = llvm.select %2584, %2583, %2354 : i1, i32 loc(#loc5)
    %2586 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2587 = llvm.add %2586, %2585  : i32 loc(#loc5)
    %2588 = llvm.add %2587, %2358  : i32 loc(#loc5)
    %2589 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2590 = llvm.add %2589, %2582  : i32 loc(#loc5)
    %2591 = llvm.add %2590, %2588  : i32 loc(#loc5)
    %2592 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2593 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2594 = llvm.select %2593, %2592, %2354 : i1, i32 loc(#loc5)
    %2595 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2596 = llvm.add %2595, %2594  : i32 loc(#loc5)
    %2597 = llvm.add %2596, %2358  : i32 loc(#loc5)
    %2598 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2599 = llvm.add %2598, %2582  : i32 loc(#loc5)
    %2600 = llvm.add %2599, %2597  : i32 loc(#loc5)
    %2601 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2602 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2603 = llvm.select %2602, %2601, %2354 : i1, i32 loc(#loc5)
    %2604 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %2605 = llvm.add %2604, %2603  : i32 loc(#loc5)
    %2606 = llvm.add %2605, %2358  : i32 loc(#loc5)
    %2607 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2608 = llvm.add %2607, %2582  : i32 loc(#loc5)
    %2609 = llvm.add %2608, %2606  : i32 loc(#loc5)
    %2610 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2611 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2612 = llvm.select %2611, %2610, %2354 : i1, i32 loc(#loc5)
    %2613 = llvm.mlir.constant(96 : i32) : i32 loc(#loc5)
    %2614 = llvm.add %2613, %2612  : i32 loc(#loc5)
    %2615 = llvm.add %2614, %2358  : i32 loc(#loc5)
    %2616 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2617 = llvm.add %2616, %2582  : i32 loc(#loc5)
    %2618 = llvm.add %2617, %2615  : i32 loc(#loc5)
    %2619 = llvm.mlir.constant(1792 : i32) : i32 loc(#loc5)
    %2620 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2621 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2622 = llvm.select %2621, %2620, %2354 : i1, i32 loc(#loc5)
    %2623 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2624 = llvm.add %2623, %2622  : i32 loc(#loc5)
    %2625 = llvm.add %2624, %2358  : i32 loc(#loc5)
    %2626 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2627 = llvm.add %2626, %2619  : i32 loc(#loc5)
    %2628 = llvm.add %2627, %2625  : i32 loc(#loc5)
    %2629 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2630 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2631 = llvm.select %2630, %2629, %2354 : i1, i32 loc(#loc5)
    %2632 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %2633 = llvm.add %2632, %2631  : i32 loc(#loc5)
    %2634 = llvm.add %2633, %2358  : i32 loc(#loc5)
    %2635 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2636 = llvm.add %2635, %2619  : i32 loc(#loc5)
    %2637 = llvm.add %2636, %2634  : i32 loc(#loc5)
    %2638 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2639 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2640 = llvm.select %2639, %2638, %2354 : i1, i32 loc(#loc5)
    %2641 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %2642 = llvm.add %2641, %2640  : i32 loc(#loc5)
    %2643 = llvm.add %2642, %2358  : i32 loc(#loc5)
    %2644 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2645 = llvm.add %2644, %2619  : i32 loc(#loc5)
    %2646 = llvm.add %2645, %2643  : i32 loc(#loc5)
    %2647 = llvm.mlir.constant(128 : i32) : i32 loc(#loc5)
    %2648 = llvm.icmp "uge" %2347, %2355 : i32 loc(#loc5)
    %2649 = llvm.select %2648, %2647, %2354 : i1, i32 loc(#loc5)
    %2650 = llvm.mlir.constant(96 : i32) : i32 loc(#loc5)
    %2651 = llvm.add %2650, %2649  : i32 loc(#loc5)
    %2652 = llvm.add %2651, %2358  : i32 loc(#loc5)
    %2653 = llvm.add %2357, %2359  : i32 loc(#loc5)
    %2654 = llvm.add %2653, %2619  : i32 loc(#loc5)
    %2655 = llvm.add %2654, %2652  : i32 loc(#loc5)
    %2656 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2657 = llvm.sub %2656, %2343  : i32 loc(#loc5)
    %2658 = llvm.getelementptr %2339[%2657] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2659 = llvm.mlir.undef : vector<4xf16> loc(#loc5)
    %2660 = llvm.getelementptr %2658[%2369] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2661 = llvm.bitcast %2660 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2662 = llvm.load %2661 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2663 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2664 = llvm.extractelement %2662[%2663 : i32] : vector<1xf16> loc(#loc5)
    %2665 = llvm.bitcast %2664 : f16 to f16 loc(#loc5)
    %2666 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2667 = llvm.insertelement %2665, %2659[%2666 : i32] : vector<4xf16> loc(#loc5)
    %2668 = llvm.getelementptr %2658[%2378] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2669 = llvm.bitcast %2668 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2670 = llvm.load %2669 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2671 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2672 = llvm.extractelement %2670[%2671 : i32] : vector<1xf16> loc(#loc5)
    %2673 = llvm.bitcast %2672 : f16 to f16 loc(#loc5)
    %2674 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2675 = llvm.insertelement %2673, %2667[%2674 : i32] : vector<4xf16> loc(#loc5)
    %2676 = llvm.getelementptr %2658[%2387] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2677 = llvm.bitcast %2676 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2678 = llvm.load %2677 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2679 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2680 = llvm.extractelement %2678[%2679 : i32] : vector<1xf16> loc(#loc5)
    %2681 = llvm.bitcast %2680 : f16 to f16 loc(#loc5)
    %2682 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2683 = llvm.insertelement %2681, %2675[%2682 : i32] : vector<4xf16> loc(#loc5)
    %2684 = llvm.getelementptr %2658[%2396] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2685 = llvm.bitcast %2684 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2686 = llvm.load %2685 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2687 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2688 = llvm.extractelement %2686[%2687 : i32] : vector<1xf16> loc(#loc5)
    %2689 = llvm.bitcast %2688 : f16 to f16 loc(#loc5)
    %2690 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %2691 = llvm.insertelement %2689, %2683[%2690 : i32] : vector<4xf16> loc(#loc5)
    %2692 = llvm.mlir.undef : vector<4xf16> loc(#loc5)
    %2693 = llvm.getelementptr %2658[%2406] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2694 = llvm.bitcast %2693 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2695 = llvm.load %2694 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2696 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2697 = llvm.extractelement %2695[%2696 : i32] : vector<1xf16> loc(#loc5)
    %2698 = llvm.bitcast %2697 : f16 to f16 loc(#loc5)
    %2699 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2700 = llvm.insertelement %2698, %2692[%2699 : i32] : vector<4xf16> loc(#loc5)
    %2701 = llvm.getelementptr %2658[%2415] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2702 = llvm.bitcast %2701 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2703 = llvm.load %2702 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2704 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2705 = llvm.extractelement %2703[%2704 : i32] : vector<1xf16> loc(#loc5)
    %2706 = llvm.bitcast %2705 : f16 to f16 loc(#loc5)
    %2707 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2708 = llvm.insertelement %2706, %2700[%2707 : i32] : vector<4xf16> loc(#loc5)
    %2709 = llvm.getelementptr %2658[%2424] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2710 = llvm.bitcast %2709 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2711 = llvm.load %2710 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2712 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2713 = llvm.extractelement %2711[%2712 : i32] : vector<1xf16> loc(#loc5)
    %2714 = llvm.bitcast %2713 : f16 to f16 loc(#loc5)
    %2715 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2716 = llvm.insertelement %2714, %2708[%2715 : i32] : vector<4xf16> loc(#loc5)
    %2717 = llvm.getelementptr %2658[%2433] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2718 = llvm.bitcast %2717 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2719 = llvm.load %2718 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2720 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2721 = llvm.extractelement %2719[%2720 : i32] : vector<1xf16> loc(#loc5)
    %2722 = llvm.bitcast %2721 : f16 to f16 loc(#loc5)
    %2723 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %2724 = llvm.insertelement %2722, %2716[%2723 : i32] : vector<4xf16> loc(#loc5)
    %2725 = llvm.mlir.undef : vector<4xf16> loc(#loc5)
    %2726 = llvm.getelementptr %2658[%2443] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2727 = llvm.bitcast %2726 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2728 = llvm.load %2727 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2729 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2730 = llvm.extractelement %2728[%2729 : i32] : vector<1xf16> loc(#loc5)
    %2731 = llvm.bitcast %2730 : f16 to f16 loc(#loc5)
    %2732 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2733 = llvm.insertelement %2731, %2725[%2732 : i32] : vector<4xf16> loc(#loc5)
    %2734 = llvm.getelementptr %2658[%2452] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2735 = llvm.bitcast %2734 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2736 = llvm.load %2735 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2737 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2738 = llvm.extractelement %2736[%2737 : i32] : vector<1xf16> loc(#loc5)
    %2739 = llvm.bitcast %2738 : f16 to f16 loc(#loc5)
    %2740 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2741 = llvm.insertelement %2739, %2733[%2740 : i32] : vector<4xf16> loc(#loc5)
    %2742 = llvm.getelementptr %2658[%2461] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2743 = llvm.bitcast %2742 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2744 = llvm.load %2743 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2745 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2746 = llvm.extractelement %2744[%2745 : i32] : vector<1xf16> loc(#loc5)
    %2747 = llvm.bitcast %2746 : f16 to f16 loc(#loc5)
    %2748 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2749 = llvm.insertelement %2747, %2741[%2748 : i32] : vector<4xf16> loc(#loc5)
    %2750 = llvm.getelementptr %2658[%2470] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2751 = llvm.bitcast %2750 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2752 = llvm.load %2751 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2753 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2754 = llvm.extractelement %2752[%2753 : i32] : vector<1xf16> loc(#loc5)
    %2755 = llvm.bitcast %2754 : f16 to f16 loc(#loc5)
    %2756 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %2757 = llvm.insertelement %2755, %2749[%2756 : i32] : vector<4xf16> loc(#loc5)
    %2758 = llvm.mlir.undef : vector<4xf16> loc(#loc5)
    %2759 = llvm.getelementptr %2658[%2480] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2760 = llvm.bitcast %2759 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2761 = llvm.load %2760 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2762 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2763 = llvm.extractelement %2761[%2762 : i32] : vector<1xf16> loc(#loc5)
    %2764 = llvm.bitcast %2763 : f16 to f16 loc(#loc5)
    %2765 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2766 = llvm.insertelement %2764, %2758[%2765 : i32] : vector<4xf16> loc(#loc5)
    %2767 = llvm.getelementptr %2658[%2489] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2768 = llvm.bitcast %2767 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2769 = llvm.load %2768 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2770 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2771 = llvm.extractelement %2769[%2770 : i32] : vector<1xf16> loc(#loc5)
    %2772 = llvm.bitcast %2771 : f16 to f16 loc(#loc5)
    %2773 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2774 = llvm.insertelement %2772, %2766[%2773 : i32] : vector<4xf16> loc(#loc5)
    %2775 = llvm.getelementptr %2658[%2498] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2776 = llvm.bitcast %2775 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2777 = llvm.load %2776 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2778 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2779 = llvm.extractelement %2777[%2778 : i32] : vector<1xf16> loc(#loc5)
    %2780 = llvm.bitcast %2779 : f16 to f16 loc(#loc5)
    %2781 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2782 = llvm.insertelement %2780, %2774[%2781 : i32] : vector<4xf16> loc(#loc5)
    %2783 = llvm.getelementptr %2658[%2507] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2784 = llvm.bitcast %2783 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2785 = llvm.load %2784 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2786 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2787 = llvm.extractelement %2785[%2786 : i32] : vector<1xf16> loc(#loc5)
    %2788 = llvm.bitcast %2787 : f16 to f16 loc(#loc5)
    %2789 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %2790 = llvm.insertelement %2788, %2782[%2789 : i32] : vector<4xf16> loc(#loc5)
    %2791 = llvm.mlir.undef : vector<4xf16> loc(#loc5)
    %2792 = llvm.getelementptr %2658[%2517] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2793 = llvm.bitcast %2792 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2794 = llvm.load %2793 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2795 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2796 = llvm.extractelement %2794[%2795 : i32] : vector<1xf16> loc(#loc5)
    %2797 = llvm.bitcast %2796 : f16 to f16 loc(#loc5)
    %2798 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2799 = llvm.insertelement %2797, %2791[%2798 : i32] : vector<4xf16> loc(#loc5)
    %2800 = llvm.getelementptr %2658[%2526] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2801 = llvm.bitcast %2800 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2802 = llvm.load %2801 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2803 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2804 = llvm.extractelement %2802[%2803 : i32] : vector<1xf16> loc(#loc5)
    %2805 = llvm.bitcast %2804 : f16 to f16 loc(#loc5)
    %2806 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2807 = llvm.insertelement %2805, %2799[%2806 : i32] : vector<4xf16> loc(#loc5)
    %2808 = llvm.getelementptr %2658[%2535] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2809 = llvm.bitcast %2808 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2810 = llvm.load %2809 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2811 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2812 = llvm.extractelement %2810[%2811 : i32] : vector<1xf16> loc(#loc5)
    %2813 = llvm.bitcast %2812 : f16 to f16 loc(#loc5)
    %2814 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2815 = llvm.insertelement %2813, %2807[%2814 : i32] : vector<4xf16> loc(#loc5)
    %2816 = llvm.getelementptr %2658[%2544] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2817 = llvm.bitcast %2816 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2818 = llvm.load %2817 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2819 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2820 = llvm.extractelement %2818[%2819 : i32] : vector<1xf16> loc(#loc5)
    %2821 = llvm.bitcast %2820 : f16 to f16 loc(#loc5)
    %2822 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %2823 = llvm.insertelement %2821, %2815[%2822 : i32] : vector<4xf16> loc(#loc5)
    %2824 = llvm.mlir.undef : vector<4xf16> loc(#loc5)
    %2825 = llvm.getelementptr %2658[%2554] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2826 = llvm.bitcast %2825 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2827 = llvm.load %2826 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2828 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2829 = llvm.extractelement %2827[%2828 : i32] : vector<1xf16> loc(#loc5)
    %2830 = llvm.bitcast %2829 : f16 to f16 loc(#loc5)
    %2831 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2832 = llvm.insertelement %2830, %2824[%2831 : i32] : vector<4xf16> loc(#loc5)
    %2833 = llvm.getelementptr %2658[%2563] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2834 = llvm.bitcast %2833 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2835 = llvm.load %2834 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2836 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2837 = llvm.extractelement %2835[%2836 : i32] : vector<1xf16> loc(#loc5)
    %2838 = llvm.bitcast %2837 : f16 to f16 loc(#loc5)
    %2839 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2840 = llvm.insertelement %2838, %2832[%2839 : i32] : vector<4xf16> loc(#loc5)
    %2841 = llvm.getelementptr %2658[%2572] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2842 = llvm.bitcast %2841 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2843 = llvm.load %2842 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2844 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2845 = llvm.extractelement %2843[%2844 : i32] : vector<1xf16> loc(#loc5)
    %2846 = llvm.bitcast %2845 : f16 to f16 loc(#loc5)
    %2847 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2848 = llvm.insertelement %2846, %2840[%2847 : i32] : vector<4xf16> loc(#loc5)
    %2849 = llvm.getelementptr %2658[%2581] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2850 = llvm.bitcast %2849 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2851 = llvm.load %2850 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2852 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2853 = llvm.extractelement %2851[%2852 : i32] : vector<1xf16> loc(#loc5)
    %2854 = llvm.bitcast %2853 : f16 to f16 loc(#loc5)
    %2855 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %2856 = llvm.insertelement %2854, %2848[%2855 : i32] : vector<4xf16> loc(#loc5)
    %2857 = llvm.mlir.undef : vector<4xf16> loc(#loc5)
    %2858 = llvm.getelementptr %2658[%2591] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2859 = llvm.bitcast %2858 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2860 = llvm.load %2859 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2861 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2862 = llvm.extractelement %2860[%2861 : i32] : vector<1xf16> loc(#loc5)
    %2863 = llvm.bitcast %2862 : f16 to f16 loc(#loc5)
    %2864 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2865 = llvm.insertelement %2863, %2857[%2864 : i32] : vector<4xf16> loc(#loc5)
    %2866 = llvm.getelementptr %2658[%2600] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2867 = llvm.bitcast %2866 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2868 = llvm.load %2867 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2869 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2870 = llvm.extractelement %2868[%2869 : i32] : vector<1xf16> loc(#loc5)
    %2871 = llvm.bitcast %2870 : f16 to f16 loc(#loc5)
    %2872 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2873 = llvm.insertelement %2871, %2865[%2872 : i32] : vector<4xf16> loc(#loc5)
    %2874 = llvm.getelementptr %2658[%2609] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2875 = llvm.bitcast %2874 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2876 = llvm.load %2875 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2877 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2878 = llvm.extractelement %2876[%2877 : i32] : vector<1xf16> loc(#loc5)
    %2879 = llvm.bitcast %2878 : f16 to f16 loc(#loc5)
    %2880 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2881 = llvm.insertelement %2879, %2873[%2880 : i32] : vector<4xf16> loc(#loc5)
    %2882 = llvm.getelementptr %2658[%2618] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2883 = llvm.bitcast %2882 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2884 = llvm.load %2883 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2885 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2886 = llvm.extractelement %2884[%2885 : i32] : vector<1xf16> loc(#loc5)
    %2887 = llvm.bitcast %2886 : f16 to f16 loc(#loc5)
    %2888 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %2889 = llvm.insertelement %2887, %2881[%2888 : i32] : vector<4xf16> loc(#loc5)
    %2890 = llvm.mlir.undef : vector<4xf16> loc(#loc5)
    %2891 = llvm.getelementptr %2658[%2628] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2892 = llvm.bitcast %2891 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2893 = llvm.load %2892 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2894 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2895 = llvm.extractelement %2893[%2894 : i32] : vector<1xf16> loc(#loc5)
    %2896 = llvm.bitcast %2895 : f16 to f16 loc(#loc5)
    %2897 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2898 = llvm.insertelement %2896, %2890[%2897 : i32] : vector<4xf16> loc(#loc5)
    %2899 = llvm.getelementptr %2658[%2637] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2900 = llvm.bitcast %2899 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2901 = llvm.load %2900 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2902 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2903 = llvm.extractelement %2901[%2902 : i32] : vector<1xf16> loc(#loc5)
    %2904 = llvm.bitcast %2903 : f16 to f16 loc(#loc5)
    %2905 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %2906 = llvm.insertelement %2904, %2898[%2905 : i32] : vector<4xf16> loc(#loc5)
    %2907 = llvm.getelementptr %2658[%2646] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2908 = llvm.bitcast %2907 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2909 = llvm.load %2908 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2910 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2911 = llvm.extractelement %2909[%2910 : i32] : vector<1xf16> loc(#loc5)
    %2912 = llvm.bitcast %2911 : f16 to f16 loc(#loc5)
    %2913 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %2914 = llvm.insertelement %2912, %2906[%2913 : i32] : vector<4xf16> loc(#loc5)
    %2915 = llvm.getelementptr %2658[%2655] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc5)
    %2916 = llvm.bitcast %2915 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2917 = llvm.load %2916 : !llvm.ptr<vector<1xf16>, 3> loc(#loc5)
    %2918 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %2919 = llvm.extractelement %2917[%2918 : i32] : vector<1xf16> loc(#loc5)
    %2920 = llvm.bitcast %2919 : f16 to f16 loc(#loc5)
    %2921 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %2922 = llvm.insertelement %2920, %2914[%2921 : i32] : vector<4xf16> loc(#loc5)
    %2923 = llvm.mlir.undef : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)> loc(#loc5)
    %2924 = llvm.insertvalue %2691, %2923[0] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc5)
    %2925 = llvm.insertvalue %2724, %2924[1] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc5)
    %2926 = llvm.insertvalue %2757, %2925[2] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc5)
    %2927 = llvm.insertvalue %2790, %2926[3] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc5)
    %2928 = llvm.insertvalue %2823, %2927[4] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc5)
    %2929 = llvm.insertvalue %2856, %2928[5] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc5)
    %2930 = llvm.insertvalue %2889, %2929[6] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc5)
    %2931 = llvm.insertvalue %2922, %2930[7] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc5)
    %2932 = llvm.extractvalue %2012[0] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2933 = llvm.extractvalue %2012[1] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2934 = llvm.extractvalue %2012[2] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2935 = llvm.extractvalue %2012[3] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2936 = llvm.extractvalue %2012[4] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2937 = llvm.extractvalue %2012[5] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2938 = llvm.extractvalue %2012[6] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2939 = llvm.extractvalue %2012[7] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2940 = llvm.extractvalue %2931[0] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2941 = llvm.extractvalue %2931[1] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2942 = llvm.extractvalue %2931[2] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2943 = llvm.extractvalue %2931[3] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2944 = llvm.extractvalue %2931[4] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2945 = llvm.extractvalue %2931[5] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2946 = llvm.extractvalue %2931[6] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2947 = llvm.extractvalue %2931[7] : !llvm.struct<(vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>, vector<4xf16>)>  loc(#loc20)
    %2948 = llvm.extractvalue %1267[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2949 = llvm.extractvalue %1267[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2950 = llvm.extractvalue %1267[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2951 = llvm.extractvalue %1267[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2952 = llvm.extractvalue %1267[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2953 = llvm.extractvalue %1267[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2954 = llvm.extractvalue %1267[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2955 = llvm.extractvalue %1267[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2956 = llvm.extractvalue %1267[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2957 = llvm.extractvalue %1267[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2958 = llvm.extractvalue %1267[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2959 = llvm.extractvalue %1267[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2960 = llvm.extractvalue %1267[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2961 = llvm.extractvalue %1267[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2962 = llvm.extractvalue %1267[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2963 = llvm.extractvalue %1267[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %2964 = llvm.mlir.undef : vector<16xf32> loc(#loc20)
    %2965 = llvm.mlir.constant(0 : i32) : i32 loc(#loc20)
    %2966 = llvm.insertelement %2948, %2964[%2965 : i32] : vector<16xf32> loc(#loc20)
    %2967 = llvm.mlir.constant(1 : i32) : i32 loc(#loc20)
    %2968 = llvm.insertelement %2949, %2966[%2967 : i32] : vector<16xf32> loc(#loc20)
    %2969 = llvm.mlir.constant(2 : i32) : i32 loc(#loc20)
    %2970 = llvm.insertelement %2950, %2968[%2969 : i32] : vector<16xf32> loc(#loc20)
    %2971 = llvm.mlir.constant(3 : i32) : i32 loc(#loc20)
    %2972 = llvm.insertelement %2951, %2970[%2971 : i32] : vector<16xf32> loc(#loc20)
    %2973 = llvm.mlir.constant(4 : i32) : i32 loc(#loc20)
    %2974 = llvm.insertelement %2952, %2972[%2973 : i32] : vector<16xf32> loc(#loc20)
    %2975 = llvm.mlir.constant(5 : i32) : i32 loc(#loc20)
    %2976 = llvm.insertelement %2953, %2974[%2975 : i32] : vector<16xf32> loc(#loc20)
    %2977 = llvm.mlir.constant(6 : i32) : i32 loc(#loc20)
    %2978 = llvm.insertelement %2954, %2976[%2977 : i32] : vector<16xf32> loc(#loc20)
    %2979 = llvm.mlir.constant(7 : i32) : i32 loc(#loc20)
    %2980 = llvm.insertelement %2955, %2978[%2979 : i32] : vector<16xf32> loc(#loc20)
    %2981 = llvm.mlir.constant(8 : i32) : i32 loc(#loc20)
    %2982 = llvm.insertelement %2956, %2980[%2981 : i32] : vector<16xf32> loc(#loc20)
    %2983 = llvm.mlir.constant(9 : i32) : i32 loc(#loc20)
    %2984 = llvm.insertelement %2957, %2982[%2983 : i32] : vector<16xf32> loc(#loc20)
    %2985 = llvm.mlir.constant(10 : i32) : i32 loc(#loc20)
    %2986 = llvm.insertelement %2958, %2984[%2985 : i32] : vector<16xf32> loc(#loc20)
    %2987 = llvm.mlir.constant(11 : i32) : i32 loc(#loc20)
    %2988 = llvm.insertelement %2959, %2986[%2987 : i32] : vector<16xf32> loc(#loc20)
    %2989 = llvm.mlir.constant(12 : i32) : i32 loc(#loc20)
    %2990 = llvm.insertelement %2960, %2988[%2989 : i32] : vector<16xf32> loc(#loc20)
    %2991 = llvm.mlir.constant(13 : i32) : i32 loc(#loc20)
    %2992 = llvm.insertelement %2961, %2990[%2991 : i32] : vector<16xf32> loc(#loc20)
    %2993 = llvm.mlir.constant(14 : i32) : i32 loc(#loc20)
    %2994 = llvm.insertelement %2962, %2992[%2993 : i32] : vector<16xf32> loc(#loc20)
    %2995 = llvm.mlir.constant(15 : i32) : i32 loc(#loc20)
    %2996 = llvm.insertelement %2963, %2994[%2995 : i32] : vector<16xf32> loc(#loc20)
    %2997 = llvm.mlir.constant(0 : i32) : i32 loc(#loc20)
    %2998 = rocdl.mfma.f32.32x32x8f16 %2932, %2940, %2996, %2997, %2997, %2997 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %2999 = llvm.mlir.constant(0 : i32) : i32 loc(#loc20)
    %3000 = rocdl.mfma.f32.32x32x8f16 %2933, %2941, %2998, %2999, %2999, %2999 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %3001 = llvm.mlir.constant(0 : i32) : i32 loc(#loc20)
    %3002 = rocdl.mfma.f32.32x32x8f16 %2934, %2942, %3000, %3001, %3001, %3001 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %3003 = llvm.mlir.constant(0 : i32) : i32 loc(#loc20)
    %3004 = rocdl.mfma.f32.32x32x8f16 %2935, %2943, %3002, %3003, %3003, %3003 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %3005 = llvm.mlir.constant(0 : i32) : i32 loc(#loc20)
    %3006 = rocdl.mfma.f32.32x32x8f16 %2936, %2944, %3004, %3005, %3005, %3005 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %3007 = llvm.mlir.constant(0 : i32) : i32 loc(#loc20)
    %3008 = rocdl.mfma.f32.32x32x8f16 %2937, %2945, %3006, %3007, %3007, %3007 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %3009 = llvm.mlir.constant(0 : i32) : i32 loc(#loc20)
    %3010 = rocdl.mfma.f32.32x32x8f16 %2938, %2946, %3008, %3009, %3009, %3009 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %3011 = llvm.mlir.constant(0 : i32) : i32 loc(#loc20)
    %3012 = rocdl.mfma.f32.32x32x8f16 %2939, %2947, %3010, %3011, %3011, %3011 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %3013 = llvm.mlir.constant(0 : i32) : i32 loc(#loc20)
    %3014 = llvm.extractelement %3012[%3013 : i32] : vector<16xf32> loc(#loc20)
    %3015 = llvm.mlir.constant(1 : i32) : i32 loc(#loc20)
    %3016 = llvm.extractelement %3012[%3015 : i32] : vector<16xf32> loc(#loc20)
    %3017 = llvm.mlir.constant(2 : i32) : i32 loc(#loc20)
    %3018 = llvm.extractelement %3012[%3017 : i32] : vector<16xf32> loc(#loc20)
    %3019 = llvm.mlir.constant(3 : i32) : i32 loc(#loc20)
    %3020 = llvm.extractelement %3012[%3019 : i32] : vector<16xf32> loc(#loc20)
    %3021 = llvm.mlir.constant(4 : i32) : i32 loc(#loc20)
    %3022 = llvm.extractelement %3012[%3021 : i32] : vector<16xf32> loc(#loc20)
    %3023 = llvm.mlir.constant(5 : i32) : i32 loc(#loc20)
    %3024 = llvm.extractelement %3012[%3023 : i32] : vector<16xf32> loc(#loc20)
    %3025 = llvm.mlir.constant(6 : i32) : i32 loc(#loc20)
    %3026 = llvm.extractelement %3012[%3025 : i32] : vector<16xf32> loc(#loc20)
    %3027 = llvm.mlir.constant(7 : i32) : i32 loc(#loc20)
    %3028 = llvm.extractelement %3012[%3027 : i32] : vector<16xf32> loc(#loc20)
    %3029 = llvm.mlir.constant(8 : i32) : i32 loc(#loc20)
    %3030 = llvm.extractelement %3012[%3029 : i32] : vector<16xf32> loc(#loc20)
    %3031 = llvm.mlir.constant(9 : i32) : i32 loc(#loc20)
    %3032 = llvm.extractelement %3012[%3031 : i32] : vector<16xf32> loc(#loc20)
    %3033 = llvm.mlir.constant(10 : i32) : i32 loc(#loc20)
    %3034 = llvm.extractelement %3012[%3033 : i32] : vector<16xf32> loc(#loc20)
    %3035 = llvm.mlir.constant(11 : i32) : i32 loc(#loc20)
    %3036 = llvm.extractelement %3012[%3035 : i32] : vector<16xf32> loc(#loc20)
    %3037 = llvm.mlir.constant(12 : i32) : i32 loc(#loc20)
    %3038 = llvm.extractelement %3012[%3037 : i32] : vector<16xf32> loc(#loc20)
    %3039 = llvm.mlir.constant(13 : i32) : i32 loc(#loc20)
    %3040 = llvm.extractelement %3012[%3039 : i32] : vector<16xf32> loc(#loc20)
    %3041 = llvm.mlir.constant(14 : i32) : i32 loc(#loc20)
    %3042 = llvm.extractelement %3012[%3041 : i32] : vector<16xf32> loc(#loc20)
    %3043 = llvm.mlir.constant(15 : i32) : i32 loc(#loc20)
    %3044 = llvm.extractelement %3012[%3043 : i32] : vector<16xf32> loc(#loc20)
    %3045 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc20)
    %3046 = llvm.insertvalue %3014, %3045[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3047 = llvm.insertvalue %3016, %3046[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3048 = llvm.insertvalue %3018, %3047[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3049 = llvm.insertvalue %3020, %3048[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3050 = llvm.insertvalue %3022, %3049[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3051 = llvm.insertvalue %3024, %3050[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3052 = llvm.insertvalue %3026, %3051[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3053 = llvm.insertvalue %3028, %3052[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3054 = llvm.insertvalue %3030, %3053[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3055 = llvm.insertvalue %3032, %3054[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3056 = llvm.insertvalue %3034, %3055[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3057 = llvm.insertvalue %3036, %3056[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3058 = llvm.insertvalue %3038, %3057[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3059 = llvm.insertvalue %3040, %3058[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3060 = llvm.insertvalue %3042, %3059[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3061 = llvm.insertvalue %3044, %3060[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %3062 = builtin.unrealized_conversion_cast %3061 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> to tensor<64x32xf32, #mfma> loc(#loc20)
    %3063 = builtin.unrealized_conversion_cast %3062 : tensor<64x32xf32, #mfma> to !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc7)
    %3064 = llvm.extractvalue %1268[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3065 = llvm.extractvalue %1268[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3066 = llvm.extractvalue %1268[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3067 = llvm.extractvalue %1268[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3068 = llvm.extractvalue %1268[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3069 = llvm.extractvalue %1268[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3070 = llvm.extractvalue %1268[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3071 = llvm.extractvalue %1268[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3072 = llvm.extractvalue %1268[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3073 = llvm.extractvalue %1268[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3074 = llvm.extractvalue %1268[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3075 = llvm.extractvalue %1268[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3076 = llvm.extractvalue %1268[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3077 = llvm.extractvalue %1268[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3078 = llvm.extractvalue %1268[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3079 = llvm.extractvalue %1268[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3080 = llvm.extractvalue %577[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3081 = llvm.extractvalue %577[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3082 = llvm.extractvalue %577[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3083 = llvm.extractvalue %577[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3084 = llvm.extractvalue %577[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3085 = llvm.extractvalue %577[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3086 = llvm.extractvalue %577[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3087 = llvm.extractvalue %577[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3088 = llvm.extractvalue %577[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3089 = llvm.extractvalue %577[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3090 = llvm.extractvalue %577[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3091 = llvm.extractvalue %577[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3092 = llvm.extractvalue %577[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3093 = llvm.extractvalue %577[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3094 = llvm.extractvalue %577[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3095 = llvm.extractvalue %577[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc8)
    %3096 = llvm.getelementptr %3064[%3080] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3097 = llvm.getelementptr %3065[%3081] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3098 = llvm.getelementptr %3066[%3082] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3099 = llvm.getelementptr %3067[%3083] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3100 = llvm.getelementptr %3068[%3084] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3101 = llvm.getelementptr %3069[%3085] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3102 = llvm.getelementptr %3070[%3086] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3103 = llvm.getelementptr %3071[%3087] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3104 = llvm.getelementptr %3072[%3088] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3105 = llvm.getelementptr %3073[%3089] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3106 = llvm.getelementptr %3074[%3090] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3107 = llvm.getelementptr %3075[%3091] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3108 = llvm.getelementptr %3076[%3092] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3109 = llvm.getelementptr %3077[%3093] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3110 = llvm.getelementptr %3078[%3094] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3111 = llvm.getelementptr %3079[%3095] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %3112 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc8)
    %3113 = llvm.insertvalue %3096, %3112[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3114 = llvm.insertvalue %3097, %3113[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3115 = llvm.insertvalue %3098, %3114[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3116 = llvm.insertvalue %3099, %3115[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3117 = llvm.insertvalue %3100, %3116[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3118 = llvm.insertvalue %3101, %3117[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3119 = llvm.insertvalue %3102, %3118[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3120 = llvm.insertvalue %3103, %3119[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3121 = llvm.insertvalue %3104, %3120[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3122 = llvm.insertvalue %3105, %3121[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3123 = llvm.insertvalue %3106, %3122[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3124 = llvm.insertvalue %3107, %3123[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3125 = llvm.insertvalue %3108, %3124[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3126 = llvm.insertvalue %3109, %3125[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3127 = llvm.insertvalue %3110, %3126[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3128 = llvm.insertvalue %3111, %3127[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %3129 = builtin.unrealized_conversion_cast %3128 : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> to tensor<64x64x!tt.ptr<f16, 1>, #blocked> loc(#loc8)
    %3130 = builtin.unrealized_conversion_cast %3129 : tensor<64x64x!tt.ptr<f16, 1>, #blocked> to !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc7)
    %3131 = llvm.extractvalue %1269[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3132 = llvm.extractvalue %1269[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3133 = llvm.extractvalue %1269[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3134 = llvm.extractvalue %1269[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3135 = llvm.extractvalue %1269[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3136 = llvm.extractvalue %1269[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3137 = llvm.extractvalue %1269[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3138 = llvm.extractvalue %1269[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3139 = llvm.extractvalue %1265[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %3140 = llvm.extractvalue %1265[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %3141 = llvm.extractvalue %1265[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %3142 = llvm.extractvalue %1265[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %3143 = llvm.extractvalue %1265[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %3144 = llvm.extractvalue %1265[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %3145 = llvm.extractvalue %1265[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %3146 = llvm.extractvalue %1265[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc13)
    %3147 = llvm.getelementptr %3131[%3139] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc13)
    %3148 = llvm.getelementptr %3132[%3140] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc13)
    %3149 = llvm.getelementptr %3133[%3141] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc13)
    %3150 = llvm.getelementptr %3134[%3142] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc13)
    %3151 = llvm.getelementptr %3135[%3143] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc13)
    %3152 = llvm.getelementptr %3136[%3144] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc13)
    %3153 = llvm.getelementptr %3137[%3145] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc13)
    %3154 = llvm.getelementptr %3138[%3146] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc13)
    %3155 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc13)
    %3156 = llvm.insertvalue %3147, %3155[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3157 = llvm.insertvalue %3148, %3156[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3158 = llvm.insertvalue %3149, %3157[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3159 = llvm.insertvalue %3150, %3158[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3160 = llvm.insertvalue %3151, %3159[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3161 = llvm.insertvalue %3152, %3160[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3162 = llvm.insertvalue %3153, %3161[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3163 = llvm.insertvalue %3154, %3162[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %3164 = builtin.unrealized_conversion_cast %3163 : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> to tensor<64x32x!tt.ptr<f16, 1>, #blocked1> loc(#loc13)
    %3165 = builtin.unrealized_conversion_cast %3164 : tensor<64x32x!tt.ptr<f16, 1>, #blocked1> to !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc7)
    %3166 = llvm.add %1266, %558  : i32 loc(#loc7)
    llvm.br ^bb1(%3166, %3063, %3130, %3165 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc7)
  ^bb3:  // pred: ^bb1
    %3167 = llvm.bitcast %arg5 : i32 to i32 loc(#loc15)
    %3168 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %3169 = llvm.insertvalue %3167, %3168[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3170 = llvm.insertvalue %3167, %3169[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3171 = llvm.insertvalue %3167, %3170[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3172 = llvm.insertvalue %3167, %3171[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3173 = llvm.insertvalue %3167, %3172[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3174 = llvm.insertvalue %3167, %3173[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3175 = llvm.insertvalue %3167, %3174[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3176 = llvm.insertvalue %3167, %3175[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3177 = llvm.insertvalue %3167, %3176[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3178 = llvm.insertvalue %3167, %3177[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3179 = llvm.insertvalue %3167, %3178[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3180 = llvm.insertvalue %3167, %3179[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3181 = llvm.insertvalue %3167, %3180[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3182 = llvm.insertvalue %3167, %3181[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3183 = llvm.insertvalue %3167, %3182[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3184 = llvm.insertvalue %3167, %3183[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3185 = llvm.extractvalue %683[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3186 = llvm.extractvalue %683[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3187 = llvm.extractvalue %683[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3188 = llvm.extractvalue %683[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3189 = llvm.extractvalue %683[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3190 = llvm.extractvalue %683[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3191 = llvm.extractvalue %683[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3192 = llvm.extractvalue %683[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3193 = llvm.extractvalue %683[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3194 = llvm.extractvalue %683[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3195 = llvm.extractvalue %683[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3196 = llvm.extractvalue %683[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3197 = llvm.extractvalue %683[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3198 = llvm.extractvalue %683[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3199 = llvm.extractvalue %683[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3200 = llvm.extractvalue %683[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3201 = llvm.extractvalue %3184[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3202 = llvm.extractvalue %3184[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3203 = llvm.extractvalue %3184[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3204 = llvm.extractvalue %3184[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3205 = llvm.extractvalue %3184[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3206 = llvm.extractvalue %3184[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3207 = llvm.extractvalue %3184[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3208 = llvm.extractvalue %3184[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3209 = llvm.extractvalue %3184[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3210 = llvm.extractvalue %3184[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3211 = llvm.extractvalue %3184[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3212 = llvm.extractvalue %3184[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3213 = llvm.extractvalue %3184[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3214 = llvm.extractvalue %3184[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3215 = llvm.extractvalue %3184[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3216 = llvm.extractvalue %3184[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3217 = llvm.mul %3185, %3201  : i32 loc(#loc15)
    %3218 = llvm.mul %3186, %3202  : i32 loc(#loc15)
    %3219 = llvm.mul %3187, %3203  : i32 loc(#loc15)
    %3220 = llvm.mul %3188, %3204  : i32 loc(#loc15)
    %3221 = llvm.mul %3189, %3205  : i32 loc(#loc15)
    %3222 = llvm.mul %3190, %3206  : i32 loc(#loc15)
    %3223 = llvm.mul %3191, %3207  : i32 loc(#loc15)
    %3224 = llvm.mul %3192, %3208  : i32 loc(#loc15)
    %3225 = llvm.mul %3193, %3209  : i32 loc(#loc15)
    %3226 = llvm.mul %3194, %3210  : i32 loc(#loc15)
    %3227 = llvm.mul %3195, %3211  : i32 loc(#loc15)
    %3228 = llvm.mul %3196, %3212  : i32 loc(#loc15)
    %3229 = llvm.mul %3197, %3213  : i32 loc(#loc15)
    %3230 = llvm.mul %3198, %3214  : i32 loc(#loc15)
    %3231 = llvm.mul %3199, %3215  : i32 loc(#loc15)
    %3232 = llvm.mul %3200, %3216  : i32 loc(#loc15)
    %3233 = llvm.mlir.undef : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)> loc(#loc15)
    %3234 = llvm.insertvalue %3217, %3233[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3235 = llvm.insertvalue %3218, %3234[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3236 = llvm.insertvalue %3219, %3235[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3237 = llvm.insertvalue %3220, %3236[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3238 = llvm.insertvalue %3221, %3237[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3239 = llvm.insertvalue %3222, %3238[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3240 = llvm.insertvalue %3223, %3239[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3241 = llvm.insertvalue %3224, %3240[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3242 = llvm.insertvalue %3225, %3241[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3243 = llvm.insertvalue %3226, %3242[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3244 = llvm.insertvalue %3227, %3243[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3245 = llvm.insertvalue %3228, %3244[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3246 = llvm.insertvalue %3229, %3245[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3247 = llvm.insertvalue %3230, %3246[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3248 = llvm.insertvalue %3231, %3247[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3249 = llvm.insertvalue %3232, %3248[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc15)
    %3250 = llvm.bitcast %arg2 : !llvm.ptr<f32, 1> to !llvm.ptr<f32, 1> loc(#loc16)
    %3251 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> loc(#loc16)
    %3252 = llvm.insertvalue %3250, %3251[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3253 = llvm.insertvalue %3250, %3252[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3254 = llvm.insertvalue %3250, %3253[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3255 = llvm.insertvalue %3250, %3254[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3256 = llvm.insertvalue %3250, %3255[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3257 = llvm.insertvalue %3250, %3256[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3258 = llvm.insertvalue %3250, %3257[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3259 = llvm.insertvalue %3250, %3258[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3260 = llvm.insertvalue %3250, %3259[8] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3261 = llvm.insertvalue %3250, %3260[9] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3262 = llvm.insertvalue %3250, %3261[10] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3263 = llvm.insertvalue %3250, %3262[11] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3264 = llvm.insertvalue %3250, %3263[12] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3265 = llvm.insertvalue %3250, %3264[13] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3266 = llvm.insertvalue %3250, %3265[14] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3267 = llvm.insertvalue %3250, %3266[15] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3268 = llvm.extractvalue %3267[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3269 = llvm.extractvalue %3267[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3270 = llvm.extractvalue %3267[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3271 = llvm.extractvalue %3267[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3272 = llvm.extractvalue %3267[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3273 = llvm.extractvalue %3267[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3274 = llvm.extractvalue %3267[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3275 = llvm.extractvalue %3267[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3276 = llvm.extractvalue %3267[8] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3277 = llvm.extractvalue %3267[9] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3278 = llvm.extractvalue %3267[10] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3279 = llvm.extractvalue %3267[11] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3280 = llvm.extractvalue %3267[12] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3281 = llvm.extractvalue %3267[13] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3282 = llvm.extractvalue %3267[14] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3283 = llvm.extractvalue %3267[15] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3284 = llvm.extractvalue %3249[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3285 = llvm.extractvalue %3249[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3286 = llvm.extractvalue %3249[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3287 = llvm.extractvalue %3249[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3288 = llvm.extractvalue %3249[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3289 = llvm.extractvalue %3249[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3290 = llvm.extractvalue %3249[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3291 = llvm.extractvalue %3249[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3292 = llvm.extractvalue %3249[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3293 = llvm.extractvalue %3249[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3294 = llvm.extractvalue %3249[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3295 = llvm.extractvalue %3249[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3296 = llvm.extractvalue %3249[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3297 = llvm.extractvalue %3249[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3298 = llvm.extractvalue %3249[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3299 = llvm.extractvalue %3249[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc16)
    %3300 = llvm.getelementptr %3268[%3284] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3301 = llvm.getelementptr %3269[%3285] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3302 = llvm.getelementptr %3270[%3286] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3303 = llvm.getelementptr %3271[%3287] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3304 = llvm.getelementptr %3272[%3288] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3305 = llvm.getelementptr %3273[%3289] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3306 = llvm.getelementptr %3274[%3290] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3307 = llvm.getelementptr %3275[%3291] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3308 = llvm.getelementptr %3276[%3292] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3309 = llvm.getelementptr %3277[%3293] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3310 = llvm.getelementptr %3278[%3294] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3311 = llvm.getelementptr %3279[%3295] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3312 = llvm.getelementptr %3280[%3296] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3313 = llvm.getelementptr %3281[%3297] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3314 = llvm.getelementptr %3282[%3298] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3315 = llvm.getelementptr %3283[%3299] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %3316 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> loc(#loc16)
    %3317 = llvm.insertvalue %3300, %3316[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3318 = llvm.insertvalue %3301, %3317[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3319 = llvm.insertvalue %3302, %3318[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3320 = llvm.insertvalue %3303, %3319[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3321 = llvm.insertvalue %3304, %3320[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3322 = llvm.insertvalue %3305, %3321[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3323 = llvm.insertvalue %3306, %3322[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3324 = llvm.insertvalue %3307, %3323[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3325 = llvm.insertvalue %3308, %3324[8] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3326 = llvm.insertvalue %3309, %3325[9] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3327 = llvm.insertvalue %3310, %3326[10] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3328 = llvm.insertvalue %3311, %3327[11] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3329 = llvm.insertvalue %3312, %3328[12] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3330 = llvm.insertvalue %3313, %3329[13] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3331 = llvm.insertvalue %3314, %3330[14] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3332 = llvm.insertvalue %3315, %3331[15] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc16)
    %3333 = llvm.extractvalue %3332[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3334 = llvm.extractvalue %3332[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3335 = llvm.extractvalue %3332[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3336 = llvm.extractvalue %3332[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3337 = llvm.extractvalue %3332[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3338 = llvm.extractvalue %3332[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3339 = llvm.extractvalue %3332[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3340 = llvm.extractvalue %3332[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3341 = llvm.extractvalue %3332[8] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3342 = llvm.extractvalue %3332[9] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3343 = llvm.extractvalue %3332[10] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3344 = llvm.extractvalue %3332[11] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3345 = llvm.extractvalue %3332[12] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3346 = llvm.extractvalue %3332[13] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3347 = llvm.extractvalue %3332[14] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3348 = llvm.extractvalue %3332[15] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3349 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> loc(#loc17)
    %3350 = llvm.insertvalue %3333, %3349[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3351 = llvm.insertvalue %3334, %3350[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3352 = llvm.insertvalue %3335, %3351[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3353 = llvm.insertvalue %3336, %3352[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3354 = llvm.insertvalue %3337, %3353[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3355 = llvm.insertvalue %3338, %3354[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3356 = llvm.insertvalue %3339, %3355[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3357 = llvm.insertvalue %3340, %3356[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3358 = llvm.insertvalue %3341, %3357[8] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3359 = llvm.insertvalue %3342, %3358[9] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3360 = llvm.insertvalue %3343, %3359[10] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3361 = llvm.insertvalue %3344, %3360[11] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3362 = llvm.insertvalue %3345, %3361[12] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3363 = llvm.insertvalue %3346, %3362[13] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3364 = llvm.insertvalue %3347, %3363[14] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3365 = llvm.insertvalue %3348, %3364[15] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3366 = llvm.extractvalue %3365[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3367 = llvm.extractvalue %3365[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3368 = llvm.extractvalue %3365[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3369 = llvm.extractvalue %3365[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3370 = llvm.extractvalue %3365[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3371 = llvm.extractvalue %3365[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3372 = llvm.extractvalue %3365[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3373 = llvm.extractvalue %3365[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3374 = llvm.extractvalue %3365[8] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3375 = llvm.extractvalue %3365[9] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3376 = llvm.extractvalue %3365[10] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3377 = llvm.extractvalue %3365[11] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3378 = llvm.extractvalue %3365[12] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3379 = llvm.extractvalue %3365[13] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3380 = llvm.extractvalue %3365[14] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3381 = llvm.extractvalue %3365[15] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3382 = llvm.extractvalue %1219[0] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3383 = llvm.extractvalue %1219[1] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3384 = llvm.extractvalue %1219[2] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3385 = llvm.extractvalue %1219[3] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3386 = llvm.extractvalue %1219[4] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3387 = llvm.extractvalue %1219[5] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3388 = llvm.extractvalue %1219[6] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3389 = llvm.extractvalue %1219[7] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3390 = llvm.extractvalue %1219[8] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3391 = llvm.extractvalue %1219[9] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3392 = llvm.extractvalue %1219[10] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3393 = llvm.extractvalue %1219[11] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3394 = llvm.extractvalue %1219[12] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3395 = llvm.extractvalue %1219[13] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3396 = llvm.extractvalue %1219[14] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3397 = llvm.extractvalue %1219[15] : !llvm.struct<(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)>  loc(#loc17)
    %3398 = llvm.getelementptr %3366[%3382] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3399 = llvm.getelementptr %3367[%3383] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3400 = llvm.getelementptr %3368[%3384] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3401 = llvm.getelementptr %3369[%3385] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3402 = llvm.getelementptr %3370[%3386] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3403 = llvm.getelementptr %3371[%3387] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3404 = llvm.getelementptr %3372[%3388] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3405 = llvm.getelementptr %3373[%3389] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3406 = llvm.getelementptr %3374[%3390] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3407 = llvm.getelementptr %3375[%3391] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3408 = llvm.getelementptr %3376[%3392] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3409 = llvm.getelementptr %3377[%3393] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3410 = llvm.getelementptr %3378[%3394] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3411 = llvm.getelementptr %3379[%3395] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3412 = llvm.getelementptr %3380[%3396] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3413 = llvm.getelementptr %3381[%3397] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %3414 = llvm.mlir.undef : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)> loc(#loc17)
    %3415 = llvm.insertvalue %3398, %3414[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3416 = llvm.insertvalue %3399, %3415[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3417 = llvm.insertvalue %3400, %3416[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3418 = llvm.insertvalue %3401, %3417[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3419 = llvm.insertvalue %3402, %3418[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3420 = llvm.insertvalue %3403, %3419[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3421 = llvm.insertvalue %3404, %3420[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3422 = llvm.insertvalue %3405, %3421[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3423 = llvm.insertvalue %3406, %3422[8] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3424 = llvm.insertvalue %3407, %3423[9] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3425 = llvm.insertvalue %3408, %3424[10] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3426 = llvm.insertvalue %3409, %3425[11] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3427 = llvm.insertvalue %3410, %3426[12] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3428 = llvm.insertvalue %3411, %3427[13] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3429 = llvm.insertvalue %3412, %3428[14] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3430 = llvm.insertvalue %3413, %3429[15] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc17)
    %3431 = llvm.extractvalue %3430[0] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3432 = llvm.extractvalue %3430[1] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3433 = llvm.extractvalue %3430[2] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3434 = llvm.extractvalue %3430[3] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3435 = llvm.extractvalue %3430[4] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3436 = llvm.extractvalue %3430[5] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3437 = llvm.extractvalue %3430[6] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3438 = llvm.extractvalue %3430[7] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3439 = llvm.extractvalue %3430[8] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3440 = llvm.extractvalue %3430[9] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3441 = llvm.extractvalue %3430[10] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3442 = llvm.extractvalue %3430[11] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3443 = llvm.extractvalue %3430[12] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3444 = llvm.extractvalue %3430[13] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3445 = llvm.extractvalue %3430[14] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3446 = llvm.extractvalue %3430[15] : !llvm.struct<(ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>, ptr<f32, 1>)>  loc(#loc18)
    %3447 = llvm.extractvalue %1267[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3448 = llvm.extractvalue %1267[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3449 = llvm.extractvalue %1267[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3450 = llvm.extractvalue %1267[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3451 = llvm.extractvalue %1267[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3452 = llvm.extractvalue %1267[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3453 = llvm.extractvalue %1267[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3454 = llvm.extractvalue %1267[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3455 = llvm.extractvalue %1267[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3456 = llvm.extractvalue %1267[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3457 = llvm.extractvalue %1267[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3458 = llvm.extractvalue %1267[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3459 = llvm.extractvalue %1267[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3460 = llvm.extractvalue %1267[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3461 = llvm.extractvalue %1267[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3462 = llvm.extractvalue %1267[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %3463 = llvm.mlir.constant(true) : i1 loc(#loc18)
    %3464 = rocdl.workitem.id.x : i32 loc(#loc18)
    %3465 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3466 = nvgpu.cluster_id loc(#loc18)
    %3467 = llvm.mlir.constant(64 : i32) : i32 loc(#loc18)
    %3468 = llvm.urem %3464, %3467  : i32 loc(#loc18)
    %3469 = llvm.udiv %3464, %3467  : i32 loc(#loc18)
    %3470 = llvm.mlir.constant(2 : i32) : i32 loc(#loc18)
    %3471 = llvm.urem %3469, %3470  : i32 loc(#loc18)
    %3472 = llvm.udiv %3469, %3470  : i32 loc(#loc18)
    %3473 = llvm.mlir.constant(2 : i32) : i32 loc(#loc18)
    %3474 = llvm.urem %3472, %3473  : i32 loc(#loc18)
    %3475 = llvm.udiv %3472, %3473  : i32 loc(#loc18)
    %3476 = llvm.mlir.constant(32 : i32) : i32 loc(#loc18)
    %3477 = llvm.urem %3468, %3476  : i32 loc(#loc18)
    %3478 = llvm.udiv %3468, %3476  : i32 loc(#loc18)
    %3479 = llvm.mlir.constant(2 : i32) : i32 loc(#loc18)
    %3480 = llvm.urem %3478, %3479  : i32 loc(#loc18)
    %3481 = llvm.udiv %3478, %3479  : i32 loc(#loc18)
    %3482 = llvm.mlir.constant(32 : i32) : i32 loc(#loc18)
    %3483 = llvm.mul %3471, %3482  : i32 loc(#loc18)
    %3484 = llvm.add %3483, %3477  : i32 loc(#loc18)
    %3485 = llvm.mlir.constant(32 : i32) : i32 loc(#loc18)
    %3486 = llvm.mlir.constant(1 : i32) : i32 loc(#loc18)
    %3487 = llvm.mul %3484, %3486  : i32 loc(#loc18)
    %3488 = llvm.icmp "slt" %3487, %3485 : i32 loc(#loc18)
    %3489 = llvm.and %3463, %3488  : i1 loc(#loc18)
    %3490 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3491 = llvm.bitcast %3447 : f32 to f32 loc(#loc18)
    %3492 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3493 = llvm.insertelement %3491, %3490[%3492 : i32] : vector<1xf32> loc(#loc18)
    %3494 = llvm.bitcast %3493 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3494, %3431 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3495 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3496 = llvm.bitcast %3448 : f32 to f32 loc(#loc18)
    %3497 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3498 = llvm.insertelement %3496, %3495[%3497 : i32] : vector<1xf32> loc(#loc18)
    %3499 = llvm.bitcast %3498 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3499, %3432 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3500 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3501 = llvm.bitcast %3449 : f32 to f32 loc(#loc18)
    %3502 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3503 = llvm.insertelement %3501, %3500[%3502 : i32] : vector<1xf32> loc(#loc18)
    %3504 = llvm.bitcast %3503 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3504, %3433 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3505 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3506 = llvm.bitcast %3450 : f32 to f32 loc(#loc18)
    %3507 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3508 = llvm.insertelement %3506, %3505[%3507 : i32] : vector<1xf32> loc(#loc18)
    %3509 = llvm.bitcast %3508 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3509, %3434 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3510 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3511 = llvm.bitcast %3451 : f32 to f32 loc(#loc18)
    %3512 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3513 = llvm.insertelement %3511, %3510[%3512 : i32] : vector<1xf32> loc(#loc18)
    %3514 = llvm.bitcast %3513 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3514, %3435 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3515 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3516 = llvm.bitcast %3452 : f32 to f32 loc(#loc18)
    %3517 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3518 = llvm.insertelement %3516, %3515[%3517 : i32] : vector<1xf32> loc(#loc18)
    %3519 = llvm.bitcast %3518 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3519, %3436 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3520 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3521 = llvm.bitcast %3453 : f32 to f32 loc(#loc18)
    %3522 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3523 = llvm.insertelement %3521, %3520[%3522 : i32] : vector<1xf32> loc(#loc18)
    %3524 = llvm.bitcast %3523 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3524, %3437 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3525 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3526 = llvm.bitcast %3454 : f32 to f32 loc(#loc18)
    %3527 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3528 = llvm.insertelement %3526, %3525[%3527 : i32] : vector<1xf32> loc(#loc18)
    %3529 = llvm.bitcast %3528 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3529, %3438 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3530 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3531 = llvm.bitcast %3455 : f32 to f32 loc(#loc18)
    %3532 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3533 = llvm.insertelement %3531, %3530[%3532 : i32] : vector<1xf32> loc(#loc18)
    %3534 = llvm.bitcast %3533 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3534, %3439 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3535 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3536 = llvm.bitcast %3456 : f32 to f32 loc(#loc18)
    %3537 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3538 = llvm.insertelement %3536, %3535[%3537 : i32] : vector<1xf32> loc(#loc18)
    %3539 = llvm.bitcast %3538 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3539, %3440 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3540 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3541 = llvm.bitcast %3457 : f32 to f32 loc(#loc18)
    %3542 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3543 = llvm.insertelement %3541, %3540[%3542 : i32] : vector<1xf32> loc(#loc18)
    %3544 = llvm.bitcast %3543 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3544, %3441 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3545 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3546 = llvm.bitcast %3458 : f32 to f32 loc(#loc18)
    %3547 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3548 = llvm.insertelement %3546, %3545[%3547 : i32] : vector<1xf32> loc(#loc18)
    %3549 = llvm.bitcast %3548 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3549, %3442 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3550 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3551 = llvm.bitcast %3459 : f32 to f32 loc(#loc18)
    %3552 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3553 = llvm.insertelement %3551, %3550[%3552 : i32] : vector<1xf32> loc(#loc18)
    %3554 = llvm.bitcast %3553 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3554, %3443 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3555 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3556 = llvm.bitcast %3460 : f32 to f32 loc(#loc18)
    %3557 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3558 = llvm.insertelement %3556, %3555[%3557 : i32] : vector<1xf32> loc(#loc18)
    %3559 = llvm.bitcast %3558 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3559, %3444 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3560 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3561 = llvm.bitcast %3461 : f32 to f32 loc(#loc18)
    %3562 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3563 = llvm.insertelement %3561, %3560[%3562 : i32] : vector<1xf32> loc(#loc18)
    %3564 = llvm.bitcast %3563 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3564, %3445 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %3565 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %3566 = llvm.bitcast %3462 : f32 to f32 loc(#loc18)
    %3567 = llvm.mlir.constant(0 : i32) : i32 loc(#loc18)
    %3568 = llvm.insertelement %3566, %3565[%3567 : i32] : vector<1xf32> loc(#loc18)
    %3569 = llvm.bitcast %3568 : vector<1xf32> to i32 loc(#loc18)
    scf.if %3489 {
      llvm.store %3569, %3446 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    llvm.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc20 = loc(fused[#loc14, #loc6])


// -----// IR Dump After Canonicalizer (canonicalize) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
module attributes {"triton_gpu.compute-capability" = 0 : i32, triton_gpu.externs = {library_0 = "/triton/python/triton/third_party/hip/lib/bitcode/opencl.bc", library_1 = "/triton/python/triton/third_party/hip/lib/bitcode/ocml.bc", library_2 = "/triton/python/triton/third_party/hip/lib/bitcode/ockl.bc", library_3 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 8192 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public", "triton_gpu.num-tma-load" = 0 : i32, "triton_gpu.num-tma-store" = 0 : i32} {
    %0 = llvm.mlir.constant(15 : i32) : i32 loc(#loc20)
    %1 = llvm.mlir.constant(14 : i32) : i32 loc(#loc20)
    %2 = llvm.mlir.constant(13 : i32) : i32 loc(#loc20)
    %3 = llvm.mlir.constant(12 : i32) : i32 loc(#loc20)
    %4 = llvm.mlir.constant(1792 : i32) : i32 loc(#loc3)
    %5 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc3)
    %6 = llvm.mlir.constant(1280 : i32) : i32 loc(#loc3)
    %7 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc3)
    %8 = llvm.mlir.constant(768 : i32) : i32 loc(#loc3)
    %9 = llvm.mlir.constant(512 : i32) : i32 loc(#loc3)
    %10 = llvm.mlir.constant(256 : i32) : i32 loc(#loc3)
    %11 = llvm.mlir.constant(96 : i32) : i32 loc(#loc3)
    %12 = llvm.mlir.constant(56 : i32) : i32 loc(#loc4)
    %13 = llvm.mlir.constant(48 : i32) : i32 loc(#loc4)
    %14 = llvm.mlir.constant(40 : i32) : i32 loc(#loc4)
    %15 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %16 = llvm.mlir.constant(true) : i1 loc(#loc4)
    %17 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %18 = llvm.mlir.constant(128 : i32) : i32 loc(#loc6)
    %19 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc2)
    %20 = llvm.mlir.constant(7 : i32) : i32 loc(#loc7)
    %21 = llvm.mlir.constant(6 : i32) : i32 loc(#loc7)
    %22 = llvm.mlir.constant(5 : i32) : i32 loc(#loc7)
    %23 = llvm.mlir.constant(27 : i32) : i32 loc(#loc5)
    %24 = llvm.mlir.constant(26 : i32) : i32 loc(#loc5)
    %25 = llvm.mlir.constant(25 : i32) : i32 loc(#loc5)
    %26 = llvm.mlir.constant(24 : i32) : i32 loc(#loc5)
    %27 = llvm.mlir.constant(19 : i32) : i32 loc(#loc5)
    %28 = llvm.mlir.constant(18 : i32) : i32 loc(#loc5)
    %29 = llvm.mlir.constant(17 : i32) : i32 loc(#loc5)
    %30 = llvm.mlir.constant(11 : i32) : i32 loc(#loc5)
    %31 = llvm.mlir.constant(10 : i32) : i32 loc(#loc5)
    %32 = llvm.mlir.constant(9 : i32) : i32 loc(#loc5)
    %33 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %34 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %35 = llvm.mlir.constant(16 : i32) : i32 loc(#loc5)
    %36 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %37 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %38 = llvm.mlir.constant(8 : i32) : i32 loc(#loc5)
    %39 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %40 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %41 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %42 = rocdl.workitem.id.x : i32 loc(#loc5)
    %43 = llvm.urem %42, %41  : i32 loc(#loc5)
    %44 = llvm.udiv %42, %41  : i32 loc(#loc5)
    %45 = llvm.udiv %44, %40  : i32 loc(#loc5)
    %46 = llvm.urem %45, %39  : i32 loc(#loc5)
    %47 = llvm.udiv %43, %38  : i32 loc(#loc5)
    %48 = llvm.urem %47, %38  : i32 loc(#loc5)
    %49 = llvm.urem %46, %38  : i32 loc(#loc5)
    %50 = llvm.urem %48, %41  : i32 loc(#loc5)
    %51 = llvm.mul %49, %38  : i32 loc(#loc5)
    %52 = llvm.add %50, %51  : i32 loc(#loc5)
    %53 = llvm.mul %52, %40  : i32 loc(#loc5)
    %54 = llvm.urem %37, %40  : i32 loc(#loc5)
    %55 = llvm.urem %54, %40  : i32 loc(#loc5)
    %56 = llvm.mul %55, %41  : i32 loc(#loc5)
    %57 = llvm.add %53, %56  : i32 loc(#loc5)
    %58 = llvm.add %57, %37  : i32 loc(#loc5)
    %59 = llvm.add %57, %36  : i32 loc(#loc5)
    %60 = rocdl.workitem.id.x : i32 loc(#loc5)
    %61 = llvm.urem %60, %41  : i32 loc(#loc5)
    %62 = llvm.udiv %60, %41  : i32 loc(#loc5)
    %63 = llvm.udiv %62, %40  : i32 loc(#loc5)
    %64 = llvm.urem %63, %39  : i32 loc(#loc5)
    %65 = llvm.udiv %61, %39  : i32 loc(#loc5)
    %66 = llvm.urem %65, %35  : i32 loc(#loc5)
    %67 = llvm.urem %64, %39  : i32 loc(#loc5)
    %68 = llvm.urem %66, %41  : i32 loc(#loc5)
    %69 = llvm.mul %67, %35  : i32 loc(#loc5)
    %70 = llvm.add %68, %69  : i32 loc(#loc5)
    %71 = llvm.mul %70, %40  : i32 loc(#loc5)
    %72 = llvm.urem %37, %40  : i32 loc(#loc5)
    %73 = llvm.urem %72, %40  : i32 loc(#loc5)
    %74 = llvm.mul %73, %41  : i32 loc(#loc5)
    %75 = llvm.add %71, %74  : i32 loc(#loc5)
    %76 = llvm.add %75, %37  : i32 loc(#loc5)
    %77 = rocdl.workitem.id.x : i32 loc(#loc5)
    %78 = llvm.urem %77, %41  : i32 loc(#loc5)
    %79 = llvm.udiv %77, %41  : i32 loc(#loc5)
    %80 = llvm.urem %79, %34  : i32 loc(#loc5)
    %81 = llvm.urem %80, %34  : i32 loc(#loc5)
    %82 = llvm.mul %81, %36  : i32 loc(#loc5)
    %83 = llvm.udiv %78, %36  : i32 loc(#loc5)
    %84 = llvm.mul %83, %39  : i32 loc(#loc5)
    %85 = llvm.add %84, %82  : i32 loc(#loc5)
    %86 = llvm.udiv %37, %40  : i32 loc(#loc5)
    %87 = llvm.urem %86, %40  : i32 loc(#loc5)
    %88 = llvm.urem %87, %40  : i32 loc(#loc5)
    %89 = llvm.mul %88, %41  : i32 loc(#loc5)
    %90 = llvm.add %85, %89  : i32 loc(#loc5)
    %91 = llvm.add %90, %37  : i32 loc(#loc5)
    %92 = llvm.add %90, %40  : i32 loc(#loc5)
    %93 = llvm.add %90, %34  : i32 loc(#loc5)
    %94 = llvm.add %90, %33  : i32 loc(#loc5)
    %95 = llvm.add %90, %38  : i32 loc(#loc5)
    %96 = llvm.add %90, %32  : i32 loc(#loc5)
    %97 = llvm.add %90, %31  : i32 loc(#loc5)
    %98 = llvm.add %90, %30  : i32 loc(#loc5)
    %99 = llvm.add %90, %35  : i32 loc(#loc5)
    %100 = llvm.add %90, %29  : i32 loc(#loc5)
    %101 = llvm.add %90, %28  : i32 loc(#loc5)
    %102 = llvm.add %90, %27  : i32 loc(#loc5)
    %103 = llvm.add %90, %26  : i32 loc(#loc5)
    %104 = llvm.add %90, %25  : i32 loc(#loc5)
    %105 = llvm.add %90, %24  : i32 loc(#loc5)
    %106 = llvm.add %90, %23  : i32 loc(#loc5)
    %107 = rocdl.workitem.id.x : i32 loc(#loc7)
    %108 = llvm.urem %107, %41  : i32 loc(#loc7)
    %109 = llvm.udiv %107, %41  : i32 loc(#loc7)
    %110 = llvm.urem %109, %40  : i32 loc(#loc7)
    %111 = llvm.urem %108, %38  : i32 loc(#loc7)
    %112 = llvm.urem %110, %40  : i32 loc(#loc7)
    %113 = llvm.urem %111, %38  : i32 loc(#loc7)
    %114 = llvm.mul %112, %38  : i32 loc(#loc7)
    %115 = llvm.add %113, %114  : i32 loc(#loc7)
    %116 = llvm.mul %115, %38  : i32 loc(#loc7)
    %117 = llvm.udiv %37, %40  : i32 loc(#loc7)
    %118 = llvm.urem %117, %40  : i32 loc(#loc7)
    %119 = llvm.urem %118, %40  : i32 loc(#loc7)
    %120 = llvm.mul %119, %41  : i32 loc(#loc7)
    %121 = llvm.add %116, %120  : i32 loc(#loc7)
    %122 = llvm.add %121, %37  : i32 loc(#loc7)
    %123 = llvm.add %121, %40  : i32 loc(#loc7)
    %124 = llvm.add %121, %34  : i32 loc(#loc7)
    %125 = llvm.add %121, %33  : i32 loc(#loc7)
    %126 = llvm.add %121, %39  : i32 loc(#loc7)
    %127 = llvm.add %121, %22  : i32 loc(#loc7)
    %128 = llvm.add %121, %21  : i32 loc(#loc7)
    %129 = llvm.add %121, %20  : i32 loc(#loc7)
    %130 = rocdl.workitem.id.x : i32 loc(#loc8)
    %131 = llvm.urem %130, %41  : i32 loc(#loc8)
    %132 = llvm.udiv %130, %41  : i32 loc(#loc8)
    %133 = llvm.urem %132, %40  : i32 loc(#loc8)
    %134 = llvm.urem %131, %39  : i32 loc(#loc8)
    %135 = llvm.urem %133, %40  : i32 loc(#loc8)
    %136 = llvm.urem %134, %39  : i32 loc(#loc8)
    %137 = llvm.mul %135, %39  : i32 loc(#loc8)
    %138 = llvm.add %136, %137  : i32 loc(#loc8)
    %139 = llvm.mul %138, %38  : i32 loc(#loc8)
    %140 = llvm.udiv %37, %40  : i32 loc(#loc8)
    %141 = llvm.urem %140, %40  : i32 loc(#loc8)
    %142 = llvm.urem %141, %40  : i32 loc(#loc8)
    %143 = llvm.mul %142, %36  : i32 loc(#loc8)
    %144 = llvm.add %139, %143  : i32 loc(#loc8)
    %145 = llvm.add %144, %37  : i32 loc(#loc8)
    %146 = llvm.add %144, %40  : i32 loc(#loc8)
    %147 = llvm.add %144, %34  : i32 loc(#loc8)
    %148 = llvm.add %144, %33  : i32 loc(#loc8)
    %149 = llvm.add %144, %39  : i32 loc(#loc8)
    %150 = llvm.add %144, %22  : i32 loc(#loc8)
    %151 = llvm.add %144, %21  : i32 loc(#loc8)
    %152 = llvm.add %144, %20  : i32 loc(#loc8)
    %153 = rocdl.workitem.id.x : i32 loc(#loc8)
    %154 = llvm.urem %153, %41  : i32 loc(#loc8)
    %155 = llvm.udiv %153, %41  : i32 loc(#loc8)
    %156 = llvm.udiv %155, %34  : i32 loc(#loc8)
    %157 = llvm.urem %156, %34  : i32 loc(#loc8)
    %158 = llvm.urem %157, %40  : i32 loc(#loc8)
    %159 = llvm.mul %158, %36  : i32 loc(#loc8)
    %160 = llvm.urem %154, %36  : i32 loc(#loc8)
    %161 = llvm.add %160, %159  : i32 loc(#loc8)
    %162 = llvm.urem %37, %40  : i32 loc(#loc8)
    %163 = llvm.urem %162, %40  : i32 loc(#loc8)
    %164 = llvm.mul %163, %36  : i32 loc(#loc8)
    %165 = llvm.add %161, %164  : i32 loc(#loc8)
    %166 = llvm.add %165, %37  : i32 loc(#loc8)
    %167 = rocdl.workitem.id.x : i32 loc(#loc4)
    %168 = llvm.urem %167, %41  : i32 loc(#loc4)
    %169 = llvm.udiv %167, %41  : i32 loc(#loc4)
    %170 = llvm.urem %169, %40  : i32 loc(#loc4)
    %171 = llvm.udiv %169, %40  : i32 loc(#loc4)
    %172 = llvm.urem %171, %39  : i32 loc(#loc4)
    %173 = llvm.urem %168, %38  : i32 loc(#loc4)
    %174 = llvm.udiv %168, %38  : i32 loc(#loc4)
    %175 = llvm.urem %174, %38  : i32 loc(#loc4)
    %176 = llvm.urem %172, %38  : i32 loc(#loc4)
    %177 = llvm.urem %175, %41  : i32 loc(#loc4)
    %178 = llvm.mul %176, %38  : i32 loc(#loc4)
    %179 = llvm.add %177, %178  : i32 loc(#loc4)
    %180 = llvm.mul %179, %40  : i32 loc(#loc4)
    %181 = llvm.urem %170, %40  : i32 loc(#loc4)
    %182 = llvm.urem %173, %38  : i32 loc(#loc4)
    %183 = llvm.mul %181, %38  : i32 loc(#loc4)
    %184 = llvm.add %182, %183  : i32 loc(#loc4)
    %185 = llvm.mul %184, %38  : i32 loc(#loc4)
    %186 = llvm.add %180, %37  : i32 loc(#loc4)
    %187 = llvm.add %185, %37  : i32 loc(#loc4)
    %188 = llvm.add %180, %37  : i32 loc(#loc4)
    %189 = llvm.add %185, %39  : i32 loc(#loc4)
    %190 = llvm.add %180, %36  : i32 loc(#loc4)
    %191 = llvm.add %180, %36  : i32 loc(#loc4)
    %192 = rocdl.workitem.id.x : i32 loc(#loc3)
    %193 = llvm.urem %192, %41  : i32 loc(#loc3)
    %194 = llvm.udiv %192, %41  : i32 loc(#loc3)
    %195 = llvm.urem %194, %40  : i32 loc(#loc3)
    %196 = llvm.udiv %194, %40  : i32 loc(#loc3)
    %197 = llvm.urem %196, %39  : i32 loc(#loc3)
    %198 = llvm.urem %193, %39  : i32 loc(#loc3)
    %199 = llvm.udiv %193, %39  : i32 loc(#loc3)
    %200 = llvm.urem %199, %35  : i32 loc(#loc3)
    %201 = llvm.urem %197, %39  : i32 loc(#loc3)
    %202 = llvm.urem %200, %41  : i32 loc(#loc3)
    %203 = llvm.mul %201, %35  : i32 loc(#loc3)
    %204 = llvm.add %202, %203  : i32 loc(#loc3)
    %205 = llvm.mul %204, %40  : i32 loc(#loc3)
    %206 = llvm.urem %195, %40  : i32 loc(#loc3)
    %207 = llvm.urem %198, %39  : i32 loc(#loc3)
    %208 = llvm.mul %206, %39  : i32 loc(#loc3)
    %209 = llvm.add %207, %208  : i32 loc(#loc3)
    %210 = llvm.mul %209, %38  : i32 loc(#loc3)
    %211 = llvm.add %205, %37  : i32 loc(#loc3)
    %212 = llvm.add %210, %37  : i32 loc(#loc3)
    %213 = llvm.add %205, %37  : i32 loc(#loc3)
    %214 = llvm.add %205, %37  : i32 loc(#loc3)
    %215 = llvm.add %205, %37  : i32 loc(#loc3)
    %216 = llvm.add %205, %37  : i32 loc(#loc3)
    %217 = llvm.add %205, %37  : i32 loc(#loc3)
    %218 = llvm.add %205, %37  : i32 loc(#loc3)
    %219 = llvm.add %205, %37  : i32 loc(#loc3)
    %220 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3> loc(#loc)
    %221 = llvm.bitcast %220 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3> loc(#loc)
    %222 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc2)
    %223 = llvm.insertvalue %19, %222[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %224 = llvm.insertvalue %19, %223[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %225 = llvm.insertvalue %19, %224[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %226 = llvm.insertvalue %19, %225[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %227 = llvm.insertvalue %19, %226[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %228 = llvm.insertvalue %19, %227[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %229 = llvm.insertvalue %19, %228[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %230 = llvm.insertvalue %19, %229[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %231 = llvm.insertvalue %19, %230[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %232 = llvm.insertvalue %19, %231[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %233 = llvm.insertvalue %19, %232[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %234 = llvm.insertvalue %19, %233[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %235 = llvm.insertvalue %19, %234[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %236 = llvm.insertvalue %19, %235[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %237 = llvm.insertvalue %19, %236[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %238 = llvm.insertvalue %19, %237[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %239 = llvm.add %58, %17  : i32 loc(#loc5)
    %240 = llvm.add %59, %17  : i32 loc(#loc5)
    %241 = llvm.add %76, %17  : i32 loc(#loc5)
    %242 = llvm.add %91, %17  : i32 loc(#loc5)
    %243 = llvm.add %92, %17  : i32 loc(#loc5)
    %244 = llvm.add %93, %17  : i32 loc(#loc5)
    %245 = llvm.add %94, %17  : i32 loc(#loc5)
    %246 = llvm.add %95, %17  : i32 loc(#loc5)
    %247 = llvm.add %96, %17  : i32 loc(#loc5)
    %248 = llvm.add %97, %17  : i32 loc(#loc5)
    %249 = llvm.add %98, %17  : i32 loc(#loc5)
    %250 = llvm.add %99, %17  : i32 loc(#loc5)
    %251 = llvm.add %100, %17  : i32 loc(#loc5)
    %252 = llvm.add %101, %17  : i32 loc(#loc5)
    %253 = llvm.add %102, %17  : i32 loc(#loc5)
    %254 = llvm.add %103, %17  : i32 loc(#loc5)
    %255 = llvm.add %104, %17  : i32 loc(#loc5)
    %256 = llvm.add %105, %17  : i32 loc(#loc5)
    %257 = llvm.add %106, %17  : i32 loc(#loc5)
    %258 = llvm.mul %239, %arg3  : i32 loc(#loc9)
    %259 = llvm.mul %240, %arg3  : i32 loc(#loc9)
    %260 = llvm.getelementptr %arg0[%258] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc5)
    %261 = llvm.getelementptr %arg0[%259] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc5)
    %262 = llvm.add %122, %17  : i32 loc(#loc7)
    %263 = llvm.add %123, %17  : i32 loc(#loc7)
    %264 = llvm.add %124, %17  : i32 loc(#loc7)
    %265 = llvm.add %125, %17  : i32 loc(#loc7)
    %266 = llvm.add %126, %17  : i32 loc(#loc7)
    %267 = llvm.add %127, %17  : i32 loc(#loc7)
    %268 = llvm.add %128, %17  : i32 loc(#loc7)
    %269 = llvm.add %129, %17  : i32 loc(#loc7)
    %270 = llvm.getelementptr %260[%262] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %271 = llvm.getelementptr %260[%263] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %272 = llvm.getelementptr %260[%264] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %273 = llvm.getelementptr %260[%265] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %274 = llvm.getelementptr %260[%266] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %275 = llvm.getelementptr %260[%267] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %276 = llvm.getelementptr %260[%268] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %277 = llvm.getelementptr %260[%269] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %278 = llvm.getelementptr %261[%262] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %279 = llvm.getelementptr %261[%263] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %280 = llvm.getelementptr %261[%264] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %281 = llvm.getelementptr %261[%265] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %282 = llvm.getelementptr %261[%266] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %283 = llvm.getelementptr %261[%267] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %284 = llvm.getelementptr %261[%268] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %285 = llvm.getelementptr %261[%269] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %286 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc7)
    %287 = llvm.insertvalue %270, %286[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %288 = llvm.insertvalue %271, %287[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %289 = llvm.insertvalue %272, %288[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %290 = llvm.insertvalue %273, %289[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %291 = llvm.insertvalue %274, %290[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %292 = llvm.insertvalue %275, %291[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %293 = llvm.insertvalue %276, %292[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %294 = llvm.insertvalue %277, %293[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %295 = llvm.insertvalue %278, %294[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %296 = llvm.insertvalue %279, %295[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %297 = llvm.insertvalue %280, %296[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %298 = llvm.insertvalue %281, %297[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %299 = llvm.insertvalue %282, %298[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %300 = llvm.insertvalue %283, %299[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %301 = llvm.insertvalue %284, %300[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %302 = llvm.insertvalue %285, %301[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %303 = llvm.mul %241, %arg4  : i32 loc(#loc10)
    %304 = llvm.getelementptr %arg1[%303] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %305 = llvm.add %145, %17  : i32 loc(#loc8)
    %306 = llvm.add %146, %17  : i32 loc(#loc8)
    %307 = llvm.add %147, %17  : i32 loc(#loc8)
    %308 = llvm.add %148, %17  : i32 loc(#loc8)
    %309 = llvm.add %149, %17  : i32 loc(#loc8)
    %310 = llvm.add %150, %17  : i32 loc(#loc8)
    %311 = llvm.add %151, %17  : i32 loc(#loc8)
    %312 = llvm.add %152, %17  : i32 loc(#loc8)
    %313 = llvm.add %166, %17  : i32 loc(#loc8)
    %314 = llvm.getelementptr %304[%305] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %315 = llvm.getelementptr %304[%306] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %316 = llvm.getelementptr %304[%307] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %317 = llvm.getelementptr %304[%308] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %318 = llvm.getelementptr %304[%309] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %319 = llvm.getelementptr %304[%310] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %320 = llvm.getelementptr %304[%311] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %321 = llvm.getelementptr %304[%312] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %322 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc8)
    %323 = llvm.insertvalue %314, %322[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %324 = llvm.insertvalue %315, %323[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %325 = llvm.insertvalue %316, %324[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %326 = llvm.insertvalue %317, %325[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %327 = llvm.insertvalue %318, %326[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %328 = llvm.insertvalue %319, %327[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %329 = llvm.insertvalue %320, %328[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %330 = llvm.insertvalue %321, %329[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %331 = llvm.mul %arg4, %41  : i32 loc(#loc12)
    llvm.br ^bb1(%37, %238, %302, %330 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc6)
  ^bb1(%332: i32 loc("/triton/python/test/unit/language/test_core_amd.py":1977:25), %333: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/triton/python/test/unit/language/test_core_amd.py":1980:33), %334: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1974:51), %335: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)):  // 2 preds: ^bb0, ^bb2
    %336 = llvm.icmp "slt" %332, %18 : i32 loc(#loc6)
    llvm.cond_br %336, ^bb2, ^bb3 loc(#loc6)
  ^bb2:  // pred: ^bb1
    %337 = llvm.extractvalue %334[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %338 = llvm.extractvalue %334[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %339 = llvm.extractvalue %334[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %340 = llvm.extractvalue %334[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %341 = llvm.extractvalue %334[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %342 = llvm.extractvalue %334[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %343 = llvm.extractvalue %334[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %344 = llvm.extractvalue %334[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %345 = llvm.addrspacecast %337 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %346 = llvm.load %345 : !llvm.ptr<i32> loc(#loc4)
    %347 = llvm.bitcast %346 : i32 to vector<2xf16> loc(#loc4)
    %348 = llvm.extractelement %347[%17 : i32] : vector<2xf16> loc(#loc4)
    %349 = llvm.extractelement %347[%15 : i32] : vector<2xf16> loc(#loc4)
    %350 = llvm.addrspacecast %338 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %351 = llvm.load %350 : !llvm.ptr<i32> loc(#loc4)
    %352 = llvm.bitcast %351 : i32 to vector<2xf16> loc(#loc4)
    %353 = llvm.extractelement %352[%17 : i32] : vector<2xf16> loc(#loc4)
    %354 = llvm.extractelement %352[%15 : i32] : vector<2xf16> loc(#loc4)
    %355 = llvm.addrspacecast %339 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %356 = llvm.load %355 : !llvm.ptr<i32> loc(#loc4)
    %357 = llvm.bitcast %356 : i32 to vector<2xf16> loc(#loc4)
    %358 = llvm.extractelement %357[%17 : i32] : vector<2xf16> loc(#loc4)
    %359 = llvm.extractelement %357[%15 : i32] : vector<2xf16> loc(#loc4)
    %360 = llvm.addrspacecast %340 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %361 = llvm.load %360 : !llvm.ptr<i32> loc(#loc4)
    %362 = llvm.bitcast %361 : i32 to vector<2xf16> loc(#loc4)
    %363 = llvm.extractelement %362[%17 : i32] : vector<2xf16> loc(#loc4)
    %364 = llvm.extractelement %362[%15 : i32] : vector<2xf16> loc(#loc4)
    %365 = llvm.addrspacecast %341 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %366 = llvm.load %365 : !llvm.ptr<i32> loc(#loc4)
    %367 = llvm.bitcast %366 : i32 to vector<2xf16> loc(#loc4)
    %368 = llvm.extractelement %367[%17 : i32] : vector<2xf16> loc(#loc4)
    %369 = llvm.extractelement %367[%15 : i32] : vector<2xf16> loc(#loc4)
    %370 = llvm.addrspacecast %342 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %371 = llvm.load %370 : !llvm.ptr<i32> loc(#loc4)
    %372 = llvm.bitcast %371 : i32 to vector<2xf16> loc(#loc4)
    %373 = llvm.extractelement %372[%17 : i32] : vector<2xf16> loc(#loc4)
    %374 = llvm.extractelement %372[%15 : i32] : vector<2xf16> loc(#loc4)
    %375 = llvm.addrspacecast %343 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %376 = llvm.load %375 : !llvm.ptr<i32> loc(#loc4)
    %377 = llvm.bitcast %376 : i32 to vector<2xf16> loc(#loc4)
    %378 = llvm.extractelement %377[%17 : i32] : vector<2xf16> loc(#loc4)
    %379 = llvm.extractelement %377[%15 : i32] : vector<2xf16> loc(#loc4)
    %380 = llvm.addrspacecast %344 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %381 = llvm.load %380 : !llvm.ptr<i32> loc(#loc4)
    %382 = llvm.bitcast %381 : i32 to vector<2xf16> loc(#loc4)
    %383 = llvm.extractelement %382[%17 : i32] : vector<2xf16> loc(#loc4)
    %384 = llvm.extractelement %382[%15 : i32] : vector<2xf16> loc(#loc4)
    rocdl.barrier loc(#loc4)
    %385 = llvm.bitcast %221 : !llvm.ptr<i8, 3> to !llvm.ptr<f16, 3> loc(#loc4)
    %386 = llvm.mul %37, %41  : i32 loc(#loc4)
    %387 = llvm.add %386, %37  : i32 loc(#loc4)
    %388 = llvm.mul %37, %40  : i32 loc(#loc4)
    %389 = llvm.add %387, %388  : i32 loc(#loc4)
    %390 = llvm.getelementptr %385[%389] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %391 = llvm.udiv %186, %40  : i32 loc(#loc4)
    %392 = llvm.urem %391, %35  : i32 loc(#loc4)
    %393 = llvm.mul %186, %41  : i32 loc(#loc4)
    %394 = llvm.udiv %187, %39  : i32 loc(#loc4)
    %395 = llvm.xor %394, %392  : i32 loc(#loc4)
    %396 = llvm.mul %395, %39  : i32 loc(#loc4)
    %397 = llvm.urem %187, %39  : i32 loc(#loc4)
    %398 = llvm.udiv %397, %39  : i32 loc(#loc4)
    %399 = llvm.mul %398, %39  : i32 loc(#loc4)
    %400 = llvm.add %396, %399  : i32 loc(#loc4)
    %401 = llvm.mul %400, %40  : i32 loc(#loc4)
    %402 = llvm.add %393, %401  : i32 loc(#loc4)
    %403 = llvm.add %402, %37  : i32 loc(#loc4)
    %404 = llvm.getelementptr %390[%403] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %405 = llvm.mul %37, %41  : i32 loc(#loc4)
    %406 = llvm.add %405, %37  : i32 loc(#loc4)
    %407 = llvm.getelementptr %404[%406] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %408 = llvm.udiv %188, %40  : i32 loc(#loc4)
    %409 = llvm.urem %408, %35  : i32 loc(#loc4)
    %410 = llvm.mul %186, %41  : i32 loc(#loc4)
    %411 = llvm.udiv %189, %39  : i32 loc(#loc4)
    %412 = llvm.xor %411, %409  : i32 loc(#loc4)
    %413 = llvm.mul %412, %39  : i32 loc(#loc4)
    %414 = llvm.urem %189, %39  : i32 loc(#loc4)
    %415 = llvm.udiv %414, %39  : i32 loc(#loc4)
    %416 = llvm.mul %415, %39  : i32 loc(#loc4)
    %417 = llvm.add %413, %416  : i32 loc(#loc4)
    %418 = llvm.mul %417, %40  : i32 loc(#loc4)
    %419 = llvm.add %410, %418  : i32 loc(#loc4)
    %420 = llvm.add %419, %37  : i32 loc(#loc4)
    %421 = llvm.getelementptr %390[%420] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %422 = llvm.mul %37, %41  : i32 loc(#loc4)
    %423 = llvm.add %422, %37  : i32 loc(#loc4)
    %424 = llvm.getelementptr %421[%423] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %425 = llvm.udiv %190, %40  : i32 loc(#loc4)
    %426 = llvm.urem %425, %35  : i32 loc(#loc4)
    %427 = llvm.mul %186, %41  : i32 loc(#loc4)
    %428 = llvm.udiv %187, %39  : i32 loc(#loc4)
    %429 = llvm.xor %428, %426  : i32 loc(#loc4)
    %430 = llvm.mul %429, %39  : i32 loc(#loc4)
    %431 = llvm.urem %187, %39  : i32 loc(#loc4)
    %432 = llvm.udiv %431, %39  : i32 loc(#loc4)
    %433 = llvm.mul %432, %39  : i32 loc(#loc4)
    %434 = llvm.add %430, %433  : i32 loc(#loc4)
    %435 = llvm.mul %434, %40  : i32 loc(#loc4)
    %436 = llvm.add %427, %435  : i32 loc(#loc4)
    %437 = llvm.add %436, %37  : i32 loc(#loc4)
    %438 = llvm.getelementptr %390[%437] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %439 = llvm.mul %36, %41  : i32 loc(#loc4)
    %440 = llvm.add %439, %37  : i32 loc(#loc4)
    %441 = llvm.getelementptr %438[%440] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %442 = llvm.udiv %191, %40  : i32 loc(#loc4)
    %443 = llvm.urem %442, %35  : i32 loc(#loc4)
    %444 = llvm.mul %186, %41  : i32 loc(#loc4)
    %445 = llvm.udiv %189, %39  : i32 loc(#loc4)
    %446 = llvm.xor %445, %443  : i32 loc(#loc4)
    %447 = llvm.mul %446, %39  : i32 loc(#loc4)
    %448 = llvm.urem %189, %39  : i32 loc(#loc4)
    %449 = llvm.udiv %448, %39  : i32 loc(#loc4)
    %450 = llvm.mul %449, %39  : i32 loc(#loc4)
    %451 = llvm.add %447, %450  : i32 loc(#loc4)
    %452 = llvm.mul %451, %40  : i32 loc(#loc4)
    %453 = llvm.add %444, %452  : i32 loc(#loc4)
    %454 = llvm.add %453, %37  : i32 loc(#loc4)
    %455 = llvm.getelementptr %390[%454] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %456 = llvm.mul %36, %41  : i32 loc(#loc4)
    %457 = llvm.add %456, %37  : i32 loc(#loc4)
    %458 = llvm.getelementptr %455[%457] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %459 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %460 = llvm.insertelement %348, %459[%37 : i32] : vector<4xf16> loc(#loc4)
    %461 = llvm.insertelement %349, %460[%40 : i32] : vector<4xf16> loc(#loc4)
    %462 = llvm.insertelement %353, %461[%34 : i32] : vector<4xf16> loc(#loc4)
    %463 = llvm.insertelement %354, %462[%33 : i32] : vector<4xf16> loc(#loc4)
    %464 = llvm.bitcast %407 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %463, %464 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %465 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %466 = llvm.insertelement %358, %465[%37 : i32] : vector<4xf16> loc(#loc4)
    %467 = llvm.insertelement %359, %466[%40 : i32] : vector<4xf16> loc(#loc4)
    %468 = llvm.insertelement %363, %467[%34 : i32] : vector<4xf16> loc(#loc4)
    %469 = llvm.insertelement %364, %468[%33 : i32] : vector<4xf16> loc(#loc4)
    %470 = llvm.bitcast %424 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %469, %470 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %471 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %472 = llvm.insertelement %368, %471[%37 : i32] : vector<4xf16> loc(#loc4)
    %473 = llvm.insertelement %369, %472[%40 : i32] : vector<4xf16> loc(#loc4)
    %474 = llvm.insertelement %373, %473[%34 : i32] : vector<4xf16> loc(#loc4)
    %475 = llvm.insertelement %374, %474[%33 : i32] : vector<4xf16> loc(#loc4)
    %476 = llvm.bitcast %441 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %475, %476 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %477 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %478 = llvm.insertelement %378, %477[%37 : i32] : vector<4xf16> loc(#loc4)
    %479 = llvm.insertelement %379, %478[%40 : i32] : vector<4xf16> loc(#loc4)
    %480 = llvm.insertelement %383, %479[%34 : i32] : vector<4xf16> loc(#loc4)
    %481 = llvm.insertelement %384, %480[%33 : i32] : vector<4xf16> loc(#loc4)
    %482 = llvm.bitcast %458 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %481, %482 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    rocdl.barrier loc(#loc4)
    %483 = rocdl.workitem.id.x : i32 loc(#loc4)
    %484 = llvm.udiv %483, %41  : i32 loc(#loc4)
    %485 = llvm.urem %483, %41  : i32 loc(#loc4)
    %486 = llvm.urem %484, %34  : i32 loc(#loc4)
    %487 = llvm.urem %486, %34  : i32 loc(#loc4)
    %488 = llvm.mul %487, %36  : i32 loc(#loc4)
    %489 = llvm.urem %485, %36  : i32 loc(#loc4)
    %490 = llvm.icmp "uge" %485, %36 : i32 loc(#loc4)
    %491 = llvm.select %490, %39, %37 : i1, i32 loc(#loc4)
    %492 = llvm.add %488, %37  : i32 loc(#loc4)
    %493 = llvm.add %492, %37  : i32 loc(#loc4)
    %494 = llvm.add %493, %489  : i32 loc(#loc4)
    %495 = llvm.add %494, %37  : i32 loc(#loc4)
    %496 = llvm.add %37, %37  : i32 loc(#loc4)
    %497 = llvm.add %496, %37  : i32 loc(#loc4)
    %498 = llvm.add %497, %491  : i32 loc(#loc4)
    %499 = llvm.add %498, %37  : i32 loc(#loc4)
    %500 = llvm.add %495, %37  : i32 loc(#loc4)
    %501 = llvm.add %499, %37  : i32 loc(#loc4)
    %502 = llvm.urem %485, %36  : i32 loc(#loc4)
    %503 = llvm.icmp "uge" %485, %36 : i32 loc(#loc4)
    %504 = llvm.select %503, %39, %37 : i1, i32 loc(#loc4)
    %505 = llvm.add %488, %37  : i32 loc(#loc4)
    %506 = llvm.add %505, %37  : i32 loc(#loc4)
    %507 = llvm.add %506, %502  : i32 loc(#loc4)
    %508 = llvm.add %507, %37  : i32 loc(#loc4)
    %509 = llvm.add %37, %37  : i32 loc(#loc4)
    %510 = llvm.add %509, %38  : i32 loc(#loc4)
    %511 = llvm.add %510, %504  : i32 loc(#loc4)
    %512 = llvm.add %511, %37  : i32 loc(#loc4)
    %513 = llvm.add %508, %37  : i32 loc(#loc4)
    %514 = llvm.add %512, %37  : i32 loc(#loc4)
    %515 = llvm.urem %485, %36  : i32 loc(#loc4)
    %516 = llvm.icmp "uge" %485, %36 : i32 loc(#loc4)
    %517 = llvm.select %516, %39, %37 : i1, i32 loc(#loc4)
    %518 = llvm.add %488, %37  : i32 loc(#loc4)
    %519 = llvm.add %518, %37  : i32 loc(#loc4)
    %520 = llvm.add %519, %515  : i32 loc(#loc4)
    %521 = llvm.add %520, %37  : i32 loc(#loc4)
    %522 = llvm.add %37, %37  : i32 loc(#loc4)
    %523 = llvm.add %522, %35  : i32 loc(#loc4)
    %524 = llvm.add %523, %517  : i32 loc(#loc4)
    %525 = llvm.add %524, %37  : i32 loc(#loc4)
    %526 = llvm.add %521, %37  : i32 loc(#loc4)
    %527 = llvm.add %525, %37  : i32 loc(#loc4)
    %528 = llvm.urem %485, %36  : i32 loc(#loc4)
    %529 = llvm.icmp "uge" %485, %36 : i32 loc(#loc4)
    %530 = llvm.select %529, %39, %37 : i1, i32 loc(#loc4)
    %531 = llvm.add %488, %37  : i32 loc(#loc4)
    %532 = llvm.add %531, %37  : i32 loc(#loc4)
    %533 = llvm.add %532, %528  : i32 loc(#loc4)
    %534 = llvm.add %533, %37  : i32 loc(#loc4)
    %535 = llvm.add %37, %37  : i32 loc(#loc4)
    %536 = llvm.add %535, %26  : i32 loc(#loc4)
    %537 = llvm.add %536, %530  : i32 loc(#loc4)
    %538 = llvm.add %537, %37  : i32 loc(#loc4)
    %539 = llvm.add %534, %37  : i32 loc(#loc4)
    %540 = llvm.add %538, %37  : i32 loc(#loc4)
    %541 = llvm.urem %485, %36  : i32 loc(#loc4)
    %542 = llvm.icmp "uge" %485, %36 : i32 loc(#loc4)
    %543 = llvm.select %542, %39, %37 : i1, i32 loc(#loc4)
    %544 = llvm.add %488, %37  : i32 loc(#loc4)
    %545 = llvm.add %544, %37  : i32 loc(#loc4)
    %546 = llvm.add %545, %541  : i32 loc(#loc4)
    %547 = llvm.add %546, %37  : i32 loc(#loc4)
    %548 = llvm.add %37, %37  : i32 loc(#loc4)
    %549 = llvm.add %548, %36  : i32 loc(#loc4)
    %550 = llvm.add %549, %543  : i32 loc(#loc4)
    %551 = llvm.add %550, %37  : i32 loc(#loc4)
    %552 = llvm.add %547, %37  : i32 loc(#loc4)
    %553 = llvm.add %551, %37  : i32 loc(#loc4)
    %554 = llvm.urem %485, %36  : i32 loc(#loc4)
    %555 = llvm.icmp "uge" %485, %36 : i32 loc(#loc4)
    %556 = llvm.select %555, %39, %37 : i1, i32 loc(#loc4)
    %557 = llvm.add %488, %37  : i32 loc(#loc4)
    %558 = llvm.add %557, %37  : i32 loc(#loc4)
    %559 = llvm.add %558, %554  : i32 loc(#loc4)
    %560 = llvm.add %559, %37  : i32 loc(#loc4)
    %561 = llvm.add %37, %37  : i32 loc(#loc4)
    %562 = llvm.add %561, %14  : i32 loc(#loc4)
    %563 = llvm.add %562, %556  : i32 loc(#loc4)
    %564 = llvm.add %563, %37  : i32 loc(#loc4)
    %565 = llvm.add %560, %37  : i32 loc(#loc4)
    %566 = llvm.add %564, %37  : i32 loc(#loc4)
    %567 = llvm.urem %485, %36  : i32 loc(#loc4)
    %568 = llvm.icmp "uge" %485, %36 : i32 loc(#loc4)
    %569 = llvm.select %568, %39, %37 : i1, i32 loc(#loc4)
    %570 = llvm.add %488, %37  : i32 loc(#loc4)
    %571 = llvm.add %570, %37  : i32 loc(#loc4)
    %572 = llvm.add %571, %567  : i32 loc(#loc4)
    %573 = llvm.add %572, %37  : i32 loc(#loc4)
    %574 = llvm.add %37, %37  : i32 loc(#loc4)
    %575 = llvm.add %574, %13  : i32 loc(#loc4)
    %576 = llvm.add %575, %569  : i32 loc(#loc4)
    %577 = llvm.add %576, %37  : i32 loc(#loc4)
    %578 = llvm.add %573, %37  : i32 loc(#loc4)
    %579 = llvm.add %577, %37  : i32 loc(#loc4)
    %580 = llvm.urem %485, %36  : i32 loc(#loc4)
    %581 = llvm.icmp "uge" %485, %36 : i32 loc(#loc4)
    %582 = llvm.select %581, %39, %37 : i1, i32 loc(#loc4)
    %583 = llvm.add %488, %37  : i32 loc(#loc4)
    %584 = llvm.add %583, %37  : i32 loc(#loc4)
    %585 = llvm.add %584, %580  : i32 loc(#loc4)
    %586 = llvm.add %585, %37  : i32 loc(#loc4)
    %587 = llvm.add %37, %37  : i32 loc(#loc4)
    %588 = llvm.add %587, %12  : i32 loc(#loc4)
    %589 = llvm.add %588, %582  : i32 loc(#loc4)
    %590 = llvm.add %589, %37  : i32 loc(#loc4)
    %591 = llvm.add %586, %37  : i32 loc(#loc4)
    %592 = llvm.add %590, %37  : i32 loc(#loc4)
    %593 = llvm.udiv %500, %40  : i32 loc(#loc4)
    %594 = llvm.urem %593, %35  : i32 loc(#loc4)
    %595 = llvm.udiv %501, %39  : i32 loc(#loc4)
    %596 = llvm.xor %595, %594  : i32 loc(#loc4)
    %597 = llvm.mul %596, %39  : i32 loc(#loc4)
    %598 = llvm.urem %501, %39  : i32 loc(#loc4)
    %599 = llvm.add %597, %598  : i32 loc(#loc4)
    %600 = llvm.mul %500, %41  : i32 loc(#loc4)
    %601 = llvm.mul %599, %40  : i32 loc(#loc4)
    %602 = llvm.add %600, %601  : i32 loc(#loc4)
    %603 = llvm.udiv %513, %40  : i32 loc(#loc4)
    %604 = llvm.urem %603, %35  : i32 loc(#loc4)
    %605 = llvm.udiv %514, %39  : i32 loc(#loc4)
    %606 = llvm.xor %605, %604  : i32 loc(#loc4)
    %607 = llvm.mul %606, %39  : i32 loc(#loc4)
    %608 = llvm.urem %514, %39  : i32 loc(#loc4)
    %609 = llvm.add %607, %608  : i32 loc(#loc4)
    %610 = llvm.mul %513, %41  : i32 loc(#loc4)
    %611 = llvm.mul %609, %40  : i32 loc(#loc4)
    %612 = llvm.add %610, %611  : i32 loc(#loc4)
    %613 = llvm.udiv %526, %40  : i32 loc(#loc4)
    %614 = llvm.urem %613, %35  : i32 loc(#loc4)
    %615 = llvm.udiv %527, %39  : i32 loc(#loc4)
    %616 = llvm.xor %615, %614  : i32 loc(#loc4)
    %617 = llvm.mul %616, %39  : i32 loc(#loc4)
    %618 = llvm.urem %527, %39  : i32 loc(#loc4)
    %619 = llvm.add %617, %618  : i32 loc(#loc4)
    %620 = llvm.mul %526, %41  : i32 loc(#loc4)
    %621 = llvm.mul %619, %40  : i32 loc(#loc4)
    %622 = llvm.add %620, %621  : i32 loc(#loc4)
    %623 = llvm.udiv %539, %40  : i32 loc(#loc4)
    %624 = llvm.urem %623, %35  : i32 loc(#loc4)
    %625 = llvm.udiv %540, %39  : i32 loc(#loc4)
    %626 = llvm.xor %625, %624  : i32 loc(#loc4)
    %627 = llvm.mul %626, %39  : i32 loc(#loc4)
    %628 = llvm.urem %540, %39  : i32 loc(#loc4)
    %629 = llvm.add %627, %628  : i32 loc(#loc4)
    %630 = llvm.mul %539, %41  : i32 loc(#loc4)
    %631 = llvm.mul %629, %40  : i32 loc(#loc4)
    %632 = llvm.add %630, %631  : i32 loc(#loc4)
    %633 = llvm.udiv %552, %40  : i32 loc(#loc4)
    %634 = llvm.urem %633, %35  : i32 loc(#loc4)
    %635 = llvm.udiv %553, %39  : i32 loc(#loc4)
    %636 = llvm.xor %635, %634  : i32 loc(#loc4)
    %637 = llvm.mul %636, %39  : i32 loc(#loc4)
    %638 = llvm.urem %553, %39  : i32 loc(#loc4)
    %639 = llvm.add %637, %638  : i32 loc(#loc4)
    %640 = llvm.mul %552, %41  : i32 loc(#loc4)
    %641 = llvm.mul %639, %40  : i32 loc(#loc4)
    %642 = llvm.add %640, %641  : i32 loc(#loc4)
    %643 = llvm.udiv %565, %40  : i32 loc(#loc4)
    %644 = llvm.urem %643, %35  : i32 loc(#loc4)
    %645 = llvm.udiv %566, %39  : i32 loc(#loc4)
    %646 = llvm.xor %645, %644  : i32 loc(#loc4)
    %647 = llvm.mul %646, %39  : i32 loc(#loc4)
    %648 = llvm.urem %566, %39  : i32 loc(#loc4)
    %649 = llvm.add %647, %648  : i32 loc(#loc4)
    %650 = llvm.mul %565, %41  : i32 loc(#loc4)
    %651 = llvm.mul %649, %40  : i32 loc(#loc4)
    %652 = llvm.add %650, %651  : i32 loc(#loc4)
    %653 = llvm.udiv %578, %40  : i32 loc(#loc4)
    %654 = llvm.urem %653, %35  : i32 loc(#loc4)
    %655 = llvm.udiv %579, %39  : i32 loc(#loc4)
    %656 = llvm.xor %655, %654  : i32 loc(#loc4)
    %657 = llvm.mul %656, %39  : i32 loc(#loc4)
    %658 = llvm.urem %579, %39  : i32 loc(#loc4)
    %659 = llvm.add %657, %658  : i32 loc(#loc4)
    %660 = llvm.mul %578, %41  : i32 loc(#loc4)
    %661 = llvm.mul %659, %40  : i32 loc(#loc4)
    %662 = llvm.add %660, %661  : i32 loc(#loc4)
    %663 = llvm.udiv %591, %40  : i32 loc(#loc4)
    %664 = llvm.urem %663, %35  : i32 loc(#loc4)
    %665 = llvm.udiv %592, %39  : i32 loc(#loc4)
    %666 = llvm.xor %665, %664  : i32 loc(#loc4)
    %667 = llvm.mul %666, %39  : i32 loc(#loc4)
    %668 = llvm.urem %592, %39  : i32 loc(#loc4)
    %669 = llvm.add %667, %668  : i32 loc(#loc4)
    %670 = llvm.mul %591, %41  : i32 loc(#loc4)
    %671 = llvm.mul %669, %40  : i32 loc(#loc4)
    %672 = llvm.add %670, %671  : i32 loc(#loc4)
    %673 = llvm.mul %37, %41  : i32 loc(#loc4)
    %674 = llvm.sub %37, %673  : i32 loc(#loc4)
    %675 = llvm.getelementptr %385[%674] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %676 = llvm.mul %37, %40  : i32 loc(#loc4)
    %677 = llvm.sub %37, %676  : i32 loc(#loc4)
    %678 = llvm.getelementptr %675[%677] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %679 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %680 = llvm.getelementptr %678[%602] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %681 = llvm.bitcast %680 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %682 = llvm.load %681 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %683 = llvm.extractelement %682[%37 : i32] : vector<4xf16> loc(#loc4)
    %684 = llvm.insertelement %683, %679[%37 : i32] : vector<4xf16> loc(#loc4)
    %685 = llvm.extractelement %682[%40 : i32] : vector<4xf16> loc(#loc4)
    %686 = llvm.insertelement %685, %684[%40 : i32] : vector<4xf16> loc(#loc4)
    %687 = llvm.extractelement %682[%34 : i32] : vector<4xf16> loc(#loc4)
    %688 = llvm.insertelement %687, %686[%34 : i32] : vector<4xf16> loc(#loc4)
    %689 = llvm.extractelement %682[%33 : i32] : vector<4xf16> loc(#loc4)
    %690 = llvm.insertelement %689, %688[%33 : i32] : vector<4xf16> loc(#loc4)
    %691 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %692 = llvm.getelementptr %678[%612] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %693 = llvm.bitcast %692 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %694 = llvm.load %693 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %695 = llvm.extractelement %694[%37 : i32] : vector<4xf16> loc(#loc4)
    %696 = llvm.insertelement %695, %691[%37 : i32] : vector<4xf16> loc(#loc4)
    %697 = llvm.extractelement %694[%40 : i32] : vector<4xf16> loc(#loc4)
    %698 = llvm.insertelement %697, %696[%40 : i32] : vector<4xf16> loc(#loc4)
    %699 = llvm.extractelement %694[%34 : i32] : vector<4xf16> loc(#loc4)
    %700 = llvm.insertelement %699, %698[%34 : i32] : vector<4xf16> loc(#loc4)
    %701 = llvm.extractelement %694[%33 : i32] : vector<4xf16> loc(#loc4)
    %702 = llvm.insertelement %701, %700[%33 : i32] : vector<4xf16> loc(#loc4)
    %703 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %704 = llvm.getelementptr %678[%622] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %705 = llvm.bitcast %704 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %706 = llvm.load %705 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %707 = llvm.extractelement %706[%37 : i32] : vector<4xf16> loc(#loc4)
    %708 = llvm.insertelement %707, %703[%37 : i32] : vector<4xf16> loc(#loc4)
    %709 = llvm.extractelement %706[%40 : i32] : vector<4xf16> loc(#loc4)
    %710 = llvm.insertelement %709, %708[%40 : i32] : vector<4xf16> loc(#loc4)
    %711 = llvm.extractelement %706[%34 : i32] : vector<4xf16> loc(#loc4)
    %712 = llvm.insertelement %711, %710[%34 : i32] : vector<4xf16> loc(#loc4)
    %713 = llvm.extractelement %706[%33 : i32] : vector<4xf16> loc(#loc4)
    %714 = llvm.insertelement %713, %712[%33 : i32] : vector<4xf16> loc(#loc4)
    %715 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %716 = llvm.getelementptr %678[%632] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %717 = llvm.bitcast %716 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %718 = llvm.load %717 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %719 = llvm.extractelement %718[%37 : i32] : vector<4xf16> loc(#loc4)
    %720 = llvm.insertelement %719, %715[%37 : i32] : vector<4xf16> loc(#loc4)
    %721 = llvm.extractelement %718[%40 : i32] : vector<4xf16> loc(#loc4)
    %722 = llvm.insertelement %721, %720[%40 : i32] : vector<4xf16> loc(#loc4)
    %723 = llvm.extractelement %718[%34 : i32] : vector<4xf16> loc(#loc4)
    %724 = llvm.insertelement %723, %722[%34 : i32] : vector<4xf16> loc(#loc4)
    %725 = llvm.extractelement %718[%33 : i32] : vector<4xf16> loc(#loc4)
    %726 = llvm.insertelement %725, %724[%33 : i32] : vector<4xf16> loc(#loc4)
    %727 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %728 = llvm.getelementptr %678[%642] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %729 = llvm.bitcast %728 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %730 = llvm.load %729 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %731 = llvm.extractelement %730[%37 : i32] : vector<4xf16> loc(#loc4)
    %732 = llvm.insertelement %731, %727[%37 : i32] : vector<4xf16> loc(#loc4)
    %733 = llvm.extractelement %730[%40 : i32] : vector<4xf16> loc(#loc4)
    %734 = llvm.insertelement %733, %732[%40 : i32] : vector<4xf16> loc(#loc4)
    %735 = llvm.extractelement %730[%34 : i32] : vector<4xf16> loc(#loc4)
    %736 = llvm.insertelement %735, %734[%34 : i32] : vector<4xf16> loc(#loc4)
    %737 = llvm.extractelement %730[%33 : i32] : vector<4xf16> loc(#loc4)
    %738 = llvm.insertelement %737, %736[%33 : i32] : vector<4xf16> loc(#loc4)
    %739 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %740 = llvm.getelementptr %678[%652] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %741 = llvm.bitcast %740 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %742 = llvm.load %741 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %743 = llvm.extractelement %742[%37 : i32] : vector<4xf16> loc(#loc4)
    %744 = llvm.insertelement %743, %739[%37 : i32] : vector<4xf16> loc(#loc4)
    %745 = llvm.extractelement %742[%40 : i32] : vector<4xf16> loc(#loc4)
    %746 = llvm.insertelement %745, %744[%40 : i32] : vector<4xf16> loc(#loc4)
    %747 = llvm.extractelement %742[%34 : i32] : vector<4xf16> loc(#loc4)
    %748 = llvm.insertelement %747, %746[%34 : i32] : vector<4xf16> loc(#loc4)
    %749 = llvm.extractelement %742[%33 : i32] : vector<4xf16> loc(#loc4)
    %750 = llvm.insertelement %749, %748[%33 : i32] : vector<4xf16> loc(#loc4)
    %751 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %752 = llvm.getelementptr %678[%662] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %753 = llvm.bitcast %752 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %754 = llvm.load %753 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %755 = llvm.extractelement %754[%37 : i32] : vector<4xf16> loc(#loc4)
    %756 = llvm.insertelement %755, %751[%37 : i32] : vector<4xf16> loc(#loc4)
    %757 = llvm.extractelement %754[%40 : i32] : vector<4xf16> loc(#loc4)
    %758 = llvm.insertelement %757, %756[%40 : i32] : vector<4xf16> loc(#loc4)
    %759 = llvm.extractelement %754[%34 : i32] : vector<4xf16> loc(#loc4)
    %760 = llvm.insertelement %759, %758[%34 : i32] : vector<4xf16> loc(#loc4)
    %761 = llvm.extractelement %754[%33 : i32] : vector<4xf16> loc(#loc4)
    %762 = llvm.insertelement %761, %760[%33 : i32] : vector<4xf16> loc(#loc4)
    %763 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %764 = llvm.getelementptr %678[%672] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %765 = llvm.bitcast %764 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %766 = llvm.load %765 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %767 = llvm.extractelement %766[%37 : i32] : vector<4xf16> loc(#loc4)
    %768 = llvm.insertelement %767, %763[%37 : i32] : vector<4xf16> loc(#loc4)
    %769 = llvm.extractelement %766[%40 : i32] : vector<4xf16> loc(#loc4)
    %770 = llvm.insertelement %769, %768[%40 : i32] : vector<4xf16> loc(#loc4)
    %771 = llvm.extractelement %766[%34 : i32] : vector<4xf16> loc(#loc4)
    %772 = llvm.insertelement %771, %770[%34 : i32] : vector<4xf16> loc(#loc4)
    %773 = llvm.extractelement %766[%33 : i32] : vector<4xf16> loc(#loc4)
    %774 = llvm.insertelement %773, %772[%33 : i32] : vector<4xf16> loc(#loc4)
    %775 = llvm.extractvalue %335[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %776 = llvm.extractvalue %335[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %777 = llvm.extractvalue %335[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %778 = llvm.extractvalue %335[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %779 = llvm.addrspacecast %775 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %780 = llvm.load %779 : !llvm.ptr<i32> loc(#loc3)
    %781 = llvm.bitcast %780 : i32 to vector<2xf16> loc(#loc3)
    %782 = llvm.extractelement %781[%17 : i32] : vector<2xf16> loc(#loc3)
    %783 = llvm.extractelement %781[%15 : i32] : vector<2xf16> loc(#loc3)
    %784 = llvm.addrspacecast %776 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %785 = llvm.load %784 : !llvm.ptr<i32> loc(#loc3)
    %786 = llvm.bitcast %785 : i32 to vector<2xf16> loc(#loc3)
    %787 = llvm.extractelement %786[%17 : i32] : vector<2xf16> loc(#loc3)
    %788 = llvm.extractelement %786[%15 : i32] : vector<2xf16> loc(#loc3)
    %789 = llvm.addrspacecast %777 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %790 = llvm.load %789 : !llvm.ptr<i32> loc(#loc3)
    %791 = llvm.bitcast %790 : i32 to vector<2xf16> loc(#loc3)
    %792 = llvm.extractelement %791[%17 : i32] : vector<2xf16> loc(#loc3)
    %793 = llvm.extractelement %791[%15 : i32] : vector<2xf16> loc(#loc3)
    %794 = llvm.addrspacecast %778 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %795 = llvm.load %794 : !llvm.ptr<i32> loc(#loc3)
    %796 = llvm.bitcast %795 : i32 to vector<2xf16> loc(#loc3)
    %797 = llvm.extractelement %796[%17 : i32] : vector<2xf16> loc(#loc3)
    %798 = llvm.extractelement %796[%15 : i32] : vector<2xf16> loc(#loc3)
    rocdl.barrier loc(#loc3)
    %799 = llvm.bitcast %221 : !llvm.ptr<i8, 3> to !llvm.ptr<f16, 3> loc(#loc3)
    %800 = llvm.mul %37, %36  : i32 loc(#loc3)
    %801 = llvm.add %800, %37  : i32 loc(#loc3)
    %802 = llvm.mul %37, %40  : i32 loc(#loc3)
    %803 = llvm.add %801, %802  : i32 loc(#loc3)
    %804 = llvm.getelementptr %799[%803] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %805 = llvm.udiv %211, %40  : i32 loc(#loc3)
    %806 = llvm.urem %805, %40  : i32 loc(#loc3)
    %807 = llvm.mul %211, %36  : i32 loc(#loc3)
    %808 = llvm.udiv %212, %40  : i32 loc(#loc3)
    %809 = llvm.xor %808, %806  : i32 loc(#loc3)
    %810 = llvm.mul %809, %40  : i32 loc(#loc3)
    %811 = llvm.urem %212, %40  : i32 loc(#loc3)
    %812 = llvm.udiv %811, %40  : i32 loc(#loc3)
    %813 = llvm.mul %812, %40  : i32 loc(#loc3)
    %814 = llvm.add %810, %813  : i32 loc(#loc3)
    %815 = llvm.mul %814, %40  : i32 loc(#loc3)
    %816 = llvm.add %807, %815  : i32 loc(#loc3)
    %817 = llvm.add %816, %37  : i32 loc(#loc3)
    %818 = llvm.getelementptr %804[%817] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %819 = llvm.mul %37, %36  : i32 loc(#loc3)
    %820 = llvm.add %819, %37  : i32 loc(#loc3)
    %821 = llvm.getelementptr %818[%820] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %822 = llvm.udiv %213, %40  : i32 loc(#loc3)
    %823 = llvm.urem %822, %40  : i32 loc(#loc3)
    %824 = llvm.mul %211, %36  : i32 loc(#loc3)
    %825 = llvm.udiv %212, %40  : i32 loc(#loc3)
    %826 = llvm.xor %825, %823  : i32 loc(#loc3)
    %827 = llvm.mul %826, %40  : i32 loc(#loc3)
    %828 = llvm.urem %212, %40  : i32 loc(#loc3)
    %829 = llvm.udiv %828, %40  : i32 loc(#loc3)
    %830 = llvm.mul %829, %40  : i32 loc(#loc3)
    %831 = llvm.add %827, %830  : i32 loc(#loc3)
    %832 = llvm.mul %831, %40  : i32 loc(#loc3)
    %833 = llvm.add %824, %832  : i32 loc(#loc3)
    %834 = llvm.add %833, %37  : i32 loc(#loc3)
    %835 = llvm.getelementptr %804[%834] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %836 = llvm.mul %37, %36  : i32 loc(#loc3)
    %837 = llvm.add %836, %40  : i32 loc(#loc3)
    %838 = llvm.getelementptr %835[%837] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %839 = llvm.udiv %214, %40  : i32 loc(#loc3)
    %840 = llvm.urem %839, %40  : i32 loc(#loc3)
    %841 = llvm.mul %211, %36  : i32 loc(#loc3)
    %842 = llvm.udiv %212, %40  : i32 loc(#loc3)
    %843 = llvm.xor %842, %840  : i32 loc(#loc3)
    %844 = llvm.mul %843, %40  : i32 loc(#loc3)
    %845 = llvm.urem %212, %40  : i32 loc(#loc3)
    %846 = llvm.udiv %845, %40  : i32 loc(#loc3)
    %847 = llvm.mul %846, %40  : i32 loc(#loc3)
    %848 = llvm.add %844, %847  : i32 loc(#loc3)
    %849 = llvm.mul %848, %40  : i32 loc(#loc3)
    %850 = llvm.add %841, %849  : i32 loc(#loc3)
    %851 = llvm.add %850, %37  : i32 loc(#loc3)
    %852 = llvm.getelementptr %804[%851] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %853 = llvm.mul %37, %36  : i32 loc(#loc3)
    %854 = llvm.add %853, %34  : i32 loc(#loc3)
    %855 = llvm.getelementptr %852[%854] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %856 = llvm.udiv %215, %40  : i32 loc(#loc3)
    %857 = llvm.urem %856, %40  : i32 loc(#loc3)
    %858 = llvm.mul %211, %36  : i32 loc(#loc3)
    %859 = llvm.udiv %212, %40  : i32 loc(#loc3)
    %860 = llvm.xor %859, %857  : i32 loc(#loc3)
    %861 = llvm.mul %860, %40  : i32 loc(#loc3)
    %862 = llvm.urem %212, %40  : i32 loc(#loc3)
    %863 = llvm.udiv %862, %40  : i32 loc(#loc3)
    %864 = llvm.mul %863, %40  : i32 loc(#loc3)
    %865 = llvm.add %861, %864  : i32 loc(#loc3)
    %866 = llvm.mul %865, %40  : i32 loc(#loc3)
    %867 = llvm.add %858, %866  : i32 loc(#loc3)
    %868 = llvm.add %867, %37  : i32 loc(#loc3)
    %869 = llvm.getelementptr %804[%868] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %870 = llvm.mul %37, %36  : i32 loc(#loc3)
    %871 = llvm.add %870, %33  : i32 loc(#loc3)
    %872 = llvm.getelementptr %869[%871] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %873 = llvm.udiv %216, %40  : i32 loc(#loc3)
    %874 = llvm.urem %873, %40  : i32 loc(#loc3)
    %875 = llvm.mul %211, %36  : i32 loc(#loc3)
    %876 = llvm.udiv %212, %40  : i32 loc(#loc3)
    %877 = llvm.xor %876, %874  : i32 loc(#loc3)
    %878 = llvm.mul %877, %40  : i32 loc(#loc3)
    %879 = llvm.urem %212, %40  : i32 loc(#loc3)
    %880 = llvm.udiv %879, %40  : i32 loc(#loc3)
    %881 = llvm.mul %880, %40  : i32 loc(#loc3)
    %882 = llvm.add %878, %881  : i32 loc(#loc3)
    %883 = llvm.mul %882, %40  : i32 loc(#loc3)
    %884 = llvm.add %875, %883  : i32 loc(#loc3)
    %885 = llvm.add %884, %37  : i32 loc(#loc3)
    %886 = llvm.getelementptr %804[%885] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %887 = llvm.mul %37, %36  : i32 loc(#loc3)
    %888 = llvm.add %887, %39  : i32 loc(#loc3)
    %889 = llvm.getelementptr %886[%888] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %890 = llvm.udiv %217, %40  : i32 loc(#loc3)
    %891 = llvm.urem %890, %40  : i32 loc(#loc3)
    %892 = llvm.mul %211, %36  : i32 loc(#loc3)
    %893 = llvm.udiv %212, %40  : i32 loc(#loc3)
    %894 = llvm.xor %893, %891  : i32 loc(#loc3)
    %895 = llvm.mul %894, %40  : i32 loc(#loc3)
    %896 = llvm.urem %212, %40  : i32 loc(#loc3)
    %897 = llvm.udiv %896, %40  : i32 loc(#loc3)
    %898 = llvm.mul %897, %40  : i32 loc(#loc3)
    %899 = llvm.add %895, %898  : i32 loc(#loc3)
    %900 = llvm.mul %899, %40  : i32 loc(#loc3)
    %901 = llvm.add %892, %900  : i32 loc(#loc3)
    %902 = llvm.add %901, %37  : i32 loc(#loc3)
    %903 = llvm.getelementptr %804[%902] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %904 = llvm.mul %37, %36  : i32 loc(#loc3)
    %905 = llvm.add %904, %22  : i32 loc(#loc3)
    %906 = llvm.getelementptr %903[%905] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %907 = llvm.udiv %218, %40  : i32 loc(#loc3)
    %908 = llvm.urem %907, %40  : i32 loc(#loc3)
    %909 = llvm.mul %211, %36  : i32 loc(#loc3)
    %910 = llvm.udiv %212, %40  : i32 loc(#loc3)
    %911 = llvm.xor %910, %908  : i32 loc(#loc3)
    %912 = llvm.mul %911, %40  : i32 loc(#loc3)
    %913 = llvm.urem %212, %40  : i32 loc(#loc3)
    %914 = llvm.udiv %913, %40  : i32 loc(#loc3)
    %915 = llvm.mul %914, %40  : i32 loc(#loc3)
    %916 = llvm.add %912, %915  : i32 loc(#loc3)
    %917 = llvm.mul %916, %40  : i32 loc(#loc3)
    %918 = llvm.add %909, %917  : i32 loc(#loc3)
    %919 = llvm.add %918, %37  : i32 loc(#loc3)
    %920 = llvm.getelementptr %804[%919] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %921 = llvm.mul %37, %36  : i32 loc(#loc3)
    %922 = llvm.add %921, %21  : i32 loc(#loc3)
    %923 = llvm.getelementptr %920[%922] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %924 = llvm.udiv %219, %40  : i32 loc(#loc3)
    %925 = llvm.urem %924, %40  : i32 loc(#loc3)
    %926 = llvm.mul %211, %36  : i32 loc(#loc3)
    %927 = llvm.udiv %212, %40  : i32 loc(#loc3)
    %928 = llvm.xor %927, %925  : i32 loc(#loc3)
    %929 = llvm.mul %928, %40  : i32 loc(#loc3)
    %930 = llvm.urem %212, %40  : i32 loc(#loc3)
    %931 = llvm.udiv %930, %40  : i32 loc(#loc3)
    %932 = llvm.mul %931, %40  : i32 loc(#loc3)
    %933 = llvm.add %929, %932  : i32 loc(#loc3)
    %934 = llvm.mul %933, %40  : i32 loc(#loc3)
    %935 = llvm.add %926, %934  : i32 loc(#loc3)
    %936 = llvm.add %935, %37  : i32 loc(#loc3)
    %937 = llvm.getelementptr %804[%936] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %938 = llvm.mul %37, %36  : i32 loc(#loc3)
    %939 = llvm.add %938, %20  : i32 loc(#loc3)
    %940 = llvm.getelementptr %937[%939] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %941 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %942 = llvm.insertelement %782, %941[%37 : i32] : vector<1xf16> loc(#loc3)
    %943 = llvm.bitcast %821 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %942, %943 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %944 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %945 = llvm.insertelement %783, %944[%37 : i32] : vector<1xf16> loc(#loc3)
    %946 = llvm.bitcast %838 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %945, %946 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %947 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %948 = llvm.insertelement %787, %947[%37 : i32] : vector<1xf16> loc(#loc3)
    %949 = llvm.bitcast %855 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %948, %949 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %950 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %951 = llvm.insertelement %788, %950[%37 : i32] : vector<1xf16> loc(#loc3)
    %952 = llvm.bitcast %872 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %951, %952 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %953 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %954 = llvm.insertelement %792, %953[%37 : i32] : vector<1xf16> loc(#loc3)
    %955 = llvm.bitcast %889 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %954, %955 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %956 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %957 = llvm.insertelement %793, %956[%37 : i32] : vector<1xf16> loc(#loc3)
    %958 = llvm.bitcast %906 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %957, %958 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %959 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %960 = llvm.insertelement %797, %959[%37 : i32] : vector<1xf16> loc(#loc3)
    %961 = llvm.bitcast %923 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %960, %961 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %962 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %963 = llvm.insertelement %798, %962[%37 : i32] : vector<1xf16> loc(#loc3)
    %964 = llvm.bitcast %940 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %963, %964 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    rocdl.barrier loc(#loc3)
    %965 = rocdl.workitem.id.x : i32 loc(#loc3)
    %966 = llvm.udiv %965, %41  : i32 loc(#loc3)
    %967 = llvm.urem %965, %41  : i32 loc(#loc3)
    %968 = llvm.udiv %966, %34  : i32 loc(#loc3)
    %969 = llvm.urem %968, %34  : i32 loc(#loc3)
    %970 = llvm.urem %969, %40  : i32 loc(#loc3)
    %971 = llvm.mul %970, %36  : i32 loc(#loc3)
    %972 = llvm.urem %967, %36  : i32 loc(#loc3)
    %973 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %974 = llvm.select %973, %18, %37 : i1, i32 loc(#loc3)
    %975 = llvm.add %974, %37  : i32 loc(#loc3)
    %976 = llvm.add %975, %972  : i32 loc(#loc3)
    %977 = llvm.add %971, %37  : i32 loc(#loc3)
    %978 = llvm.add %977, %37  : i32 loc(#loc3)
    %979 = llvm.add %978, %976  : i32 loc(#loc3)
    %980 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %981 = llvm.select %980, %18, %37 : i1, i32 loc(#loc3)
    %982 = llvm.add %981, %36  : i32 loc(#loc3)
    %983 = llvm.add %982, %972  : i32 loc(#loc3)
    %984 = llvm.add %971, %37  : i32 loc(#loc3)
    %985 = llvm.add %984, %37  : i32 loc(#loc3)
    %986 = llvm.add %985, %983  : i32 loc(#loc3)
    %987 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %988 = llvm.select %987, %18, %37 : i1, i32 loc(#loc3)
    %989 = llvm.add %988, %41  : i32 loc(#loc3)
    %990 = llvm.add %989, %972  : i32 loc(#loc3)
    %991 = llvm.add %971, %37  : i32 loc(#loc3)
    %992 = llvm.add %991, %37  : i32 loc(#loc3)
    %993 = llvm.add %992, %990  : i32 loc(#loc3)
    %994 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %995 = llvm.select %994, %18, %37 : i1, i32 loc(#loc3)
    %996 = llvm.add %995, %11  : i32 loc(#loc3)
    %997 = llvm.add %996, %972  : i32 loc(#loc3)
    %998 = llvm.add %971, %37  : i32 loc(#loc3)
    %999 = llvm.add %998, %37  : i32 loc(#loc3)
    %1000 = llvm.add %999, %997  : i32 loc(#loc3)
    %1001 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1002 = llvm.select %1001, %18, %37 : i1, i32 loc(#loc3)
    %1003 = llvm.add %1002, %37  : i32 loc(#loc3)
    %1004 = llvm.add %1003, %972  : i32 loc(#loc3)
    %1005 = llvm.add %971, %37  : i32 loc(#loc3)
    %1006 = llvm.add %1005, %10  : i32 loc(#loc3)
    %1007 = llvm.add %1006, %1004  : i32 loc(#loc3)
    %1008 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1009 = llvm.select %1008, %18, %37 : i1, i32 loc(#loc3)
    %1010 = llvm.add %1009, %36  : i32 loc(#loc3)
    %1011 = llvm.add %1010, %972  : i32 loc(#loc3)
    %1012 = llvm.add %971, %37  : i32 loc(#loc3)
    %1013 = llvm.add %1012, %10  : i32 loc(#loc3)
    %1014 = llvm.add %1013, %1011  : i32 loc(#loc3)
    %1015 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1016 = llvm.select %1015, %18, %37 : i1, i32 loc(#loc3)
    %1017 = llvm.add %1016, %41  : i32 loc(#loc3)
    %1018 = llvm.add %1017, %972  : i32 loc(#loc3)
    %1019 = llvm.add %971, %37  : i32 loc(#loc3)
    %1020 = llvm.add %1019, %10  : i32 loc(#loc3)
    %1021 = llvm.add %1020, %1018  : i32 loc(#loc3)
    %1022 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1023 = llvm.select %1022, %18, %37 : i1, i32 loc(#loc3)
    %1024 = llvm.add %1023, %11  : i32 loc(#loc3)
    %1025 = llvm.add %1024, %972  : i32 loc(#loc3)
    %1026 = llvm.add %971, %37  : i32 loc(#loc3)
    %1027 = llvm.add %1026, %10  : i32 loc(#loc3)
    %1028 = llvm.add %1027, %1025  : i32 loc(#loc3)
    %1029 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1030 = llvm.select %1029, %18, %37 : i1, i32 loc(#loc3)
    %1031 = llvm.add %1030, %37  : i32 loc(#loc3)
    %1032 = llvm.add %1031, %972  : i32 loc(#loc3)
    %1033 = llvm.add %971, %37  : i32 loc(#loc3)
    %1034 = llvm.add %1033, %9  : i32 loc(#loc3)
    %1035 = llvm.add %1034, %1032  : i32 loc(#loc3)
    %1036 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1037 = llvm.select %1036, %18, %37 : i1, i32 loc(#loc3)
    %1038 = llvm.add %1037, %36  : i32 loc(#loc3)
    %1039 = llvm.add %1038, %972  : i32 loc(#loc3)
    %1040 = llvm.add %971, %37  : i32 loc(#loc3)
    %1041 = llvm.add %1040, %9  : i32 loc(#loc3)
    %1042 = llvm.add %1041, %1039  : i32 loc(#loc3)
    %1043 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1044 = llvm.select %1043, %18, %37 : i1, i32 loc(#loc3)
    %1045 = llvm.add %1044, %41  : i32 loc(#loc3)
    %1046 = llvm.add %1045, %972  : i32 loc(#loc3)
    %1047 = llvm.add %971, %37  : i32 loc(#loc3)
    %1048 = llvm.add %1047, %9  : i32 loc(#loc3)
    %1049 = llvm.add %1048, %1046  : i32 loc(#loc3)
    %1050 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1051 = llvm.select %1050, %18, %37 : i1, i32 loc(#loc3)
    %1052 = llvm.add %1051, %11  : i32 loc(#loc3)
    %1053 = llvm.add %1052, %972  : i32 loc(#loc3)
    %1054 = llvm.add %971, %37  : i32 loc(#loc3)
    %1055 = llvm.add %1054, %9  : i32 loc(#loc3)
    %1056 = llvm.add %1055, %1053  : i32 loc(#loc3)
    %1057 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1058 = llvm.select %1057, %18, %37 : i1, i32 loc(#loc3)
    %1059 = llvm.add %1058, %37  : i32 loc(#loc3)
    %1060 = llvm.add %1059, %972  : i32 loc(#loc3)
    %1061 = llvm.add %971, %37  : i32 loc(#loc3)
    %1062 = llvm.add %1061, %8  : i32 loc(#loc3)
    %1063 = llvm.add %1062, %1060  : i32 loc(#loc3)
    %1064 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1065 = llvm.select %1064, %18, %37 : i1, i32 loc(#loc3)
    %1066 = llvm.add %1065, %36  : i32 loc(#loc3)
    %1067 = llvm.add %1066, %972  : i32 loc(#loc3)
    %1068 = llvm.add %971, %37  : i32 loc(#loc3)
    %1069 = llvm.add %1068, %8  : i32 loc(#loc3)
    %1070 = llvm.add %1069, %1067  : i32 loc(#loc3)
    %1071 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1072 = llvm.select %1071, %18, %37 : i1, i32 loc(#loc3)
    %1073 = llvm.add %1072, %41  : i32 loc(#loc3)
    %1074 = llvm.add %1073, %972  : i32 loc(#loc3)
    %1075 = llvm.add %971, %37  : i32 loc(#loc3)
    %1076 = llvm.add %1075, %8  : i32 loc(#loc3)
    %1077 = llvm.add %1076, %1074  : i32 loc(#loc3)
    %1078 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1079 = llvm.select %1078, %18, %37 : i1, i32 loc(#loc3)
    %1080 = llvm.add %1079, %11  : i32 loc(#loc3)
    %1081 = llvm.add %1080, %972  : i32 loc(#loc3)
    %1082 = llvm.add %971, %37  : i32 loc(#loc3)
    %1083 = llvm.add %1082, %8  : i32 loc(#loc3)
    %1084 = llvm.add %1083, %1081  : i32 loc(#loc3)
    %1085 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1086 = llvm.select %1085, %18, %37 : i1, i32 loc(#loc3)
    %1087 = llvm.add %1086, %37  : i32 loc(#loc3)
    %1088 = llvm.add %1087, %972  : i32 loc(#loc3)
    %1089 = llvm.add %971, %37  : i32 loc(#loc3)
    %1090 = llvm.add %1089, %7  : i32 loc(#loc3)
    %1091 = llvm.add %1090, %1088  : i32 loc(#loc3)
    %1092 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1093 = llvm.select %1092, %18, %37 : i1, i32 loc(#loc3)
    %1094 = llvm.add %1093, %36  : i32 loc(#loc3)
    %1095 = llvm.add %1094, %972  : i32 loc(#loc3)
    %1096 = llvm.add %971, %37  : i32 loc(#loc3)
    %1097 = llvm.add %1096, %7  : i32 loc(#loc3)
    %1098 = llvm.add %1097, %1095  : i32 loc(#loc3)
    %1099 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1100 = llvm.select %1099, %18, %37 : i1, i32 loc(#loc3)
    %1101 = llvm.add %1100, %41  : i32 loc(#loc3)
    %1102 = llvm.add %1101, %972  : i32 loc(#loc3)
    %1103 = llvm.add %971, %37  : i32 loc(#loc3)
    %1104 = llvm.add %1103, %7  : i32 loc(#loc3)
    %1105 = llvm.add %1104, %1102  : i32 loc(#loc3)
    %1106 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1107 = llvm.select %1106, %18, %37 : i1, i32 loc(#loc3)
    %1108 = llvm.add %1107, %11  : i32 loc(#loc3)
    %1109 = llvm.add %1108, %972  : i32 loc(#loc3)
    %1110 = llvm.add %971, %37  : i32 loc(#loc3)
    %1111 = llvm.add %1110, %7  : i32 loc(#loc3)
    %1112 = llvm.add %1111, %1109  : i32 loc(#loc3)
    %1113 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1114 = llvm.select %1113, %18, %37 : i1, i32 loc(#loc3)
    %1115 = llvm.add %1114, %37  : i32 loc(#loc3)
    %1116 = llvm.add %1115, %972  : i32 loc(#loc3)
    %1117 = llvm.add %971, %37  : i32 loc(#loc3)
    %1118 = llvm.add %1117, %6  : i32 loc(#loc3)
    %1119 = llvm.add %1118, %1116  : i32 loc(#loc3)
    %1120 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1121 = llvm.select %1120, %18, %37 : i1, i32 loc(#loc3)
    %1122 = llvm.add %1121, %36  : i32 loc(#loc3)
    %1123 = llvm.add %1122, %972  : i32 loc(#loc3)
    %1124 = llvm.add %971, %37  : i32 loc(#loc3)
    %1125 = llvm.add %1124, %6  : i32 loc(#loc3)
    %1126 = llvm.add %1125, %1123  : i32 loc(#loc3)
    %1127 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1128 = llvm.select %1127, %18, %37 : i1, i32 loc(#loc3)
    %1129 = llvm.add %1128, %41  : i32 loc(#loc3)
    %1130 = llvm.add %1129, %972  : i32 loc(#loc3)
    %1131 = llvm.add %971, %37  : i32 loc(#loc3)
    %1132 = llvm.add %1131, %6  : i32 loc(#loc3)
    %1133 = llvm.add %1132, %1130  : i32 loc(#loc3)
    %1134 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1135 = llvm.select %1134, %18, %37 : i1, i32 loc(#loc3)
    %1136 = llvm.add %1135, %11  : i32 loc(#loc3)
    %1137 = llvm.add %1136, %972  : i32 loc(#loc3)
    %1138 = llvm.add %971, %37  : i32 loc(#loc3)
    %1139 = llvm.add %1138, %6  : i32 loc(#loc3)
    %1140 = llvm.add %1139, %1137  : i32 loc(#loc3)
    %1141 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1142 = llvm.select %1141, %18, %37 : i1, i32 loc(#loc3)
    %1143 = llvm.add %1142, %37  : i32 loc(#loc3)
    %1144 = llvm.add %1143, %972  : i32 loc(#loc3)
    %1145 = llvm.add %971, %37  : i32 loc(#loc3)
    %1146 = llvm.add %1145, %5  : i32 loc(#loc3)
    %1147 = llvm.add %1146, %1144  : i32 loc(#loc3)
    %1148 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1149 = llvm.select %1148, %18, %37 : i1, i32 loc(#loc3)
    %1150 = llvm.add %1149, %36  : i32 loc(#loc3)
    %1151 = llvm.add %1150, %972  : i32 loc(#loc3)
    %1152 = llvm.add %971, %37  : i32 loc(#loc3)
    %1153 = llvm.add %1152, %5  : i32 loc(#loc3)
    %1154 = llvm.add %1153, %1151  : i32 loc(#loc3)
    %1155 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1156 = llvm.select %1155, %18, %37 : i1, i32 loc(#loc3)
    %1157 = llvm.add %1156, %41  : i32 loc(#loc3)
    %1158 = llvm.add %1157, %972  : i32 loc(#loc3)
    %1159 = llvm.add %971, %37  : i32 loc(#loc3)
    %1160 = llvm.add %1159, %5  : i32 loc(#loc3)
    %1161 = llvm.add %1160, %1158  : i32 loc(#loc3)
    %1162 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1163 = llvm.select %1162, %18, %37 : i1, i32 loc(#loc3)
    %1164 = llvm.add %1163, %11  : i32 loc(#loc3)
    %1165 = llvm.add %1164, %972  : i32 loc(#loc3)
    %1166 = llvm.add %971, %37  : i32 loc(#loc3)
    %1167 = llvm.add %1166, %5  : i32 loc(#loc3)
    %1168 = llvm.add %1167, %1165  : i32 loc(#loc3)
    %1169 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1170 = llvm.select %1169, %18, %37 : i1, i32 loc(#loc3)
    %1171 = llvm.add %1170, %37  : i32 loc(#loc3)
    %1172 = llvm.add %1171, %972  : i32 loc(#loc3)
    %1173 = llvm.add %971, %37  : i32 loc(#loc3)
    %1174 = llvm.add %1173, %4  : i32 loc(#loc3)
    %1175 = llvm.add %1174, %1172  : i32 loc(#loc3)
    %1176 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1177 = llvm.select %1176, %18, %37 : i1, i32 loc(#loc3)
    %1178 = llvm.add %1177, %36  : i32 loc(#loc3)
    %1179 = llvm.add %1178, %972  : i32 loc(#loc3)
    %1180 = llvm.add %971, %37  : i32 loc(#loc3)
    %1181 = llvm.add %1180, %4  : i32 loc(#loc3)
    %1182 = llvm.add %1181, %1179  : i32 loc(#loc3)
    %1183 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1184 = llvm.select %1183, %18, %37 : i1, i32 loc(#loc3)
    %1185 = llvm.add %1184, %41  : i32 loc(#loc3)
    %1186 = llvm.add %1185, %972  : i32 loc(#loc3)
    %1187 = llvm.add %971, %37  : i32 loc(#loc3)
    %1188 = llvm.add %1187, %4  : i32 loc(#loc3)
    %1189 = llvm.add %1188, %1186  : i32 loc(#loc3)
    %1190 = llvm.icmp "uge" %967, %36 : i32 loc(#loc3)
    %1191 = llvm.select %1190, %18, %37 : i1, i32 loc(#loc3)
    %1192 = llvm.add %1191, %11  : i32 loc(#loc3)
    %1193 = llvm.add %1192, %972  : i32 loc(#loc3)
    %1194 = llvm.add %971, %37  : i32 loc(#loc3)
    %1195 = llvm.add %1194, %4  : i32 loc(#loc3)
    %1196 = llvm.add %1195, %1193  : i32 loc(#loc3)
    %1197 = llvm.sub %37, %37  : i32 loc(#loc3)
    %1198 = llvm.getelementptr %799[%1197] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1199 = llvm.mlir.undef : vector<4xf16> loc(#loc3)
    %1200 = llvm.getelementptr %1198[%979] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1201 = llvm.bitcast %1200 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1202 = llvm.load %1201 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1203 = llvm.extractelement %1202[%37 : i32] : vector<1xf16> loc(#loc3)
    %1204 = llvm.insertelement %1203, %1199[%37 : i32] : vector<4xf16> loc(#loc3)
    %1205 = llvm.getelementptr %1198[%986] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1206 = llvm.bitcast %1205 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1207 = llvm.load %1206 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1208 = llvm.extractelement %1207[%37 : i32] : vector<1xf16> loc(#loc3)
    %1209 = llvm.insertelement %1208, %1204[%40 : i32] : vector<4xf16> loc(#loc3)
    %1210 = llvm.getelementptr %1198[%993] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1211 = llvm.bitcast %1210 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1212 = llvm.load %1211 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1213 = llvm.extractelement %1212[%37 : i32] : vector<1xf16> loc(#loc3)
    %1214 = llvm.insertelement %1213, %1209[%34 : i32] : vector<4xf16> loc(#loc3)
    %1215 = llvm.getelementptr %1198[%1000] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1216 = llvm.bitcast %1215 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1217 = llvm.load %1216 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1218 = llvm.extractelement %1217[%37 : i32] : vector<1xf16> loc(#loc3)
    %1219 = llvm.insertelement %1218, %1214[%33 : i32] : vector<4xf16> loc(#loc3)
    %1220 = llvm.mlir.undef : vector<4xf16> loc(#loc3)
    %1221 = llvm.getelementptr %1198[%1007] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1222 = llvm.bitcast %1221 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1223 = llvm.load %1222 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1224 = llvm.extractelement %1223[%37 : i32] : vector<1xf16> loc(#loc3)
    %1225 = llvm.insertelement %1224, %1220[%37 : i32] : vector<4xf16> loc(#loc3)
    %1226 = llvm.getelementptr %1198[%1014] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1227 = llvm.bitcast %1226 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1228 = llvm.load %1227 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1229 = llvm.extractelement %1228[%37 : i32] : vector<1xf16> loc(#loc3)
    %1230 = llvm.insertelement %1229, %1225[%40 : i32] : vector<4xf16> loc(#loc3)
    %1231 = llvm.getelementptr %1198[%1021] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1232 = llvm.bitcast %1231 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1233 = llvm.load %1232 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1234 = llvm.extractelement %1233[%37 : i32] : vector<1xf16> loc(#loc3)
    %1235 = llvm.insertelement %1234, %1230[%34 : i32] : vector<4xf16> loc(#loc3)
    %1236 = llvm.getelementptr %1198[%1028] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1237 = llvm.bitcast %1236 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1238 = llvm.load %1237 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1239 = llvm.extractelement %1238[%37 : i32] : vector<1xf16> loc(#loc3)
    %1240 = llvm.insertelement %1239, %1235[%33 : i32] : vector<4xf16> loc(#loc3)
    %1241 = llvm.mlir.undef : vector<4xf16> loc(#loc3)
    %1242 = llvm.getelementptr %1198[%1035] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1243 = llvm.bitcast %1242 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1244 = llvm.load %1243 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1245 = llvm.extractelement %1244[%37 : i32] : vector<1xf16> loc(#loc3)
    %1246 = llvm.insertelement %1245, %1241[%37 : i32] : vector<4xf16> loc(#loc3)
    %1247 = llvm.getelementptr %1198[%1042] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1248 = llvm.bitcast %1247 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1249 = llvm.load %1248 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1250 = llvm.extractelement %1249[%37 : i32] : vector<1xf16> loc(#loc3)
    %1251 = llvm.insertelement %1250, %1246[%40 : i32] : vector<4xf16> loc(#loc3)
    %1252 = llvm.getelementptr %1198[%1049] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1253 = llvm.bitcast %1252 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1254 = llvm.load %1253 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1255 = llvm.extractelement %1254[%37 : i32] : vector<1xf16> loc(#loc3)
    %1256 = llvm.insertelement %1255, %1251[%34 : i32] : vector<4xf16> loc(#loc3)
    %1257 = llvm.getelementptr %1198[%1056] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1258 = llvm.bitcast %1257 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1259 = llvm.load %1258 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1260 = llvm.extractelement %1259[%37 : i32] : vector<1xf16> loc(#loc3)
    %1261 = llvm.insertelement %1260, %1256[%33 : i32] : vector<4xf16> loc(#loc3)
    %1262 = llvm.mlir.undef : vector<4xf16> loc(#loc3)
    %1263 = llvm.getelementptr %1198[%1063] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1264 = llvm.bitcast %1263 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1265 = llvm.load %1264 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1266 = llvm.extractelement %1265[%37 : i32] : vector<1xf16> loc(#loc3)
    %1267 = llvm.insertelement %1266, %1262[%37 : i32] : vector<4xf16> loc(#loc3)
    %1268 = llvm.getelementptr %1198[%1070] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1269 = llvm.bitcast %1268 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1270 = llvm.load %1269 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1271 = llvm.extractelement %1270[%37 : i32] : vector<1xf16> loc(#loc3)
    %1272 = llvm.insertelement %1271, %1267[%40 : i32] : vector<4xf16> loc(#loc3)
    %1273 = llvm.getelementptr %1198[%1077] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1274 = llvm.bitcast %1273 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1275 = llvm.load %1274 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1276 = llvm.extractelement %1275[%37 : i32] : vector<1xf16> loc(#loc3)
    %1277 = llvm.insertelement %1276, %1272[%34 : i32] : vector<4xf16> loc(#loc3)
    %1278 = llvm.getelementptr %1198[%1084] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1279 = llvm.bitcast %1278 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1280 = llvm.load %1279 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1281 = llvm.extractelement %1280[%37 : i32] : vector<1xf16> loc(#loc3)
    %1282 = llvm.insertelement %1281, %1277[%33 : i32] : vector<4xf16> loc(#loc3)
    %1283 = llvm.mlir.undef : vector<4xf16> loc(#loc3)
    %1284 = llvm.getelementptr %1198[%1091] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1285 = llvm.bitcast %1284 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1286 = llvm.load %1285 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1287 = llvm.extractelement %1286[%37 : i32] : vector<1xf16> loc(#loc3)
    %1288 = llvm.insertelement %1287, %1283[%37 : i32] : vector<4xf16> loc(#loc3)
    %1289 = llvm.getelementptr %1198[%1098] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1290 = llvm.bitcast %1289 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1291 = llvm.load %1290 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1292 = llvm.extractelement %1291[%37 : i32] : vector<1xf16> loc(#loc3)
    %1293 = llvm.insertelement %1292, %1288[%40 : i32] : vector<4xf16> loc(#loc3)
    %1294 = llvm.getelementptr %1198[%1105] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1295 = llvm.bitcast %1294 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1296 = llvm.load %1295 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1297 = llvm.extractelement %1296[%37 : i32] : vector<1xf16> loc(#loc3)
    %1298 = llvm.insertelement %1297, %1293[%34 : i32] : vector<4xf16> loc(#loc3)
    %1299 = llvm.getelementptr %1198[%1112] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1300 = llvm.bitcast %1299 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1301 = llvm.load %1300 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1302 = llvm.extractelement %1301[%37 : i32] : vector<1xf16> loc(#loc3)
    %1303 = llvm.insertelement %1302, %1298[%33 : i32] : vector<4xf16> loc(#loc3)
    %1304 = llvm.mlir.undef : vector<4xf16> loc(#loc3)
    %1305 = llvm.getelementptr %1198[%1119] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1306 = llvm.bitcast %1305 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1307 = llvm.load %1306 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1308 = llvm.extractelement %1307[%37 : i32] : vector<1xf16> loc(#loc3)
    %1309 = llvm.insertelement %1308, %1304[%37 : i32] : vector<4xf16> loc(#loc3)
    %1310 = llvm.getelementptr %1198[%1126] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1311 = llvm.bitcast %1310 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1312 = llvm.load %1311 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1313 = llvm.extractelement %1312[%37 : i32] : vector<1xf16> loc(#loc3)
    %1314 = llvm.insertelement %1313, %1309[%40 : i32] : vector<4xf16> loc(#loc3)
    %1315 = llvm.getelementptr %1198[%1133] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1316 = llvm.bitcast %1315 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1317 = llvm.load %1316 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1318 = llvm.extractelement %1317[%37 : i32] : vector<1xf16> loc(#loc3)
    %1319 = llvm.insertelement %1318, %1314[%34 : i32] : vector<4xf16> loc(#loc3)
    %1320 = llvm.getelementptr %1198[%1140] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1321 = llvm.bitcast %1320 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1322 = llvm.load %1321 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1323 = llvm.extractelement %1322[%37 : i32] : vector<1xf16> loc(#loc3)
    %1324 = llvm.insertelement %1323, %1319[%33 : i32] : vector<4xf16> loc(#loc3)
    %1325 = llvm.mlir.undef : vector<4xf16> loc(#loc3)
    %1326 = llvm.getelementptr %1198[%1147] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1327 = llvm.bitcast %1326 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1328 = llvm.load %1327 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1329 = llvm.extractelement %1328[%37 : i32] : vector<1xf16> loc(#loc3)
    %1330 = llvm.insertelement %1329, %1325[%37 : i32] : vector<4xf16> loc(#loc3)
    %1331 = llvm.getelementptr %1198[%1154] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1332 = llvm.bitcast %1331 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1333 = llvm.load %1332 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1334 = llvm.extractelement %1333[%37 : i32] : vector<1xf16> loc(#loc3)
    %1335 = llvm.insertelement %1334, %1330[%40 : i32] : vector<4xf16> loc(#loc3)
    %1336 = llvm.getelementptr %1198[%1161] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1337 = llvm.bitcast %1336 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1338 = llvm.load %1337 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1339 = llvm.extractelement %1338[%37 : i32] : vector<1xf16> loc(#loc3)
    %1340 = llvm.insertelement %1339, %1335[%34 : i32] : vector<4xf16> loc(#loc3)
    %1341 = llvm.getelementptr %1198[%1168] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1342 = llvm.bitcast %1341 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1343 = llvm.load %1342 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1344 = llvm.extractelement %1343[%37 : i32] : vector<1xf16> loc(#loc3)
    %1345 = llvm.insertelement %1344, %1340[%33 : i32] : vector<4xf16> loc(#loc3)
    %1346 = llvm.mlir.undef : vector<4xf16> loc(#loc3)
    %1347 = llvm.getelementptr %1198[%1175] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1348 = llvm.bitcast %1347 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1349 = llvm.load %1348 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1350 = llvm.extractelement %1349[%37 : i32] : vector<1xf16> loc(#loc3)
    %1351 = llvm.insertelement %1350, %1346[%37 : i32] : vector<4xf16> loc(#loc3)
    %1352 = llvm.getelementptr %1198[%1182] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1353 = llvm.bitcast %1352 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1354 = llvm.load %1353 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1355 = llvm.extractelement %1354[%37 : i32] : vector<1xf16> loc(#loc3)
    %1356 = llvm.insertelement %1355, %1351[%40 : i32] : vector<4xf16> loc(#loc3)
    %1357 = llvm.getelementptr %1198[%1189] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1358 = llvm.bitcast %1357 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1359 = llvm.load %1358 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1360 = llvm.extractelement %1359[%37 : i32] : vector<1xf16> loc(#loc3)
    %1361 = llvm.insertelement %1360, %1356[%34 : i32] : vector<4xf16> loc(#loc3)
    %1362 = llvm.getelementptr %1198[%1196] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %1363 = llvm.bitcast %1362 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1364 = llvm.load %1363 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %1365 = llvm.extractelement %1364[%37 : i32] : vector<1xf16> loc(#loc3)
    %1366 = llvm.insertelement %1365, %1361[%33 : i32] : vector<4xf16> loc(#loc3)
    %1367 = llvm.extractvalue %333[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1368 = llvm.extractvalue %333[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1369 = llvm.extractvalue %333[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1370 = llvm.extractvalue %333[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1371 = llvm.extractvalue %333[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1372 = llvm.extractvalue %333[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1373 = llvm.extractvalue %333[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1374 = llvm.extractvalue %333[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1375 = llvm.extractvalue %333[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1376 = llvm.extractvalue %333[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1377 = llvm.extractvalue %333[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1378 = llvm.extractvalue %333[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1379 = llvm.extractvalue %333[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1380 = llvm.extractvalue %333[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1381 = llvm.extractvalue %333[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1382 = llvm.extractvalue %333[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1383 = llvm.mlir.undef : vector<16xf32> loc(#loc20)
    %1384 = llvm.insertelement %1367, %1383[%37 : i32] : vector<16xf32> loc(#loc20)
    %1385 = llvm.insertelement %1368, %1384[%40 : i32] : vector<16xf32> loc(#loc20)
    %1386 = llvm.insertelement %1369, %1385[%34 : i32] : vector<16xf32> loc(#loc20)
    %1387 = llvm.insertelement %1370, %1386[%33 : i32] : vector<16xf32> loc(#loc20)
    %1388 = llvm.insertelement %1371, %1387[%39 : i32] : vector<16xf32> loc(#loc20)
    %1389 = llvm.insertelement %1372, %1388[%22 : i32] : vector<16xf32> loc(#loc20)
    %1390 = llvm.insertelement %1373, %1389[%21 : i32] : vector<16xf32> loc(#loc20)
    %1391 = llvm.insertelement %1374, %1390[%20 : i32] : vector<16xf32> loc(#loc20)
    %1392 = llvm.insertelement %1375, %1391[%38 : i32] : vector<16xf32> loc(#loc20)
    %1393 = llvm.insertelement %1376, %1392[%32 : i32] : vector<16xf32> loc(#loc20)
    %1394 = llvm.insertelement %1377, %1393[%31 : i32] : vector<16xf32> loc(#loc20)
    %1395 = llvm.insertelement %1378, %1394[%30 : i32] : vector<16xf32> loc(#loc20)
    %1396 = llvm.insertelement %1379, %1395[%3 : i32] : vector<16xf32> loc(#loc20)
    %1397 = llvm.insertelement %1380, %1396[%2 : i32] : vector<16xf32> loc(#loc20)
    %1398 = llvm.insertelement %1381, %1397[%1 : i32] : vector<16xf32> loc(#loc20)
    %1399 = llvm.insertelement %1382, %1398[%0 : i32] : vector<16xf32> loc(#loc20)
    %1400 = rocdl.mfma.f32.32x32x8f16 %690, %1219, %1399, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %1401 = rocdl.mfma.f32.32x32x8f16 %702, %1240, %1400, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %1402 = rocdl.mfma.f32.32x32x8f16 %714, %1261, %1401, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %1403 = rocdl.mfma.f32.32x32x8f16 %726, %1282, %1402, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %1404 = rocdl.mfma.f32.32x32x8f16 %738, %1303, %1403, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %1405 = rocdl.mfma.f32.32x32x8f16 %750, %1324, %1404, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %1406 = rocdl.mfma.f32.32x32x8f16 %762, %1345, %1405, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %1407 = rocdl.mfma.f32.32x32x8f16 %774, %1366, %1406, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %1408 = llvm.extractelement %1407[%37 : i32] : vector<16xf32> loc(#loc20)
    %1409 = llvm.extractelement %1407[%40 : i32] : vector<16xf32> loc(#loc20)
    %1410 = llvm.extractelement %1407[%34 : i32] : vector<16xf32> loc(#loc20)
    %1411 = llvm.extractelement %1407[%33 : i32] : vector<16xf32> loc(#loc20)
    %1412 = llvm.extractelement %1407[%39 : i32] : vector<16xf32> loc(#loc20)
    %1413 = llvm.extractelement %1407[%22 : i32] : vector<16xf32> loc(#loc20)
    %1414 = llvm.extractelement %1407[%21 : i32] : vector<16xf32> loc(#loc20)
    %1415 = llvm.extractelement %1407[%20 : i32] : vector<16xf32> loc(#loc20)
    %1416 = llvm.extractelement %1407[%38 : i32] : vector<16xf32> loc(#loc20)
    %1417 = llvm.extractelement %1407[%32 : i32] : vector<16xf32> loc(#loc20)
    %1418 = llvm.extractelement %1407[%31 : i32] : vector<16xf32> loc(#loc20)
    %1419 = llvm.extractelement %1407[%30 : i32] : vector<16xf32> loc(#loc20)
    %1420 = llvm.extractelement %1407[%3 : i32] : vector<16xf32> loc(#loc20)
    %1421 = llvm.extractelement %1407[%2 : i32] : vector<16xf32> loc(#loc20)
    %1422 = llvm.extractelement %1407[%1 : i32] : vector<16xf32> loc(#loc20)
    %1423 = llvm.extractelement %1407[%0 : i32] : vector<16xf32> loc(#loc20)
    %1424 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc20)
    %1425 = llvm.insertvalue %1408, %1424[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1426 = llvm.insertvalue %1409, %1425[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1427 = llvm.insertvalue %1410, %1426[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1428 = llvm.insertvalue %1411, %1427[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1429 = llvm.insertvalue %1412, %1428[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1430 = llvm.insertvalue %1413, %1429[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1431 = llvm.insertvalue %1414, %1430[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1432 = llvm.insertvalue %1415, %1431[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1433 = llvm.insertvalue %1416, %1432[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1434 = llvm.insertvalue %1417, %1433[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1435 = llvm.insertvalue %1418, %1434[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1436 = llvm.insertvalue %1419, %1435[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1437 = llvm.insertvalue %1420, %1436[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1438 = llvm.insertvalue %1421, %1437[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1439 = llvm.insertvalue %1422, %1438[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1440 = llvm.insertvalue %1423, %1439[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %1441 = llvm.extractvalue %334[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1442 = llvm.extractvalue %334[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1443 = llvm.extractvalue %334[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1444 = llvm.extractvalue %334[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1445 = llvm.extractvalue %334[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1446 = llvm.extractvalue %334[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1447 = llvm.extractvalue %334[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1448 = llvm.extractvalue %334[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1449 = llvm.extractvalue %334[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1450 = llvm.extractvalue %334[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1451 = llvm.extractvalue %334[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1452 = llvm.extractvalue %334[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1453 = llvm.extractvalue %334[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1454 = llvm.extractvalue %334[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1455 = llvm.extractvalue %334[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1456 = llvm.extractvalue %334[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1457 = llvm.getelementptr %1441[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1458 = llvm.getelementptr %1442[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1459 = llvm.getelementptr %1443[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1460 = llvm.getelementptr %1444[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1461 = llvm.getelementptr %1445[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1462 = llvm.getelementptr %1446[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1463 = llvm.getelementptr %1447[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1464 = llvm.getelementptr %1448[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1465 = llvm.getelementptr %1449[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1466 = llvm.getelementptr %1450[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1467 = llvm.getelementptr %1451[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1468 = llvm.getelementptr %1452[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1469 = llvm.getelementptr %1453[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1470 = llvm.getelementptr %1454[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1471 = llvm.getelementptr %1455[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1472 = llvm.getelementptr %1456[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %1473 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc13)
    %1474 = llvm.insertvalue %1457, %1473[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1475 = llvm.insertvalue %1458, %1474[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1476 = llvm.insertvalue %1459, %1475[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1477 = llvm.insertvalue %1460, %1476[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1478 = llvm.insertvalue %1461, %1477[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1479 = llvm.insertvalue %1462, %1478[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1480 = llvm.insertvalue %1463, %1479[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1481 = llvm.insertvalue %1464, %1480[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1482 = llvm.insertvalue %1465, %1481[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1483 = llvm.insertvalue %1466, %1482[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1484 = llvm.insertvalue %1467, %1483[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1485 = llvm.insertvalue %1468, %1484[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1486 = llvm.insertvalue %1469, %1485[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1487 = llvm.insertvalue %1470, %1486[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1488 = llvm.insertvalue %1471, %1487[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1489 = llvm.insertvalue %1472, %1488[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %1490 = llvm.extractvalue %335[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1491 = llvm.extractvalue %335[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1492 = llvm.extractvalue %335[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1493 = llvm.extractvalue %335[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1494 = llvm.extractvalue %335[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1495 = llvm.extractvalue %335[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1496 = llvm.extractvalue %335[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1497 = llvm.extractvalue %335[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1498 = llvm.getelementptr %1490[%331] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %1499 = llvm.getelementptr %1491[%331] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %1500 = llvm.getelementptr %1492[%331] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %1501 = llvm.getelementptr %1493[%331] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %1502 = llvm.getelementptr %1494[%331] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %1503 = llvm.getelementptr %1495[%331] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %1504 = llvm.getelementptr %1496[%331] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %1505 = llvm.getelementptr %1497[%331] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %1506 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc14)
    %1507 = llvm.insertvalue %1498, %1506[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1508 = llvm.insertvalue %1499, %1507[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1509 = llvm.insertvalue %1500, %1508[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1510 = llvm.insertvalue %1501, %1509[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1511 = llvm.insertvalue %1502, %1510[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1512 = llvm.insertvalue %1503, %1511[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1513 = llvm.insertvalue %1504, %1512[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1514 = llvm.insertvalue %1505, %1513[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %1515 = llvm.add %332, %41  : i32 loc(#loc6)
    llvm.br ^bb1(%1515, %1440, %1489, %1514 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc6)
  ^bb3:  // pred: ^bb1
    %1516 = llvm.mul %242, %arg5  : i32 loc(#loc15)
    %1517 = llvm.mul %243, %arg5  : i32 loc(#loc15)
    %1518 = llvm.mul %244, %arg5  : i32 loc(#loc15)
    %1519 = llvm.mul %245, %arg5  : i32 loc(#loc15)
    %1520 = llvm.mul %246, %arg5  : i32 loc(#loc15)
    %1521 = llvm.mul %247, %arg5  : i32 loc(#loc15)
    %1522 = llvm.mul %248, %arg5  : i32 loc(#loc15)
    %1523 = llvm.mul %249, %arg5  : i32 loc(#loc15)
    %1524 = llvm.mul %250, %arg5  : i32 loc(#loc15)
    %1525 = llvm.mul %251, %arg5  : i32 loc(#loc15)
    %1526 = llvm.mul %252, %arg5  : i32 loc(#loc15)
    %1527 = llvm.mul %253, %arg5  : i32 loc(#loc15)
    %1528 = llvm.mul %254, %arg5  : i32 loc(#loc15)
    %1529 = llvm.mul %255, %arg5  : i32 loc(#loc15)
    %1530 = llvm.mul %256, %arg5  : i32 loc(#loc15)
    %1531 = llvm.mul %257, %arg5  : i32 loc(#loc15)
    %1532 = llvm.getelementptr %arg2[%1516] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1533 = llvm.getelementptr %arg2[%1517] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1534 = llvm.getelementptr %arg2[%1518] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1535 = llvm.getelementptr %arg2[%1519] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1536 = llvm.getelementptr %arg2[%1520] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1537 = llvm.getelementptr %arg2[%1521] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1538 = llvm.getelementptr %arg2[%1522] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1539 = llvm.getelementptr %arg2[%1523] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1540 = llvm.getelementptr %arg2[%1524] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1541 = llvm.getelementptr %arg2[%1525] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1542 = llvm.getelementptr %arg2[%1526] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1543 = llvm.getelementptr %arg2[%1527] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1544 = llvm.getelementptr %arg2[%1528] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1545 = llvm.getelementptr %arg2[%1529] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1546 = llvm.getelementptr %arg2[%1530] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1547 = llvm.getelementptr %arg2[%1531] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1548 = llvm.getelementptr %1532[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1549 = llvm.getelementptr %1533[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1550 = llvm.getelementptr %1534[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1551 = llvm.getelementptr %1535[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1552 = llvm.getelementptr %1536[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1553 = llvm.getelementptr %1537[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1554 = llvm.getelementptr %1538[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1555 = llvm.getelementptr %1539[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1556 = llvm.getelementptr %1540[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1557 = llvm.getelementptr %1541[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1558 = llvm.getelementptr %1542[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1559 = llvm.getelementptr %1543[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1560 = llvm.getelementptr %1544[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1561 = llvm.getelementptr %1545[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1562 = llvm.getelementptr %1546[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1563 = llvm.getelementptr %1547[%313] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1564 = llvm.extractvalue %333[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1565 = llvm.extractvalue %333[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1566 = llvm.extractvalue %333[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1567 = llvm.extractvalue %333[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1568 = llvm.extractvalue %333[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1569 = llvm.extractvalue %333[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1570 = llvm.extractvalue %333[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1571 = llvm.extractvalue %333[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1572 = llvm.extractvalue %333[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1573 = llvm.extractvalue %333[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1574 = llvm.extractvalue %333[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1575 = llvm.extractvalue %333[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1576 = llvm.extractvalue %333[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1577 = llvm.extractvalue %333[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1578 = llvm.extractvalue %333[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1579 = llvm.extractvalue %333[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1580 = rocdl.workitem.id.x : i32 loc(#loc18)
    %1581 = llvm.urem %1580, %41  : i32 loc(#loc18)
    %1582 = llvm.udiv %1580, %41  : i32 loc(#loc18)
    %1583 = llvm.urem %1582, %34  : i32 loc(#loc18)
    %1584 = llvm.urem %1581, %36  : i32 loc(#loc18)
    %1585 = llvm.mul %1583, %36  : i32 loc(#loc18)
    %1586 = llvm.add %1585, %1584  : i32 loc(#loc18)
    %1587 = llvm.mul %1586, %40  : i32 loc(#loc18)
    %1588 = llvm.icmp "slt" %1587, %36 : i32 loc(#loc18)
    %1589 = llvm.and %16, %1588  : i1 loc(#loc18)
    %1590 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1591 = llvm.insertelement %1564, %1590[%37 : i32] : vector<1xf32> loc(#loc18)
    %1592 = llvm.bitcast %1591 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1592, %1548 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1593 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1594 = llvm.insertelement %1565, %1593[%37 : i32] : vector<1xf32> loc(#loc18)
    %1595 = llvm.bitcast %1594 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1595, %1549 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1596 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1597 = llvm.insertelement %1566, %1596[%37 : i32] : vector<1xf32> loc(#loc18)
    %1598 = llvm.bitcast %1597 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1598, %1550 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1599 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1600 = llvm.insertelement %1567, %1599[%37 : i32] : vector<1xf32> loc(#loc18)
    %1601 = llvm.bitcast %1600 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1601, %1551 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1602 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1603 = llvm.insertelement %1568, %1602[%37 : i32] : vector<1xf32> loc(#loc18)
    %1604 = llvm.bitcast %1603 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1604, %1552 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1605 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1606 = llvm.insertelement %1569, %1605[%37 : i32] : vector<1xf32> loc(#loc18)
    %1607 = llvm.bitcast %1606 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1607, %1553 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1608 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1609 = llvm.insertelement %1570, %1608[%37 : i32] : vector<1xf32> loc(#loc18)
    %1610 = llvm.bitcast %1609 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1610, %1554 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1611 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1612 = llvm.insertelement %1571, %1611[%37 : i32] : vector<1xf32> loc(#loc18)
    %1613 = llvm.bitcast %1612 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1613, %1555 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1614 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1615 = llvm.insertelement %1572, %1614[%37 : i32] : vector<1xf32> loc(#loc18)
    %1616 = llvm.bitcast %1615 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1616, %1556 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1617 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1618 = llvm.insertelement %1573, %1617[%37 : i32] : vector<1xf32> loc(#loc18)
    %1619 = llvm.bitcast %1618 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1619, %1557 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1620 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1621 = llvm.insertelement %1574, %1620[%37 : i32] : vector<1xf32> loc(#loc18)
    %1622 = llvm.bitcast %1621 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1622, %1558 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1623 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1624 = llvm.insertelement %1575, %1623[%37 : i32] : vector<1xf32> loc(#loc18)
    %1625 = llvm.bitcast %1624 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1625, %1559 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1626 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1627 = llvm.insertelement %1576, %1626[%37 : i32] : vector<1xf32> loc(#loc18)
    %1628 = llvm.bitcast %1627 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1628, %1560 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1629 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1630 = llvm.insertelement %1577, %1629[%37 : i32] : vector<1xf32> loc(#loc18)
    %1631 = llvm.bitcast %1630 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1631, %1561 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1632 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1633 = llvm.insertelement %1578, %1632[%37 : i32] : vector<1xf32> loc(#loc18)
    %1634 = llvm.bitcast %1633 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1634, %1562 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1635 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1636 = llvm.insertelement %1579, %1635[%37 : i32] : vector<1xf32> loc(#loc18)
    %1637 = llvm.bitcast %1636 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1589 {
      llvm.store %1637, %1563 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    llvm.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc20 = loc(fused[#loc1, #loc2])


// -----// IR Dump After CSE (cse) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
module attributes {"triton_gpu.compute-capability" = 0 : i32, triton_gpu.externs = {library_0 = "/triton/python/triton/third_party/hip/lib/bitcode/opencl.bc", library_1 = "/triton/python/triton/third_party/hip/lib/bitcode/ocml.bc", library_2 = "/triton/python/triton/third_party/hip/lib/bitcode/ockl.bc", library_3 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 8192 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public", "triton_gpu.num-tma-load" = 0 : i32, "triton_gpu.num-tma-store" = 0 : i32} {
    %0 = llvm.mlir.constant(15 : i32) : i32 loc(#loc20)
    %1 = llvm.mlir.constant(14 : i32) : i32 loc(#loc20)
    %2 = llvm.mlir.constant(13 : i32) : i32 loc(#loc20)
    %3 = llvm.mlir.constant(12 : i32) : i32 loc(#loc20)
    %4 = llvm.mlir.constant(1792 : i32) : i32 loc(#loc3)
    %5 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc3)
    %6 = llvm.mlir.constant(1280 : i32) : i32 loc(#loc3)
    %7 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc3)
    %8 = llvm.mlir.constant(768 : i32) : i32 loc(#loc3)
    %9 = llvm.mlir.constant(512 : i32) : i32 loc(#loc3)
    %10 = llvm.mlir.constant(256 : i32) : i32 loc(#loc3)
    %11 = llvm.mlir.constant(96 : i32) : i32 loc(#loc3)
    %12 = llvm.mlir.constant(56 : i32) : i32 loc(#loc4)
    %13 = llvm.mlir.constant(48 : i32) : i32 loc(#loc4)
    %14 = llvm.mlir.constant(40 : i32) : i32 loc(#loc4)
    %15 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %16 = llvm.mlir.constant(true) : i1 loc(#loc4)
    %17 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %18 = llvm.mlir.constant(128 : i32) : i32 loc(#loc6)
    %19 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc2)
    %20 = llvm.mlir.constant(7 : i32) : i32 loc(#loc7)
    %21 = llvm.mlir.constant(6 : i32) : i32 loc(#loc7)
    %22 = llvm.mlir.constant(5 : i32) : i32 loc(#loc7)
    %23 = llvm.mlir.constant(27 : i32) : i32 loc(#loc5)
    %24 = llvm.mlir.constant(26 : i32) : i32 loc(#loc5)
    %25 = llvm.mlir.constant(25 : i32) : i32 loc(#loc5)
    %26 = llvm.mlir.constant(24 : i32) : i32 loc(#loc5)
    %27 = llvm.mlir.constant(19 : i32) : i32 loc(#loc5)
    %28 = llvm.mlir.constant(18 : i32) : i32 loc(#loc5)
    %29 = llvm.mlir.constant(17 : i32) : i32 loc(#loc5)
    %30 = llvm.mlir.constant(11 : i32) : i32 loc(#loc5)
    %31 = llvm.mlir.constant(10 : i32) : i32 loc(#loc5)
    %32 = llvm.mlir.constant(9 : i32) : i32 loc(#loc5)
    %33 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %34 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %35 = llvm.mlir.constant(16 : i32) : i32 loc(#loc5)
    %36 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %37 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %38 = llvm.mlir.constant(8 : i32) : i32 loc(#loc5)
    %39 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %40 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %41 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %42 = rocdl.workitem.id.x : i32 loc(#loc5)
    %43 = llvm.urem %42, %41  : i32 loc(#loc5)
    %44 = llvm.udiv %42, %41  : i32 loc(#loc5)
    %45 = llvm.udiv %44, %40  : i32 loc(#loc5)
    %46 = llvm.urem %45, %39  : i32 loc(#loc5)
    %47 = llvm.udiv %43, %38  : i32 loc(#loc5)
    %48 = llvm.urem %47, %38  : i32 loc(#loc5)
    %49 = llvm.urem %46, %38  : i32 loc(#loc5)
    %50 = llvm.urem %48, %41  : i32 loc(#loc5)
    %51 = llvm.mul %49, %38  : i32 loc(#loc5)
    %52 = llvm.add %50, %51  : i32 loc(#loc5)
    %53 = llvm.mul %52, %40  : i32 loc(#loc5)
    %54 = llvm.urem %37, %40  : i32 loc(#loc5)
    %55 = llvm.urem %54, %40  : i32 loc(#loc5)
    %56 = llvm.mul %55, %41  : i32 loc(#loc5)
    %57 = llvm.add %53, %56  : i32 loc(#loc5)
    %58 = llvm.add %57, %37  : i32 loc(#loc5)
    %59 = llvm.add %57, %36  : i32 loc(#loc5)
    %60 = llvm.udiv %43, %39  : i32 loc(#loc5)
    %61 = llvm.urem %60, %35  : i32 loc(#loc5)
    %62 = llvm.urem %46, %39  : i32 loc(#loc5)
    %63 = llvm.urem %61, %41  : i32 loc(#loc5)
    %64 = llvm.mul %62, %35  : i32 loc(#loc5)
    %65 = llvm.add %63, %64  : i32 loc(#loc5)
    %66 = llvm.mul %65, %40  : i32 loc(#loc5)
    %67 = llvm.add %66, %56  : i32 loc(#loc5)
    %68 = llvm.add %67, %37  : i32 loc(#loc5)
    %69 = llvm.urem %44, %34  : i32 loc(#loc5)
    %70 = llvm.urem %69, %34  : i32 loc(#loc5)
    %71 = llvm.mul %70, %36  : i32 loc(#loc5)
    %72 = llvm.udiv %43, %36  : i32 loc(#loc5)
    %73 = llvm.mul %72, %39  : i32 loc(#loc5)
    %74 = llvm.add %73, %71  : i32 loc(#loc5)
    %75 = llvm.udiv %37, %40  : i32 loc(#loc5)
    %76 = llvm.urem %75, %40  : i32 loc(#loc5)
    %77 = llvm.urem %76, %40  : i32 loc(#loc5)
    %78 = llvm.mul %77, %41  : i32 loc(#loc5)
    %79 = llvm.add %74, %78  : i32 loc(#loc5)
    %80 = llvm.add %79, %37  : i32 loc(#loc5)
    %81 = llvm.add %79, %40  : i32 loc(#loc5)
    %82 = llvm.add %79, %34  : i32 loc(#loc5)
    %83 = llvm.add %79, %33  : i32 loc(#loc5)
    %84 = llvm.add %79, %38  : i32 loc(#loc5)
    %85 = llvm.add %79, %32  : i32 loc(#loc5)
    %86 = llvm.add %79, %31  : i32 loc(#loc5)
    %87 = llvm.add %79, %30  : i32 loc(#loc5)
    %88 = llvm.add %79, %35  : i32 loc(#loc5)
    %89 = llvm.add %79, %29  : i32 loc(#loc5)
    %90 = llvm.add %79, %28  : i32 loc(#loc5)
    %91 = llvm.add %79, %27  : i32 loc(#loc5)
    %92 = llvm.add %79, %26  : i32 loc(#loc5)
    %93 = llvm.add %79, %25  : i32 loc(#loc5)
    %94 = llvm.add %79, %24  : i32 loc(#loc5)
    %95 = llvm.add %79, %23  : i32 loc(#loc5)
    %96 = llvm.urem %44, %40  : i32 loc(#loc7)
    %97 = llvm.urem %43, %38  : i32 loc(#loc7)
    %98 = llvm.urem %96, %40  : i32 loc(#loc7)
    %99 = llvm.urem %97, %38  : i32 loc(#loc7)
    %100 = llvm.mul %98, %38  : i32 loc(#loc7)
    %101 = llvm.add %99, %100  : i32 loc(#loc7)
    %102 = llvm.mul %101, %38  : i32 loc(#loc7)
    %103 = llvm.add %102, %78  : i32 loc(#loc7)
    %104 = llvm.add %103, %37  : i32 loc(#loc7)
    %105 = llvm.add %103, %40  : i32 loc(#loc7)
    %106 = llvm.add %103, %34  : i32 loc(#loc7)
    %107 = llvm.add %103, %33  : i32 loc(#loc7)
    %108 = llvm.add %103, %39  : i32 loc(#loc7)
    %109 = llvm.add %103, %22  : i32 loc(#loc7)
    %110 = llvm.add %103, %21  : i32 loc(#loc7)
    %111 = llvm.add %103, %20  : i32 loc(#loc7)
    %112 = llvm.urem %43, %39  : i32 loc(#loc8)
    %113 = llvm.urem %112, %39  : i32 loc(#loc8)
    %114 = llvm.mul %98, %39  : i32 loc(#loc8)
    %115 = llvm.add %113, %114  : i32 loc(#loc8)
    %116 = llvm.mul %115, %38  : i32 loc(#loc8)
    %117 = llvm.mul %77, %36  : i32 loc(#loc8)
    %118 = llvm.add %116, %117  : i32 loc(#loc8)
    %119 = llvm.add %118, %37  : i32 loc(#loc8)
    %120 = llvm.add %118, %40  : i32 loc(#loc8)
    %121 = llvm.add %118, %34  : i32 loc(#loc8)
    %122 = llvm.add %118, %33  : i32 loc(#loc8)
    %123 = llvm.add %118, %39  : i32 loc(#loc8)
    %124 = llvm.add %118, %22  : i32 loc(#loc8)
    %125 = llvm.add %118, %21  : i32 loc(#loc8)
    %126 = llvm.add %118, %20  : i32 loc(#loc8)
    %127 = llvm.udiv %44, %34  : i32 loc(#loc8)
    %128 = llvm.urem %127, %34  : i32 loc(#loc8)
    %129 = llvm.urem %128, %40  : i32 loc(#loc8)
    %130 = llvm.mul %129, %36  : i32 loc(#loc8)
    %131 = llvm.urem %43, %36  : i32 loc(#loc8)
    %132 = llvm.add %131, %130  : i32 loc(#loc8)
    %133 = llvm.mul %55, %36  : i32 loc(#loc8)
    %134 = llvm.add %132, %133  : i32 loc(#loc8)
    %135 = llvm.add %134, %37  : i32 loc(#loc8)
    %136 = llvm.add %53, %37  : i32 loc(#loc4)
    %137 = llvm.add %102, %37  : i32 loc(#loc4)
    %138 = llvm.add %102, %39  : i32 loc(#loc4)
    %139 = llvm.add %53, %36  : i32 loc(#loc4)
    %140 = llvm.add %66, %37  : i32 loc(#loc3)
    %141 = llvm.add %116, %37  : i32 loc(#loc3)
    %142 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3> loc(#loc)
    %143 = llvm.bitcast %142 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3> loc(#loc)
    %144 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc2)
    %145 = llvm.insertvalue %19, %144[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %146 = llvm.insertvalue %19, %145[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %147 = llvm.insertvalue %19, %146[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %148 = llvm.insertvalue %19, %147[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %149 = llvm.insertvalue %19, %148[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %150 = llvm.insertvalue %19, %149[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %151 = llvm.insertvalue %19, %150[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %152 = llvm.insertvalue %19, %151[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %153 = llvm.insertvalue %19, %152[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %154 = llvm.insertvalue %19, %153[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %155 = llvm.insertvalue %19, %154[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %156 = llvm.insertvalue %19, %155[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %157 = llvm.insertvalue %19, %156[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %158 = llvm.insertvalue %19, %157[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %159 = llvm.insertvalue %19, %158[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %160 = llvm.insertvalue %19, %159[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %161 = llvm.add %58, %17  : i32 loc(#loc5)
    %162 = llvm.add %59, %17  : i32 loc(#loc5)
    %163 = llvm.add %68, %17  : i32 loc(#loc5)
    %164 = llvm.add %80, %17  : i32 loc(#loc5)
    %165 = llvm.add %81, %17  : i32 loc(#loc5)
    %166 = llvm.add %82, %17  : i32 loc(#loc5)
    %167 = llvm.add %83, %17  : i32 loc(#loc5)
    %168 = llvm.add %84, %17  : i32 loc(#loc5)
    %169 = llvm.add %85, %17  : i32 loc(#loc5)
    %170 = llvm.add %86, %17  : i32 loc(#loc5)
    %171 = llvm.add %87, %17  : i32 loc(#loc5)
    %172 = llvm.add %88, %17  : i32 loc(#loc5)
    %173 = llvm.add %89, %17  : i32 loc(#loc5)
    %174 = llvm.add %90, %17  : i32 loc(#loc5)
    %175 = llvm.add %91, %17  : i32 loc(#loc5)
    %176 = llvm.add %92, %17  : i32 loc(#loc5)
    %177 = llvm.add %93, %17  : i32 loc(#loc5)
    %178 = llvm.add %94, %17  : i32 loc(#loc5)
    %179 = llvm.add %95, %17  : i32 loc(#loc5)
    %180 = llvm.mul %161, %arg3  : i32 loc(#loc9)
    %181 = llvm.mul %162, %arg3  : i32 loc(#loc9)
    %182 = llvm.getelementptr %arg0[%180] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc5)
    %183 = llvm.getelementptr %arg0[%181] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc5)
    %184 = llvm.add %104, %17  : i32 loc(#loc7)
    %185 = llvm.add %105, %17  : i32 loc(#loc7)
    %186 = llvm.add %106, %17  : i32 loc(#loc7)
    %187 = llvm.add %107, %17  : i32 loc(#loc7)
    %188 = llvm.add %108, %17  : i32 loc(#loc7)
    %189 = llvm.add %109, %17  : i32 loc(#loc7)
    %190 = llvm.add %110, %17  : i32 loc(#loc7)
    %191 = llvm.add %111, %17  : i32 loc(#loc7)
    %192 = llvm.getelementptr %182[%184] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %193 = llvm.getelementptr %182[%185] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %194 = llvm.getelementptr %182[%186] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %195 = llvm.getelementptr %182[%187] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %196 = llvm.getelementptr %182[%188] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %197 = llvm.getelementptr %182[%189] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %198 = llvm.getelementptr %182[%190] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %199 = llvm.getelementptr %182[%191] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %200 = llvm.getelementptr %183[%184] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %201 = llvm.getelementptr %183[%185] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %202 = llvm.getelementptr %183[%186] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %203 = llvm.getelementptr %183[%187] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %204 = llvm.getelementptr %183[%188] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %205 = llvm.getelementptr %183[%189] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %206 = llvm.getelementptr %183[%190] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %207 = llvm.getelementptr %183[%191] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %208 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc7)
    %209 = llvm.insertvalue %192, %208[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %210 = llvm.insertvalue %193, %209[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %211 = llvm.insertvalue %194, %210[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %212 = llvm.insertvalue %195, %211[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %213 = llvm.insertvalue %196, %212[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %214 = llvm.insertvalue %197, %213[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %215 = llvm.insertvalue %198, %214[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %216 = llvm.insertvalue %199, %215[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %217 = llvm.insertvalue %200, %216[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %218 = llvm.insertvalue %201, %217[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %219 = llvm.insertvalue %202, %218[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %220 = llvm.insertvalue %203, %219[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %221 = llvm.insertvalue %204, %220[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %222 = llvm.insertvalue %205, %221[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %223 = llvm.insertvalue %206, %222[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %224 = llvm.insertvalue %207, %223[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %225 = llvm.mul %163, %arg4  : i32 loc(#loc10)
    %226 = llvm.getelementptr %arg1[%225] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %227 = llvm.add %119, %17  : i32 loc(#loc8)
    %228 = llvm.add %120, %17  : i32 loc(#loc8)
    %229 = llvm.add %121, %17  : i32 loc(#loc8)
    %230 = llvm.add %122, %17  : i32 loc(#loc8)
    %231 = llvm.add %123, %17  : i32 loc(#loc8)
    %232 = llvm.add %124, %17  : i32 loc(#loc8)
    %233 = llvm.add %125, %17  : i32 loc(#loc8)
    %234 = llvm.add %126, %17  : i32 loc(#loc8)
    %235 = llvm.add %135, %17  : i32 loc(#loc8)
    %236 = llvm.getelementptr %226[%227] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %237 = llvm.getelementptr %226[%228] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %238 = llvm.getelementptr %226[%229] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %239 = llvm.getelementptr %226[%230] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %240 = llvm.getelementptr %226[%231] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %241 = llvm.getelementptr %226[%232] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %242 = llvm.getelementptr %226[%233] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %243 = llvm.getelementptr %226[%234] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %244 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc8)
    %245 = llvm.insertvalue %236, %244[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %246 = llvm.insertvalue %237, %245[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %247 = llvm.insertvalue %238, %246[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %248 = llvm.insertvalue %239, %247[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %249 = llvm.insertvalue %240, %248[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %250 = llvm.insertvalue %241, %249[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %251 = llvm.insertvalue %242, %250[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %252 = llvm.insertvalue %243, %251[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %253 = llvm.mul %arg4, %41  : i32 loc(#loc12)
    llvm.br ^bb1(%37, %160, %224, %252 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc6)
  ^bb1(%254: i32 loc("/triton/python/test/unit/language/test_core_amd.py":1977:25), %255: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/triton/python/test/unit/language/test_core_amd.py":1980:33), %256: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1974:51), %257: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)):  // 2 preds: ^bb0, ^bb2
    %258 = llvm.icmp "slt" %254, %18 : i32 loc(#loc6)
    llvm.cond_br %258, ^bb2, ^bb3 loc(#loc6)
  ^bb2:  // pred: ^bb1
    %259 = llvm.extractvalue %256[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %260 = llvm.extractvalue %256[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %261 = llvm.extractvalue %256[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %262 = llvm.extractvalue %256[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %263 = llvm.extractvalue %256[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %264 = llvm.extractvalue %256[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %265 = llvm.extractvalue %256[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %266 = llvm.extractvalue %256[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %267 = llvm.addrspacecast %259 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %268 = llvm.load %267 : !llvm.ptr<i32> loc(#loc4)
    %269 = llvm.bitcast %268 : i32 to vector<2xf16> loc(#loc4)
    %270 = llvm.extractelement %269[%17 : i32] : vector<2xf16> loc(#loc4)
    %271 = llvm.extractelement %269[%15 : i32] : vector<2xf16> loc(#loc4)
    %272 = llvm.addrspacecast %260 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %273 = llvm.load %272 : !llvm.ptr<i32> loc(#loc4)
    %274 = llvm.bitcast %273 : i32 to vector<2xf16> loc(#loc4)
    %275 = llvm.extractelement %274[%17 : i32] : vector<2xf16> loc(#loc4)
    %276 = llvm.extractelement %274[%15 : i32] : vector<2xf16> loc(#loc4)
    %277 = llvm.addrspacecast %261 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %278 = llvm.load %277 : !llvm.ptr<i32> loc(#loc4)
    %279 = llvm.bitcast %278 : i32 to vector<2xf16> loc(#loc4)
    %280 = llvm.extractelement %279[%17 : i32] : vector<2xf16> loc(#loc4)
    %281 = llvm.extractelement %279[%15 : i32] : vector<2xf16> loc(#loc4)
    %282 = llvm.addrspacecast %262 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %283 = llvm.load %282 : !llvm.ptr<i32> loc(#loc4)
    %284 = llvm.bitcast %283 : i32 to vector<2xf16> loc(#loc4)
    %285 = llvm.extractelement %284[%17 : i32] : vector<2xf16> loc(#loc4)
    %286 = llvm.extractelement %284[%15 : i32] : vector<2xf16> loc(#loc4)
    %287 = llvm.addrspacecast %263 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %288 = llvm.load %287 : !llvm.ptr<i32> loc(#loc4)
    %289 = llvm.bitcast %288 : i32 to vector<2xf16> loc(#loc4)
    %290 = llvm.extractelement %289[%17 : i32] : vector<2xf16> loc(#loc4)
    %291 = llvm.extractelement %289[%15 : i32] : vector<2xf16> loc(#loc4)
    %292 = llvm.addrspacecast %264 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %293 = llvm.load %292 : !llvm.ptr<i32> loc(#loc4)
    %294 = llvm.bitcast %293 : i32 to vector<2xf16> loc(#loc4)
    %295 = llvm.extractelement %294[%17 : i32] : vector<2xf16> loc(#loc4)
    %296 = llvm.extractelement %294[%15 : i32] : vector<2xf16> loc(#loc4)
    %297 = llvm.addrspacecast %265 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %298 = llvm.load %297 : !llvm.ptr<i32> loc(#loc4)
    %299 = llvm.bitcast %298 : i32 to vector<2xf16> loc(#loc4)
    %300 = llvm.extractelement %299[%17 : i32] : vector<2xf16> loc(#loc4)
    %301 = llvm.extractelement %299[%15 : i32] : vector<2xf16> loc(#loc4)
    %302 = llvm.addrspacecast %266 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %303 = llvm.load %302 : !llvm.ptr<i32> loc(#loc4)
    %304 = llvm.bitcast %303 : i32 to vector<2xf16> loc(#loc4)
    %305 = llvm.extractelement %304[%17 : i32] : vector<2xf16> loc(#loc4)
    %306 = llvm.extractelement %304[%15 : i32] : vector<2xf16> loc(#loc4)
    rocdl.barrier loc(#loc4)
    %307 = llvm.bitcast %143 : !llvm.ptr<i8, 3> to !llvm.ptr<f16, 3> loc(#loc4)
    %308 = llvm.mul %37, %41  : i32 loc(#loc4)
    %309 = llvm.add %308, %37  : i32 loc(#loc4)
    %310 = llvm.mul %37, %40  : i32 loc(#loc4)
    %311 = llvm.add %309, %310  : i32 loc(#loc4)
    %312 = llvm.getelementptr %307[%311] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %313 = llvm.udiv %136, %40  : i32 loc(#loc4)
    %314 = llvm.urem %313, %35  : i32 loc(#loc4)
    %315 = llvm.mul %136, %41  : i32 loc(#loc4)
    %316 = llvm.udiv %137, %39  : i32 loc(#loc4)
    %317 = llvm.xor %316, %314  : i32 loc(#loc4)
    %318 = llvm.mul %317, %39  : i32 loc(#loc4)
    %319 = llvm.urem %137, %39  : i32 loc(#loc4)
    %320 = llvm.udiv %319, %39  : i32 loc(#loc4)
    %321 = llvm.mul %320, %39  : i32 loc(#loc4)
    %322 = llvm.add %318, %321  : i32 loc(#loc4)
    %323 = llvm.mul %322, %40  : i32 loc(#loc4)
    %324 = llvm.add %315, %323  : i32 loc(#loc4)
    %325 = llvm.add %324, %37  : i32 loc(#loc4)
    %326 = llvm.getelementptr %312[%325] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %327 = llvm.getelementptr %326[%309] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %328 = llvm.udiv %138, %39  : i32 loc(#loc4)
    %329 = llvm.xor %328, %314  : i32 loc(#loc4)
    %330 = llvm.mul %329, %39  : i32 loc(#loc4)
    %331 = llvm.urem %138, %39  : i32 loc(#loc4)
    %332 = llvm.udiv %331, %39  : i32 loc(#loc4)
    %333 = llvm.mul %332, %39  : i32 loc(#loc4)
    %334 = llvm.add %330, %333  : i32 loc(#loc4)
    %335 = llvm.mul %334, %40  : i32 loc(#loc4)
    %336 = llvm.add %315, %335  : i32 loc(#loc4)
    %337 = llvm.add %336, %37  : i32 loc(#loc4)
    %338 = llvm.getelementptr %312[%337] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %339 = llvm.getelementptr %338[%309] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %340 = llvm.udiv %139, %40  : i32 loc(#loc4)
    %341 = llvm.urem %340, %35  : i32 loc(#loc4)
    %342 = llvm.xor %316, %341  : i32 loc(#loc4)
    %343 = llvm.mul %342, %39  : i32 loc(#loc4)
    %344 = llvm.add %343, %321  : i32 loc(#loc4)
    %345 = llvm.mul %344, %40  : i32 loc(#loc4)
    %346 = llvm.add %315, %345  : i32 loc(#loc4)
    %347 = llvm.add %346, %37  : i32 loc(#loc4)
    %348 = llvm.getelementptr %312[%347] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %349 = llvm.mul %36, %41  : i32 loc(#loc4)
    %350 = llvm.add %349, %37  : i32 loc(#loc4)
    %351 = llvm.getelementptr %348[%350] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %352 = llvm.xor %328, %341  : i32 loc(#loc4)
    %353 = llvm.mul %352, %39  : i32 loc(#loc4)
    %354 = llvm.add %353, %333  : i32 loc(#loc4)
    %355 = llvm.mul %354, %40  : i32 loc(#loc4)
    %356 = llvm.add %315, %355  : i32 loc(#loc4)
    %357 = llvm.add %356, %37  : i32 loc(#loc4)
    %358 = llvm.getelementptr %312[%357] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %359 = llvm.getelementptr %358[%350] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %360 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %361 = llvm.insertelement %270, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %362 = llvm.insertelement %271, %361[%40 : i32] : vector<4xf16> loc(#loc4)
    %363 = llvm.insertelement %275, %362[%34 : i32] : vector<4xf16> loc(#loc4)
    %364 = llvm.insertelement %276, %363[%33 : i32] : vector<4xf16> loc(#loc4)
    %365 = llvm.bitcast %327 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %364, %365 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %366 = llvm.insertelement %280, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %367 = llvm.insertelement %281, %366[%40 : i32] : vector<4xf16> loc(#loc4)
    %368 = llvm.insertelement %285, %367[%34 : i32] : vector<4xf16> loc(#loc4)
    %369 = llvm.insertelement %286, %368[%33 : i32] : vector<4xf16> loc(#loc4)
    %370 = llvm.bitcast %339 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %369, %370 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %371 = llvm.insertelement %290, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %372 = llvm.insertelement %291, %371[%40 : i32] : vector<4xf16> loc(#loc4)
    %373 = llvm.insertelement %295, %372[%34 : i32] : vector<4xf16> loc(#loc4)
    %374 = llvm.insertelement %296, %373[%33 : i32] : vector<4xf16> loc(#loc4)
    %375 = llvm.bitcast %351 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %374, %375 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %376 = llvm.insertelement %300, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %377 = llvm.insertelement %301, %376[%40 : i32] : vector<4xf16> loc(#loc4)
    %378 = llvm.insertelement %305, %377[%34 : i32] : vector<4xf16> loc(#loc4)
    %379 = llvm.insertelement %306, %378[%33 : i32] : vector<4xf16> loc(#loc4)
    %380 = llvm.bitcast %359 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %379, %380 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    rocdl.barrier loc(#loc4)
    %381 = llvm.icmp "uge" %43, %36 : i32 loc(#loc4)
    %382 = llvm.select %381, %39, %37 : i1, i32 loc(#loc4)
    %383 = llvm.add %71, %37  : i32 loc(#loc4)
    %384 = llvm.add %383, %37  : i32 loc(#loc4)
    %385 = llvm.add %384, %131  : i32 loc(#loc4)
    %386 = llvm.add %385, %37  : i32 loc(#loc4)
    %387 = llvm.add %37, %37  : i32 loc(#loc4)
    %388 = llvm.add %387, %37  : i32 loc(#loc4)
    %389 = llvm.add %388, %382  : i32 loc(#loc4)
    %390 = llvm.add %389, %37  : i32 loc(#loc4)
    %391 = llvm.add %386, %37  : i32 loc(#loc4)
    %392 = llvm.add %390, %37  : i32 loc(#loc4)
    %393 = llvm.add %387, %38  : i32 loc(#loc4)
    %394 = llvm.add %393, %382  : i32 loc(#loc4)
    %395 = llvm.add %394, %37  : i32 loc(#loc4)
    %396 = llvm.add %395, %37  : i32 loc(#loc4)
    %397 = llvm.add %387, %35  : i32 loc(#loc4)
    %398 = llvm.add %397, %382  : i32 loc(#loc4)
    %399 = llvm.add %398, %37  : i32 loc(#loc4)
    %400 = llvm.add %399, %37  : i32 loc(#loc4)
    %401 = llvm.add %387, %26  : i32 loc(#loc4)
    %402 = llvm.add %401, %382  : i32 loc(#loc4)
    %403 = llvm.add %402, %37  : i32 loc(#loc4)
    %404 = llvm.add %403, %37  : i32 loc(#loc4)
    %405 = llvm.add %387, %36  : i32 loc(#loc4)
    %406 = llvm.add %405, %382  : i32 loc(#loc4)
    %407 = llvm.add %406, %37  : i32 loc(#loc4)
    %408 = llvm.add %407, %37  : i32 loc(#loc4)
    %409 = llvm.add %387, %14  : i32 loc(#loc4)
    %410 = llvm.add %409, %382  : i32 loc(#loc4)
    %411 = llvm.add %410, %37  : i32 loc(#loc4)
    %412 = llvm.add %411, %37  : i32 loc(#loc4)
    %413 = llvm.add %387, %13  : i32 loc(#loc4)
    %414 = llvm.add %413, %382  : i32 loc(#loc4)
    %415 = llvm.add %414, %37  : i32 loc(#loc4)
    %416 = llvm.add %415, %37  : i32 loc(#loc4)
    %417 = llvm.add %387, %12  : i32 loc(#loc4)
    %418 = llvm.add %417, %382  : i32 loc(#loc4)
    %419 = llvm.add %418, %37  : i32 loc(#loc4)
    %420 = llvm.add %419, %37  : i32 loc(#loc4)
    %421 = llvm.udiv %391, %40  : i32 loc(#loc4)
    %422 = llvm.urem %421, %35  : i32 loc(#loc4)
    %423 = llvm.udiv %392, %39  : i32 loc(#loc4)
    %424 = llvm.xor %423, %422  : i32 loc(#loc4)
    %425 = llvm.mul %424, %39  : i32 loc(#loc4)
    %426 = llvm.urem %392, %39  : i32 loc(#loc4)
    %427 = llvm.add %425, %426  : i32 loc(#loc4)
    %428 = llvm.mul %391, %41  : i32 loc(#loc4)
    %429 = llvm.mul %427, %40  : i32 loc(#loc4)
    %430 = llvm.add %428, %429  : i32 loc(#loc4)
    %431 = llvm.udiv %396, %39  : i32 loc(#loc4)
    %432 = llvm.xor %431, %422  : i32 loc(#loc4)
    %433 = llvm.mul %432, %39  : i32 loc(#loc4)
    %434 = llvm.urem %396, %39  : i32 loc(#loc4)
    %435 = llvm.add %433, %434  : i32 loc(#loc4)
    %436 = llvm.mul %435, %40  : i32 loc(#loc4)
    %437 = llvm.add %428, %436  : i32 loc(#loc4)
    %438 = llvm.udiv %400, %39  : i32 loc(#loc4)
    %439 = llvm.xor %438, %422  : i32 loc(#loc4)
    %440 = llvm.mul %439, %39  : i32 loc(#loc4)
    %441 = llvm.urem %400, %39  : i32 loc(#loc4)
    %442 = llvm.add %440, %441  : i32 loc(#loc4)
    %443 = llvm.mul %442, %40  : i32 loc(#loc4)
    %444 = llvm.add %428, %443  : i32 loc(#loc4)
    %445 = llvm.udiv %404, %39  : i32 loc(#loc4)
    %446 = llvm.xor %445, %422  : i32 loc(#loc4)
    %447 = llvm.mul %446, %39  : i32 loc(#loc4)
    %448 = llvm.urem %404, %39  : i32 loc(#loc4)
    %449 = llvm.add %447, %448  : i32 loc(#loc4)
    %450 = llvm.mul %449, %40  : i32 loc(#loc4)
    %451 = llvm.add %428, %450  : i32 loc(#loc4)
    %452 = llvm.udiv %408, %39  : i32 loc(#loc4)
    %453 = llvm.xor %452, %422  : i32 loc(#loc4)
    %454 = llvm.mul %453, %39  : i32 loc(#loc4)
    %455 = llvm.urem %408, %39  : i32 loc(#loc4)
    %456 = llvm.add %454, %455  : i32 loc(#loc4)
    %457 = llvm.mul %456, %40  : i32 loc(#loc4)
    %458 = llvm.add %428, %457  : i32 loc(#loc4)
    %459 = llvm.udiv %412, %39  : i32 loc(#loc4)
    %460 = llvm.xor %459, %422  : i32 loc(#loc4)
    %461 = llvm.mul %460, %39  : i32 loc(#loc4)
    %462 = llvm.urem %412, %39  : i32 loc(#loc4)
    %463 = llvm.add %461, %462  : i32 loc(#loc4)
    %464 = llvm.mul %463, %40  : i32 loc(#loc4)
    %465 = llvm.add %428, %464  : i32 loc(#loc4)
    %466 = llvm.udiv %416, %39  : i32 loc(#loc4)
    %467 = llvm.xor %466, %422  : i32 loc(#loc4)
    %468 = llvm.mul %467, %39  : i32 loc(#loc4)
    %469 = llvm.urem %416, %39  : i32 loc(#loc4)
    %470 = llvm.add %468, %469  : i32 loc(#loc4)
    %471 = llvm.mul %470, %40  : i32 loc(#loc4)
    %472 = llvm.add %428, %471  : i32 loc(#loc4)
    %473 = llvm.udiv %420, %39  : i32 loc(#loc4)
    %474 = llvm.xor %473, %422  : i32 loc(#loc4)
    %475 = llvm.mul %474, %39  : i32 loc(#loc4)
    %476 = llvm.urem %420, %39  : i32 loc(#loc4)
    %477 = llvm.add %475, %476  : i32 loc(#loc4)
    %478 = llvm.mul %477, %40  : i32 loc(#loc4)
    %479 = llvm.add %428, %478  : i32 loc(#loc4)
    %480 = llvm.sub %37, %308  : i32 loc(#loc4)
    %481 = llvm.getelementptr %307[%480] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %482 = llvm.sub %37, %310  : i32 loc(#loc4)
    %483 = llvm.getelementptr %481[%482] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %484 = llvm.getelementptr %483[%430] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %485 = llvm.bitcast %484 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %486 = llvm.load %485 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %487 = llvm.extractelement %486[%37 : i32] : vector<4xf16> loc(#loc4)
    %488 = llvm.insertelement %487, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %489 = llvm.extractelement %486[%40 : i32] : vector<4xf16> loc(#loc4)
    %490 = llvm.insertelement %489, %488[%40 : i32] : vector<4xf16> loc(#loc4)
    %491 = llvm.extractelement %486[%34 : i32] : vector<4xf16> loc(#loc4)
    %492 = llvm.insertelement %491, %490[%34 : i32] : vector<4xf16> loc(#loc4)
    %493 = llvm.extractelement %486[%33 : i32] : vector<4xf16> loc(#loc4)
    %494 = llvm.insertelement %493, %492[%33 : i32] : vector<4xf16> loc(#loc4)
    %495 = llvm.getelementptr %483[%437] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %496 = llvm.bitcast %495 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %497 = llvm.load %496 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %498 = llvm.extractelement %497[%37 : i32] : vector<4xf16> loc(#loc4)
    %499 = llvm.insertelement %498, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %500 = llvm.extractelement %497[%40 : i32] : vector<4xf16> loc(#loc4)
    %501 = llvm.insertelement %500, %499[%40 : i32] : vector<4xf16> loc(#loc4)
    %502 = llvm.extractelement %497[%34 : i32] : vector<4xf16> loc(#loc4)
    %503 = llvm.insertelement %502, %501[%34 : i32] : vector<4xf16> loc(#loc4)
    %504 = llvm.extractelement %497[%33 : i32] : vector<4xf16> loc(#loc4)
    %505 = llvm.insertelement %504, %503[%33 : i32] : vector<4xf16> loc(#loc4)
    %506 = llvm.getelementptr %483[%444] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %507 = llvm.bitcast %506 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %508 = llvm.load %507 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %509 = llvm.extractelement %508[%37 : i32] : vector<4xf16> loc(#loc4)
    %510 = llvm.insertelement %509, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %511 = llvm.extractelement %508[%40 : i32] : vector<4xf16> loc(#loc4)
    %512 = llvm.insertelement %511, %510[%40 : i32] : vector<4xf16> loc(#loc4)
    %513 = llvm.extractelement %508[%34 : i32] : vector<4xf16> loc(#loc4)
    %514 = llvm.insertelement %513, %512[%34 : i32] : vector<4xf16> loc(#loc4)
    %515 = llvm.extractelement %508[%33 : i32] : vector<4xf16> loc(#loc4)
    %516 = llvm.insertelement %515, %514[%33 : i32] : vector<4xf16> loc(#loc4)
    %517 = llvm.getelementptr %483[%451] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %518 = llvm.bitcast %517 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %519 = llvm.load %518 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %520 = llvm.extractelement %519[%37 : i32] : vector<4xf16> loc(#loc4)
    %521 = llvm.insertelement %520, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %522 = llvm.extractelement %519[%40 : i32] : vector<4xf16> loc(#loc4)
    %523 = llvm.insertelement %522, %521[%40 : i32] : vector<4xf16> loc(#loc4)
    %524 = llvm.extractelement %519[%34 : i32] : vector<4xf16> loc(#loc4)
    %525 = llvm.insertelement %524, %523[%34 : i32] : vector<4xf16> loc(#loc4)
    %526 = llvm.extractelement %519[%33 : i32] : vector<4xf16> loc(#loc4)
    %527 = llvm.insertelement %526, %525[%33 : i32] : vector<4xf16> loc(#loc4)
    %528 = llvm.getelementptr %483[%458] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %529 = llvm.bitcast %528 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %530 = llvm.load %529 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %531 = llvm.extractelement %530[%37 : i32] : vector<4xf16> loc(#loc4)
    %532 = llvm.insertelement %531, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %533 = llvm.extractelement %530[%40 : i32] : vector<4xf16> loc(#loc4)
    %534 = llvm.insertelement %533, %532[%40 : i32] : vector<4xf16> loc(#loc4)
    %535 = llvm.extractelement %530[%34 : i32] : vector<4xf16> loc(#loc4)
    %536 = llvm.insertelement %535, %534[%34 : i32] : vector<4xf16> loc(#loc4)
    %537 = llvm.extractelement %530[%33 : i32] : vector<4xf16> loc(#loc4)
    %538 = llvm.insertelement %537, %536[%33 : i32] : vector<4xf16> loc(#loc4)
    %539 = llvm.getelementptr %483[%465] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %540 = llvm.bitcast %539 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %541 = llvm.load %540 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %542 = llvm.extractelement %541[%37 : i32] : vector<4xf16> loc(#loc4)
    %543 = llvm.insertelement %542, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %544 = llvm.extractelement %541[%40 : i32] : vector<4xf16> loc(#loc4)
    %545 = llvm.insertelement %544, %543[%40 : i32] : vector<4xf16> loc(#loc4)
    %546 = llvm.extractelement %541[%34 : i32] : vector<4xf16> loc(#loc4)
    %547 = llvm.insertelement %546, %545[%34 : i32] : vector<4xf16> loc(#loc4)
    %548 = llvm.extractelement %541[%33 : i32] : vector<4xf16> loc(#loc4)
    %549 = llvm.insertelement %548, %547[%33 : i32] : vector<4xf16> loc(#loc4)
    %550 = llvm.getelementptr %483[%472] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %551 = llvm.bitcast %550 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %552 = llvm.load %551 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %553 = llvm.extractelement %552[%37 : i32] : vector<4xf16> loc(#loc4)
    %554 = llvm.insertelement %553, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %555 = llvm.extractelement %552[%40 : i32] : vector<4xf16> loc(#loc4)
    %556 = llvm.insertelement %555, %554[%40 : i32] : vector<4xf16> loc(#loc4)
    %557 = llvm.extractelement %552[%34 : i32] : vector<4xf16> loc(#loc4)
    %558 = llvm.insertelement %557, %556[%34 : i32] : vector<4xf16> loc(#loc4)
    %559 = llvm.extractelement %552[%33 : i32] : vector<4xf16> loc(#loc4)
    %560 = llvm.insertelement %559, %558[%33 : i32] : vector<4xf16> loc(#loc4)
    %561 = llvm.getelementptr %483[%479] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %562 = llvm.bitcast %561 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %563 = llvm.load %562 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %564 = llvm.extractelement %563[%37 : i32] : vector<4xf16> loc(#loc4)
    %565 = llvm.insertelement %564, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %566 = llvm.extractelement %563[%40 : i32] : vector<4xf16> loc(#loc4)
    %567 = llvm.insertelement %566, %565[%40 : i32] : vector<4xf16> loc(#loc4)
    %568 = llvm.extractelement %563[%34 : i32] : vector<4xf16> loc(#loc4)
    %569 = llvm.insertelement %568, %567[%34 : i32] : vector<4xf16> loc(#loc4)
    %570 = llvm.extractelement %563[%33 : i32] : vector<4xf16> loc(#loc4)
    %571 = llvm.insertelement %570, %569[%33 : i32] : vector<4xf16> loc(#loc4)
    %572 = llvm.extractvalue %257[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %573 = llvm.extractvalue %257[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %574 = llvm.extractvalue %257[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %575 = llvm.extractvalue %257[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %576 = llvm.addrspacecast %572 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %577 = llvm.load %576 : !llvm.ptr<i32> loc(#loc3)
    %578 = llvm.bitcast %577 : i32 to vector<2xf16> loc(#loc3)
    %579 = llvm.extractelement %578[%17 : i32] : vector<2xf16> loc(#loc3)
    %580 = llvm.extractelement %578[%15 : i32] : vector<2xf16> loc(#loc3)
    %581 = llvm.addrspacecast %573 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %582 = llvm.load %581 : !llvm.ptr<i32> loc(#loc3)
    %583 = llvm.bitcast %582 : i32 to vector<2xf16> loc(#loc3)
    %584 = llvm.extractelement %583[%17 : i32] : vector<2xf16> loc(#loc3)
    %585 = llvm.extractelement %583[%15 : i32] : vector<2xf16> loc(#loc3)
    %586 = llvm.addrspacecast %574 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %587 = llvm.load %586 : !llvm.ptr<i32> loc(#loc3)
    %588 = llvm.bitcast %587 : i32 to vector<2xf16> loc(#loc3)
    %589 = llvm.extractelement %588[%17 : i32] : vector<2xf16> loc(#loc3)
    %590 = llvm.extractelement %588[%15 : i32] : vector<2xf16> loc(#loc3)
    %591 = llvm.addrspacecast %575 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %592 = llvm.load %591 : !llvm.ptr<i32> loc(#loc3)
    %593 = llvm.bitcast %592 : i32 to vector<2xf16> loc(#loc3)
    %594 = llvm.extractelement %593[%17 : i32] : vector<2xf16> loc(#loc3)
    %595 = llvm.extractelement %593[%15 : i32] : vector<2xf16> loc(#loc3)
    rocdl.barrier loc(#loc3)
    %596 = llvm.mul %37, %36  : i32 loc(#loc3)
    %597 = llvm.add %596, %37  : i32 loc(#loc3)
    %598 = llvm.add %597, %310  : i32 loc(#loc3)
    %599 = llvm.getelementptr %307[%598] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %600 = llvm.udiv %140, %40  : i32 loc(#loc3)
    %601 = llvm.urem %600, %40  : i32 loc(#loc3)
    %602 = llvm.mul %140, %36  : i32 loc(#loc3)
    %603 = llvm.udiv %141, %40  : i32 loc(#loc3)
    %604 = llvm.xor %603, %601  : i32 loc(#loc3)
    %605 = llvm.mul %604, %40  : i32 loc(#loc3)
    %606 = llvm.urem %141, %40  : i32 loc(#loc3)
    %607 = llvm.udiv %606, %40  : i32 loc(#loc3)
    %608 = llvm.mul %607, %40  : i32 loc(#loc3)
    %609 = llvm.add %605, %608  : i32 loc(#loc3)
    %610 = llvm.mul %609, %40  : i32 loc(#loc3)
    %611 = llvm.add %602, %610  : i32 loc(#loc3)
    %612 = llvm.add %611, %37  : i32 loc(#loc3)
    %613 = llvm.getelementptr %599[%612] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %614 = llvm.getelementptr %613[%597] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %615 = llvm.add %596, %40  : i32 loc(#loc3)
    %616 = llvm.getelementptr %613[%615] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %617 = llvm.add %596, %34  : i32 loc(#loc3)
    %618 = llvm.getelementptr %613[%617] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %619 = llvm.add %596, %33  : i32 loc(#loc3)
    %620 = llvm.getelementptr %613[%619] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %621 = llvm.add %596, %39  : i32 loc(#loc3)
    %622 = llvm.getelementptr %613[%621] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %623 = llvm.add %596, %22  : i32 loc(#loc3)
    %624 = llvm.getelementptr %613[%623] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %625 = llvm.add %596, %21  : i32 loc(#loc3)
    %626 = llvm.getelementptr %613[%625] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %627 = llvm.add %596, %20  : i32 loc(#loc3)
    %628 = llvm.getelementptr %613[%627] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %629 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %630 = llvm.insertelement %579, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %631 = llvm.bitcast %614 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %630, %631 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %632 = llvm.insertelement %580, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %633 = llvm.bitcast %616 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %632, %633 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %634 = llvm.insertelement %584, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %635 = llvm.bitcast %618 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %634, %635 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %636 = llvm.insertelement %585, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %637 = llvm.bitcast %620 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %636, %637 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %638 = llvm.insertelement %589, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %639 = llvm.bitcast %622 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %638, %639 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %640 = llvm.insertelement %590, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %641 = llvm.bitcast %624 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %640, %641 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %642 = llvm.insertelement %594, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %643 = llvm.bitcast %626 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %642, %643 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %644 = llvm.insertelement %595, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %645 = llvm.bitcast %628 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %644, %645 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    rocdl.barrier loc(#loc3)
    %646 = llvm.select %381, %18, %37 : i1, i32 loc(#loc3)
    %647 = llvm.add %646, %37  : i32 loc(#loc3)
    %648 = llvm.add %647, %131  : i32 loc(#loc3)
    %649 = llvm.add %130, %37  : i32 loc(#loc3)
    %650 = llvm.add %649, %37  : i32 loc(#loc3)
    %651 = llvm.add %650, %648  : i32 loc(#loc3)
    %652 = llvm.add %646, %36  : i32 loc(#loc3)
    %653 = llvm.add %652, %131  : i32 loc(#loc3)
    %654 = llvm.add %650, %653  : i32 loc(#loc3)
    %655 = llvm.add %646, %41  : i32 loc(#loc3)
    %656 = llvm.add %655, %131  : i32 loc(#loc3)
    %657 = llvm.add %650, %656  : i32 loc(#loc3)
    %658 = llvm.add %646, %11  : i32 loc(#loc3)
    %659 = llvm.add %658, %131  : i32 loc(#loc3)
    %660 = llvm.add %650, %659  : i32 loc(#loc3)
    %661 = llvm.add %649, %10  : i32 loc(#loc3)
    %662 = llvm.add %661, %648  : i32 loc(#loc3)
    %663 = llvm.add %661, %653  : i32 loc(#loc3)
    %664 = llvm.add %661, %656  : i32 loc(#loc3)
    %665 = llvm.add %661, %659  : i32 loc(#loc3)
    %666 = llvm.add %649, %9  : i32 loc(#loc3)
    %667 = llvm.add %666, %648  : i32 loc(#loc3)
    %668 = llvm.add %666, %653  : i32 loc(#loc3)
    %669 = llvm.add %666, %656  : i32 loc(#loc3)
    %670 = llvm.add %666, %659  : i32 loc(#loc3)
    %671 = llvm.add %649, %8  : i32 loc(#loc3)
    %672 = llvm.add %671, %648  : i32 loc(#loc3)
    %673 = llvm.add %671, %653  : i32 loc(#loc3)
    %674 = llvm.add %671, %656  : i32 loc(#loc3)
    %675 = llvm.add %671, %659  : i32 loc(#loc3)
    %676 = llvm.add %649, %7  : i32 loc(#loc3)
    %677 = llvm.add %676, %648  : i32 loc(#loc3)
    %678 = llvm.add %676, %653  : i32 loc(#loc3)
    %679 = llvm.add %676, %656  : i32 loc(#loc3)
    %680 = llvm.add %676, %659  : i32 loc(#loc3)
    %681 = llvm.add %649, %6  : i32 loc(#loc3)
    %682 = llvm.add %681, %648  : i32 loc(#loc3)
    %683 = llvm.add %681, %653  : i32 loc(#loc3)
    %684 = llvm.add %681, %656  : i32 loc(#loc3)
    %685 = llvm.add %681, %659  : i32 loc(#loc3)
    %686 = llvm.add %649, %5  : i32 loc(#loc3)
    %687 = llvm.add %686, %648  : i32 loc(#loc3)
    %688 = llvm.add %686, %653  : i32 loc(#loc3)
    %689 = llvm.add %686, %656  : i32 loc(#loc3)
    %690 = llvm.add %686, %659  : i32 loc(#loc3)
    %691 = llvm.add %649, %4  : i32 loc(#loc3)
    %692 = llvm.add %691, %648  : i32 loc(#loc3)
    %693 = llvm.add %691, %653  : i32 loc(#loc3)
    %694 = llvm.add %691, %656  : i32 loc(#loc3)
    %695 = llvm.add %691, %659  : i32 loc(#loc3)
    %696 = llvm.sub %37, %37  : i32 loc(#loc3)
    %697 = llvm.getelementptr %307[%696] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %698 = llvm.getelementptr %697[%651] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %699 = llvm.bitcast %698 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %700 = llvm.load %699 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %701 = llvm.extractelement %700[%37 : i32] : vector<1xf16> loc(#loc3)
    %702 = llvm.insertelement %701, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %703 = llvm.getelementptr %697[%654] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %704 = llvm.bitcast %703 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %705 = llvm.load %704 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %706 = llvm.extractelement %705[%37 : i32] : vector<1xf16> loc(#loc3)
    %707 = llvm.insertelement %706, %702[%40 : i32] : vector<4xf16> loc(#loc3)
    %708 = llvm.getelementptr %697[%657] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %709 = llvm.bitcast %708 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %710 = llvm.load %709 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %711 = llvm.extractelement %710[%37 : i32] : vector<1xf16> loc(#loc3)
    %712 = llvm.insertelement %711, %707[%34 : i32] : vector<4xf16> loc(#loc3)
    %713 = llvm.getelementptr %697[%660] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %714 = llvm.bitcast %713 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %715 = llvm.load %714 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %716 = llvm.extractelement %715[%37 : i32] : vector<1xf16> loc(#loc3)
    %717 = llvm.insertelement %716, %712[%33 : i32] : vector<4xf16> loc(#loc3)
    %718 = llvm.getelementptr %697[%662] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %719 = llvm.bitcast %718 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %720 = llvm.load %719 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %721 = llvm.extractelement %720[%37 : i32] : vector<1xf16> loc(#loc3)
    %722 = llvm.insertelement %721, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %723 = llvm.getelementptr %697[%663] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %724 = llvm.bitcast %723 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %725 = llvm.load %724 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %726 = llvm.extractelement %725[%37 : i32] : vector<1xf16> loc(#loc3)
    %727 = llvm.insertelement %726, %722[%40 : i32] : vector<4xf16> loc(#loc3)
    %728 = llvm.getelementptr %697[%664] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %729 = llvm.bitcast %728 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %730 = llvm.load %729 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %731 = llvm.extractelement %730[%37 : i32] : vector<1xf16> loc(#loc3)
    %732 = llvm.insertelement %731, %727[%34 : i32] : vector<4xf16> loc(#loc3)
    %733 = llvm.getelementptr %697[%665] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %734 = llvm.bitcast %733 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %735 = llvm.load %734 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %736 = llvm.extractelement %735[%37 : i32] : vector<1xf16> loc(#loc3)
    %737 = llvm.insertelement %736, %732[%33 : i32] : vector<4xf16> loc(#loc3)
    %738 = llvm.getelementptr %697[%667] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %739 = llvm.bitcast %738 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %740 = llvm.load %739 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %741 = llvm.extractelement %740[%37 : i32] : vector<1xf16> loc(#loc3)
    %742 = llvm.insertelement %741, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %743 = llvm.getelementptr %697[%668] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %744 = llvm.bitcast %743 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %745 = llvm.load %744 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %746 = llvm.extractelement %745[%37 : i32] : vector<1xf16> loc(#loc3)
    %747 = llvm.insertelement %746, %742[%40 : i32] : vector<4xf16> loc(#loc3)
    %748 = llvm.getelementptr %697[%669] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %749 = llvm.bitcast %748 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %750 = llvm.load %749 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %751 = llvm.extractelement %750[%37 : i32] : vector<1xf16> loc(#loc3)
    %752 = llvm.insertelement %751, %747[%34 : i32] : vector<4xf16> loc(#loc3)
    %753 = llvm.getelementptr %697[%670] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %754 = llvm.bitcast %753 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %755 = llvm.load %754 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %756 = llvm.extractelement %755[%37 : i32] : vector<1xf16> loc(#loc3)
    %757 = llvm.insertelement %756, %752[%33 : i32] : vector<4xf16> loc(#loc3)
    %758 = llvm.getelementptr %697[%672] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %759 = llvm.bitcast %758 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %760 = llvm.load %759 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %761 = llvm.extractelement %760[%37 : i32] : vector<1xf16> loc(#loc3)
    %762 = llvm.insertelement %761, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %763 = llvm.getelementptr %697[%673] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %764 = llvm.bitcast %763 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %765 = llvm.load %764 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %766 = llvm.extractelement %765[%37 : i32] : vector<1xf16> loc(#loc3)
    %767 = llvm.insertelement %766, %762[%40 : i32] : vector<4xf16> loc(#loc3)
    %768 = llvm.getelementptr %697[%674] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %769 = llvm.bitcast %768 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %770 = llvm.load %769 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %771 = llvm.extractelement %770[%37 : i32] : vector<1xf16> loc(#loc3)
    %772 = llvm.insertelement %771, %767[%34 : i32] : vector<4xf16> loc(#loc3)
    %773 = llvm.getelementptr %697[%675] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %774 = llvm.bitcast %773 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %775 = llvm.load %774 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %776 = llvm.extractelement %775[%37 : i32] : vector<1xf16> loc(#loc3)
    %777 = llvm.insertelement %776, %772[%33 : i32] : vector<4xf16> loc(#loc3)
    %778 = llvm.getelementptr %697[%677] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %779 = llvm.bitcast %778 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %780 = llvm.load %779 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %781 = llvm.extractelement %780[%37 : i32] : vector<1xf16> loc(#loc3)
    %782 = llvm.insertelement %781, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %783 = llvm.getelementptr %697[%678] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %784 = llvm.bitcast %783 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %785 = llvm.load %784 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %786 = llvm.extractelement %785[%37 : i32] : vector<1xf16> loc(#loc3)
    %787 = llvm.insertelement %786, %782[%40 : i32] : vector<4xf16> loc(#loc3)
    %788 = llvm.getelementptr %697[%679] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %789 = llvm.bitcast %788 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %790 = llvm.load %789 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %791 = llvm.extractelement %790[%37 : i32] : vector<1xf16> loc(#loc3)
    %792 = llvm.insertelement %791, %787[%34 : i32] : vector<4xf16> loc(#loc3)
    %793 = llvm.getelementptr %697[%680] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %794 = llvm.bitcast %793 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %795 = llvm.load %794 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %796 = llvm.extractelement %795[%37 : i32] : vector<1xf16> loc(#loc3)
    %797 = llvm.insertelement %796, %792[%33 : i32] : vector<4xf16> loc(#loc3)
    %798 = llvm.getelementptr %697[%682] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %799 = llvm.bitcast %798 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %800 = llvm.load %799 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %801 = llvm.extractelement %800[%37 : i32] : vector<1xf16> loc(#loc3)
    %802 = llvm.insertelement %801, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %803 = llvm.getelementptr %697[%683] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %804 = llvm.bitcast %803 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %805 = llvm.load %804 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %806 = llvm.extractelement %805[%37 : i32] : vector<1xf16> loc(#loc3)
    %807 = llvm.insertelement %806, %802[%40 : i32] : vector<4xf16> loc(#loc3)
    %808 = llvm.getelementptr %697[%684] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %809 = llvm.bitcast %808 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %810 = llvm.load %809 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %811 = llvm.extractelement %810[%37 : i32] : vector<1xf16> loc(#loc3)
    %812 = llvm.insertelement %811, %807[%34 : i32] : vector<4xf16> loc(#loc3)
    %813 = llvm.getelementptr %697[%685] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %814 = llvm.bitcast %813 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %815 = llvm.load %814 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %816 = llvm.extractelement %815[%37 : i32] : vector<1xf16> loc(#loc3)
    %817 = llvm.insertelement %816, %812[%33 : i32] : vector<4xf16> loc(#loc3)
    %818 = llvm.getelementptr %697[%687] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %819 = llvm.bitcast %818 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %820 = llvm.load %819 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %821 = llvm.extractelement %820[%37 : i32] : vector<1xf16> loc(#loc3)
    %822 = llvm.insertelement %821, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %823 = llvm.getelementptr %697[%688] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %824 = llvm.bitcast %823 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %825 = llvm.load %824 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %826 = llvm.extractelement %825[%37 : i32] : vector<1xf16> loc(#loc3)
    %827 = llvm.insertelement %826, %822[%40 : i32] : vector<4xf16> loc(#loc3)
    %828 = llvm.getelementptr %697[%689] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %829 = llvm.bitcast %828 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %830 = llvm.load %829 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %831 = llvm.extractelement %830[%37 : i32] : vector<1xf16> loc(#loc3)
    %832 = llvm.insertelement %831, %827[%34 : i32] : vector<4xf16> loc(#loc3)
    %833 = llvm.getelementptr %697[%690] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %834 = llvm.bitcast %833 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %835 = llvm.load %834 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %836 = llvm.extractelement %835[%37 : i32] : vector<1xf16> loc(#loc3)
    %837 = llvm.insertelement %836, %832[%33 : i32] : vector<4xf16> loc(#loc3)
    %838 = llvm.getelementptr %697[%692] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %839 = llvm.bitcast %838 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %840 = llvm.load %839 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %841 = llvm.extractelement %840[%37 : i32] : vector<1xf16> loc(#loc3)
    %842 = llvm.insertelement %841, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %843 = llvm.getelementptr %697[%693] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %844 = llvm.bitcast %843 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %845 = llvm.load %844 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %846 = llvm.extractelement %845[%37 : i32] : vector<1xf16> loc(#loc3)
    %847 = llvm.insertelement %846, %842[%40 : i32] : vector<4xf16> loc(#loc3)
    %848 = llvm.getelementptr %697[%694] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %849 = llvm.bitcast %848 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %850 = llvm.load %849 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %851 = llvm.extractelement %850[%37 : i32] : vector<1xf16> loc(#loc3)
    %852 = llvm.insertelement %851, %847[%34 : i32] : vector<4xf16> loc(#loc3)
    %853 = llvm.getelementptr %697[%695] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %854 = llvm.bitcast %853 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %855 = llvm.load %854 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %856 = llvm.extractelement %855[%37 : i32] : vector<1xf16> loc(#loc3)
    %857 = llvm.insertelement %856, %852[%33 : i32] : vector<4xf16> loc(#loc3)
    %858 = llvm.extractvalue %255[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %859 = llvm.extractvalue %255[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %860 = llvm.extractvalue %255[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %861 = llvm.extractvalue %255[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %862 = llvm.extractvalue %255[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %863 = llvm.extractvalue %255[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %864 = llvm.extractvalue %255[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %865 = llvm.extractvalue %255[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %866 = llvm.extractvalue %255[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %867 = llvm.extractvalue %255[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %868 = llvm.extractvalue %255[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %869 = llvm.extractvalue %255[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %870 = llvm.extractvalue %255[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %871 = llvm.extractvalue %255[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %872 = llvm.extractvalue %255[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %873 = llvm.extractvalue %255[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %874 = llvm.mlir.undef : vector<16xf32> loc(#loc20)
    %875 = llvm.insertelement %858, %874[%37 : i32] : vector<16xf32> loc(#loc20)
    %876 = llvm.insertelement %859, %875[%40 : i32] : vector<16xf32> loc(#loc20)
    %877 = llvm.insertelement %860, %876[%34 : i32] : vector<16xf32> loc(#loc20)
    %878 = llvm.insertelement %861, %877[%33 : i32] : vector<16xf32> loc(#loc20)
    %879 = llvm.insertelement %862, %878[%39 : i32] : vector<16xf32> loc(#loc20)
    %880 = llvm.insertelement %863, %879[%22 : i32] : vector<16xf32> loc(#loc20)
    %881 = llvm.insertelement %864, %880[%21 : i32] : vector<16xf32> loc(#loc20)
    %882 = llvm.insertelement %865, %881[%20 : i32] : vector<16xf32> loc(#loc20)
    %883 = llvm.insertelement %866, %882[%38 : i32] : vector<16xf32> loc(#loc20)
    %884 = llvm.insertelement %867, %883[%32 : i32] : vector<16xf32> loc(#loc20)
    %885 = llvm.insertelement %868, %884[%31 : i32] : vector<16xf32> loc(#loc20)
    %886 = llvm.insertelement %869, %885[%30 : i32] : vector<16xf32> loc(#loc20)
    %887 = llvm.insertelement %870, %886[%3 : i32] : vector<16xf32> loc(#loc20)
    %888 = llvm.insertelement %871, %887[%2 : i32] : vector<16xf32> loc(#loc20)
    %889 = llvm.insertelement %872, %888[%1 : i32] : vector<16xf32> loc(#loc20)
    %890 = llvm.insertelement %873, %889[%0 : i32] : vector<16xf32> loc(#loc20)
    %891 = rocdl.mfma.f32.32x32x8f16 %494, %717, %890, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %892 = rocdl.mfma.f32.32x32x8f16 %505, %737, %891, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %893 = rocdl.mfma.f32.32x32x8f16 %516, %757, %892, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %894 = rocdl.mfma.f32.32x32x8f16 %527, %777, %893, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %895 = rocdl.mfma.f32.32x32x8f16 %538, %797, %894, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %896 = rocdl.mfma.f32.32x32x8f16 %549, %817, %895, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %897 = rocdl.mfma.f32.32x32x8f16 %560, %837, %896, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %898 = rocdl.mfma.f32.32x32x8f16 %571, %857, %897, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %899 = llvm.extractelement %898[%37 : i32] : vector<16xf32> loc(#loc20)
    %900 = llvm.extractelement %898[%40 : i32] : vector<16xf32> loc(#loc20)
    %901 = llvm.extractelement %898[%34 : i32] : vector<16xf32> loc(#loc20)
    %902 = llvm.extractelement %898[%33 : i32] : vector<16xf32> loc(#loc20)
    %903 = llvm.extractelement %898[%39 : i32] : vector<16xf32> loc(#loc20)
    %904 = llvm.extractelement %898[%22 : i32] : vector<16xf32> loc(#loc20)
    %905 = llvm.extractelement %898[%21 : i32] : vector<16xf32> loc(#loc20)
    %906 = llvm.extractelement %898[%20 : i32] : vector<16xf32> loc(#loc20)
    %907 = llvm.extractelement %898[%38 : i32] : vector<16xf32> loc(#loc20)
    %908 = llvm.extractelement %898[%32 : i32] : vector<16xf32> loc(#loc20)
    %909 = llvm.extractelement %898[%31 : i32] : vector<16xf32> loc(#loc20)
    %910 = llvm.extractelement %898[%30 : i32] : vector<16xf32> loc(#loc20)
    %911 = llvm.extractelement %898[%3 : i32] : vector<16xf32> loc(#loc20)
    %912 = llvm.extractelement %898[%2 : i32] : vector<16xf32> loc(#loc20)
    %913 = llvm.extractelement %898[%1 : i32] : vector<16xf32> loc(#loc20)
    %914 = llvm.extractelement %898[%0 : i32] : vector<16xf32> loc(#loc20)
    %915 = llvm.insertvalue %899, %144[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %916 = llvm.insertvalue %900, %915[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %917 = llvm.insertvalue %901, %916[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %918 = llvm.insertvalue %902, %917[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %919 = llvm.insertvalue %903, %918[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %920 = llvm.insertvalue %904, %919[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %921 = llvm.insertvalue %905, %920[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %922 = llvm.insertvalue %906, %921[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %923 = llvm.insertvalue %907, %922[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %924 = llvm.insertvalue %908, %923[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %925 = llvm.insertvalue %909, %924[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %926 = llvm.insertvalue %910, %925[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %927 = llvm.insertvalue %911, %926[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %928 = llvm.insertvalue %912, %927[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %929 = llvm.insertvalue %913, %928[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %930 = llvm.insertvalue %914, %929[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %931 = llvm.extractvalue %256[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %932 = llvm.extractvalue %256[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %933 = llvm.extractvalue %256[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %934 = llvm.extractvalue %256[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %935 = llvm.extractvalue %256[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %936 = llvm.extractvalue %256[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %937 = llvm.extractvalue %256[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %938 = llvm.extractvalue %256[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %939 = llvm.getelementptr %259[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %940 = llvm.getelementptr %931[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %941 = llvm.getelementptr %260[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %942 = llvm.getelementptr %932[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %943 = llvm.getelementptr %261[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %944 = llvm.getelementptr %933[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %945 = llvm.getelementptr %262[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %946 = llvm.getelementptr %934[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %947 = llvm.getelementptr %263[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %948 = llvm.getelementptr %935[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %949 = llvm.getelementptr %264[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %950 = llvm.getelementptr %936[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %951 = llvm.getelementptr %265[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %952 = llvm.getelementptr %937[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %953 = llvm.getelementptr %266[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %954 = llvm.getelementptr %938[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %955 = llvm.insertvalue %939, %208[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %956 = llvm.insertvalue %940, %955[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %957 = llvm.insertvalue %941, %956[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %958 = llvm.insertvalue %942, %957[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %959 = llvm.insertvalue %943, %958[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %960 = llvm.insertvalue %944, %959[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %961 = llvm.insertvalue %945, %960[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %962 = llvm.insertvalue %946, %961[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %963 = llvm.insertvalue %947, %962[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %964 = llvm.insertvalue %948, %963[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %965 = llvm.insertvalue %949, %964[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %966 = llvm.insertvalue %950, %965[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %967 = llvm.insertvalue %951, %966[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %968 = llvm.insertvalue %952, %967[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %969 = llvm.insertvalue %953, %968[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %970 = llvm.insertvalue %954, %969[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %971 = llvm.extractvalue %257[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %972 = llvm.extractvalue %257[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %973 = llvm.extractvalue %257[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %974 = llvm.extractvalue %257[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %975 = llvm.getelementptr %572[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %976 = llvm.getelementptr %971[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %977 = llvm.getelementptr %573[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %978 = llvm.getelementptr %972[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %979 = llvm.getelementptr %574[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %980 = llvm.getelementptr %973[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %981 = llvm.getelementptr %575[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %982 = llvm.getelementptr %974[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %983 = llvm.insertvalue %975, %244[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %984 = llvm.insertvalue %976, %983[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %985 = llvm.insertvalue %977, %984[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %986 = llvm.insertvalue %978, %985[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %987 = llvm.insertvalue %979, %986[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %988 = llvm.insertvalue %980, %987[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %989 = llvm.insertvalue %981, %988[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %990 = llvm.insertvalue %982, %989[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %991 = llvm.add %254, %41  : i32 loc(#loc6)
    llvm.br ^bb1(%991, %930, %970, %990 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc6)
  ^bb3:  // pred: ^bb1
    %992 = llvm.mul %164, %arg5  : i32 loc(#loc15)
    %993 = llvm.mul %165, %arg5  : i32 loc(#loc15)
    %994 = llvm.mul %166, %arg5  : i32 loc(#loc15)
    %995 = llvm.mul %167, %arg5  : i32 loc(#loc15)
    %996 = llvm.mul %168, %arg5  : i32 loc(#loc15)
    %997 = llvm.mul %169, %arg5  : i32 loc(#loc15)
    %998 = llvm.mul %170, %arg5  : i32 loc(#loc15)
    %999 = llvm.mul %171, %arg5  : i32 loc(#loc15)
    %1000 = llvm.mul %172, %arg5  : i32 loc(#loc15)
    %1001 = llvm.mul %173, %arg5  : i32 loc(#loc15)
    %1002 = llvm.mul %174, %arg5  : i32 loc(#loc15)
    %1003 = llvm.mul %175, %arg5  : i32 loc(#loc15)
    %1004 = llvm.mul %176, %arg5  : i32 loc(#loc15)
    %1005 = llvm.mul %177, %arg5  : i32 loc(#loc15)
    %1006 = llvm.mul %178, %arg5  : i32 loc(#loc15)
    %1007 = llvm.mul %179, %arg5  : i32 loc(#loc15)
    %1008 = llvm.getelementptr %arg2[%992] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1009 = llvm.getelementptr %arg2[%993] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1010 = llvm.getelementptr %arg2[%994] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1011 = llvm.getelementptr %arg2[%995] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1012 = llvm.getelementptr %arg2[%996] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1013 = llvm.getelementptr %arg2[%997] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1014 = llvm.getelementptr %arg2[%998] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1015 = llvm.getelementptr %arg2[%999] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1016 = llvm.getelementptr %arg2[%1000] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1017 = llvm.getelementptr %arg2[%1001] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1018 = llvm.getelementptr %arg2[%1002] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1019 = llvm.getelementptr %arg2[%1003] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1020 = llvm.getelementptr %arg2[%1004] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1021 = llvm.getelementptr %arg2[%1005] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1022 = llvm.getelementptr %arg2[%1006] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1023 = llvm.getelementptr %arg2[%1007] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1024 = llvm.getelementptr %1008[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1025 = llvm.getelementptr %1009[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1026 = llvm.getelementptr %1010[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1027 = llvm.getelementptr %1011[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1028 = llvm.getelementptr %1012[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1029 = llvm.getelementptr %1013[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1030 = llvm.getelementptr %1014[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1031 = llvm.getelementptr %1015[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1032 = llvm.getelementptr %1016[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1033 = llvm.getelementptr %1017[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1034 = llvm.getelementptr %1018[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1035 = llvm.getelementptr %1019[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1036 = llvm.getelementptr %1020[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1037 = llvm.getelementptr %1021[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1038 = llvm.getelementptr %1022[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1039 = llvm.getelementptr %1023[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1040 = llvm.extractvalue %255[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1041 = llvm.extractvalue %255[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1042 = llvm.extractvalue %255[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1043 = llvm.extractvalue %255[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1044 = llvm.extractvalue %255[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1045 = llvm.extractvalue %255[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1046 = llvm.extractvalue %255[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1047 = llvm.extractvalue %255[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1048 = llvm.extractvalue %255[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1049 = llvm.extractvalue %255[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1050 = llvm.extractvalue %255[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1051 = llvm.extractvalue %255[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1052 = llvm.extractvalue %255[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1053 = llvm.extractvalue %255[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1054 = llvm.extractvalue %255[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1055 = llvm.extractvalue %255[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1056 = llvm.mul %69, %36  : i32 loc(#loc18)
    %1057 = llvm.add %1056, %131  : i32 loc(#loc18)
    %1058 = llvm.mul %1057, %40  : i32 loc(#loc18)
    %1059 = llvm.icmp "slt" %1058, %36 : i32 loc(#loc18)
    %1060 = llvm.and %16, %1059  : i1 loc(#loc18)
    %1061 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1062 = llvm.insertelement %1040, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1063 = llvm.bitcast %1062 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1063, %1024 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1064 = llvm.insertelement %1041, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1065 = llvm.bitcast %1064 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1065, %1025 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1066 = llvm.insertelement %1042, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1067 = llvm.bitcast %1066 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1067, %1026 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1068 = llvm.insertelement %1043, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1069 = llvm.bitcast %1068 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1069, %1027 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1070 = llvm.insertelement %1044, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1071 = llvm.bitcast %1070 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1071, %1028 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1072 = llvm.insertelement %1045, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1073 = llvm.bitcast %1072 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1073, %1029 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1074 = llvm.insertelement %1046, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1075 = llvm.bitcast %1074 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1075, %1030 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1076 = llvm.insertelement %1047, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1077 = llvm.bitcast %1076 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1077, %1031 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1078 = llvm.insertelement %1048, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1079 = llvm.bitcast %1078 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1079, %1032 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1080 = llvm.insertelement %1049, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1081 = llvm.bitcast %1080 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1081, %1033 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1082 = llvm.insertelement %1050, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1083 = llvm.bitcast %1082 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1083, %1034 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1084 = llvm.insertelement %1051, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1085 = llvm.bitcast %1084 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1085, %1035 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1086 = llvm.insertelement %1052, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1087 = llvm.bitcast %1086 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1087, %1036 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1088 = llvm.insertelement %1053, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1089 = llvm.bitcast %1088 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1089, %1037 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1090 = llvm.insertelement %1054, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1091 = llvm.bitcast %1090 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1091, %1038 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    %1092 = llvm.insertelement %1055, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1093 = llvm.bitcast %1092 : vector<1xf32> to i32 loc(#loc18)
    scf.if %1060 {
      llvm.store %1093, %1039 : !llvm.ptr<f32, 1> loc(#loc18)
    } loc(#loc18)
    llvm.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc20 = loc(fused[#loc1, #loc2])


// -----// IR Dump After SCFToControlFlow (convert-scf-to-cf) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
module attributes {"triton_gpu.compute-capability" = 0 : i32, triton_gpu.externs = {library_0 = "/triton/python/triton/third_party/hip/lib/bitcode/opencl.bc", library_1 = "/triton/python/triton/third_party/hip/lib/bitcode/ocml.bc", library_2 = "/triton/python/triton/third_party/hip/lib/bitcode/ockl.bc", library_3 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 8192 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public", "triton_gpu.num-tma-load" = 0 : i32, "triton_gpu.num-tma-store" = 0 : i32} {
    %0 = llvm.mlir.constant(15 : i32) : i32 loc(#loc20)
    %1 = llvm.mlir.constant(14 : i32) : i32 loc(#loc20)
    %2 = llvm.mlir.constant(13 : i32) : i32 loc(#loc20)
    %3 = llvm.mlir.constant(12 : i32) : i32 loc(#loc20)
    %4 = llvm.mlir.constant(1792 : i32) : i32 loc(#loc3)
    %5 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc3)
    %6 = llvm.mlir.constant(1280 : i32) : i32 loc(#loc3)
    %7 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc3)
    %8 = llvm.mlir.constant(768 : i32) : i32 loc(#loc3)
    %9 = llvm.mlir.constant(512 : i32) : i32 loc(#loc3)
    %10 = llvm.mlir.constant(256 : i32) : i32 loc(#loc3)
    %11 = llvm.mlir.constant(96 : i32) : i32 loc(#loc3)
    %12 = llvm.mlir.constant(56 : i32) : i32 loc(#loc4)
    %13 = llvm.mlir.constant(48 : i32) : i32 loc(#loc4)
    %14 = llvm.mlir.constant(40 : i32) : i32 loc(#loc4)
    %15 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %16 = llvm.mlir.constant(true) : i1 loc(#loc4)
    %17 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %18 = llvm.mlir.constant(128 : i32) : i32 loc(#loc6)
    %19 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc2)
    %20 = llvm.mlir.constant(7 : i32) : i32 loc(#loc7)
    %21 = llvm.mlir.constant(6 : i32) : i32 loc(#loc7)
    %22 = llvm.mlir.constant(5 : i32) : i32 loc(#loc7)
    %23 = llvm.mlir.constant(27 : i32) : i32 loc(#loc5)
    %24 = llvm.mlir.constant(26 : i32) : i32 loc(#loc5)
    %25 = llvm.mlir.constant(25 : i32) : i32 loc(#loc5)
    %26 = llvm.mlir.constant(24 : i32) : i32 loc(#loc5)
    %27 = llvm.mlir.constant(19 : i32) : i32 loc(#loc5)
    %28 = llvm.mlir.constant(18 : i32) : i32 loc(#loc5)
    %29 = llvm.mlir.constant(17 : i32) : i32 loc(#loc5)
    %30 = llvm.mlir.constant(11 : i32) : i32 loc(#loc5)
    %31 = llvm.mlir.constant(10 : i32) : i32 loc(#loc5)
    %32 = llvm.mlir.constant(9 : i32) : i32 loc(#loc5)
    %33 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %34 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %35 = llvm.mlir.constant(16 : i32) : i32 loc(#loc5)
    %36 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %37 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %38 = llvm.mlir.constant(8 : i32) : i32 loc(#loc5)
    %39 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %40 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %41 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %42 = rocdl.workitem.id.x : i32 loc(#loc5)
    %43 = llvm.urem %42, %41  : i32 loc(#loc5)
    %44 = llvm.udiv %42, %41  : i32 loc(#loc5)
    %45 = llvm.udiv %44, %40  : i32 loc(#loc5)
    %46 = llvm.urem %45, %39  : i32 loc(#loc5)
    %47 = llvm.udiv %43, %38  : i32 loc(#loc5)
    %48 = llvm.urem %47, %38  : i32 loc(#loc5)
    %49 = llvm.urem %46, %38  : i32 loc(#loc5)
    %50 = llvm.urem %48, %41  : i32 loc(#loc5)
    %51 = llvm.mul %49, %38  : i32 loc(#loc5)
    %52 = llvm.add %50, %51  : i32 loc(#loc5)
    %53 = llvm.mul %52, %40  : i32 loc(#loc5)
    %54 = llvm.urem %37, %40  : i32 loc(#loc5)
    %55 = llvm.urem %54, %40  : i32 loc(#loc5)
    %56 = llvm.mul %55, %41  : i32 loc(#loc5)
    %57 = llvm.add %53, %56  : i32 loc(#loc5)
    %58 = llvm.add %57, %37  : i32 loc(#loc5)
    %59 = llvm.add %57, %36  : i32 loc(#loc5)
    %60 = llvm.udiv %43, %39  : i32 loc(#loc5)
    %61 = llvm.urem %60, %35  : i32 loc(#loc5)
    %62 = llvm.urem %46, %39  : i32 loc(#loc5)
    %63 = llvm.urem %61, %41  : i32 loc(#loc5)
    %64 = llvm.mul %62, %35  : i32 loc(#loc5)
    %65 = llvm.add %63, %64  : i32 loc(#loc5)
    %66 = llvm.mul %65, %40  : i32 loc(#loc5)
    %67 = llvm.add %66, %56  : i32 loc(#loc5)
    %68 = llvm.add %67, %37  : i32 loc(#loc5)
    %69 = llvm.urem %44, %34  : i32 loc(#loc5)
    %70 = llvm.urem %69, %34  : i32 loc(#loc5)
    %71 = llvm.mul %70, %36  : i32 loc(#loc5)
    %72 = llvm.udiv %43, %36  : i32 loc(#loc5)
    %73 = llvm.mul %72, %39  : i32 loc(#loc5)
    %74 = llvm.add %73, %71  : i32 loc(#loc5)
    %75 = llvm.udiv %37, %40  : i32 loc(#loc5)
    %76 = llvm.urem %75, %40  : i32 loc(#loc5)
    %77 = llvm.urem %76, %40  : i32 loc(#loc5)
    %78 = llvm.mul %77, %41  : i32 loc(#loc5)
    %79 = llvm.add %74, %78  : i32 loc(#loc5)
    %80 = llvm.add %79, %37  : i32 loc(#loc5)
    %81 = llvm.add %79, %40  : i32 loc(#loc5)
    %82 = llvm.add %79, %34  : i32 loc(#loc5)
    %83 = llvm.add %79, %33  : i32 loc(#loc5)
    %84 = llvm.add %79, %38  : i32 loc(#loc5)
    %85 = llvm.add %79, %32  : i32 loc(#loc5)
    %86 = llvm.add %79, %31  : i32 loc(#loc5)
    %87 = llvm.add %79, %30  : i32 loc(#loc5)
    %88 = llvm.add %79, %35  : i32 loc(#loc5)
    %89 = llvm.add %79, %29  : i32 loc(#loc5)
    %90 = llvm.add %79, %28  : i32 loc(#loc5)
    %91 = llvm.add %79, %27  : i32 loc(#loc5)
    %92 = llvm.add %79, %26  : i32 loc(#loc5)
    %93 = llvm.add %79, %25  : i32 loc(#loc5)
    %94 = llvm.add %79, %24  : i32 loc(#loc5)
    %95 = llvm.add %79, %23  : i32 loc(#loc5)
    %96 = llvm.urem %44, %40  : i32 loc(#loc7)
    %97 = llvm.urem %43, %38  : i32 loc(#loc7)
    %98 = llvm.urem %96, %40  : i32 loc(#loc7)
    %99 = llvm.urem %97, %38  : i32 loc(#loc7)
    %100 = llvm.mul %98, %38  : i32 loc(#loc7)
    %101 = llvm.add %99, %100  : i32 loc(#loc7)
    %102 = llvm.mul %101, %38  : i32 loc(#loc7)
    %103 = llvm.add %102, %78  : i32 loc(#loc7)
    %104 = llvm.add %103, %37  : i32 loc(#loc7)
    %105 = llvm.add %103, %40  : i32 loc(#loc7)
    %106 = llvm.add %103, %34  : i32 loc(#loc7)
    %107 = llvm.add %103, %33  : i32 loc(#loc7)
    %108 = llvm.add %103, %39  : i32 loc(#loc7)
    %109 = llvm.add %103, %22  : i32 loc(#loc7)
    %110 = llvm.add %103, %21  : i32 loc(#loc7)
    %111 = llvm.add %103, %20  : i32 loc(#loc7)
    %112 = llvm.urem %43, %39  : i32 loc(#loc8)
    %113 = llvm.urem %112, %39  : i32 loc(#loc8)
    %114 = llvm.mul %98, %39  : i32 loc(#loc8)
    %115 = llvm.add %113, %114  : i32 loc(#loc8)
    %116 = llvm.mul %115, %38  : i32 loc(#loc8)
    %117 = llvm.mul %77, %36  : i32 loc(#loc8)
    %118 = llvm.add %116, %117  : i32 loc(#loc8)
    %119 = llvm.add %118, %37  : i32 loc(#loc8)
    %120 = llvm.add %118, %40  : i32 loc(#loc8)
    %121 = llvm.add %118, %34  : i32 loc(#loc8)
    %122 = llvm.add %118, %33  : i32 loc(#loc8)
    %123 = llvm.add %118, %39  : i32 loc(#loc8)
    %124 = llvm.add %118, %22  : i32 loc(#loc8)
    %125 = llvm.add %118, %21  : i32 loc(#loc8)
    %126 = llvm.add %118, %20  : i32 loc(#loc8)
    %127 = llvm.udiv %44, %34  : i32 loc(#loc8)
    %128 = llvm.urem %127, %34  : i32 loc(#loc8)
    %129 = llvm.urem %128, %40  : i32 loc(#loc8)
    %130 = llvm.mul %129, %36  : i32 loc(#loc8)
    %131 = llvm.urem %43, %36  : i32 loc(#loc8)
    %132 = llvm.add %131, %130  : i32 loc(#loc8)
    %133 = llvm.mul %55, %36  : i32 loc(#loc8)
    %134 = llvm.add %132, %133  : i32 loc(#loc8)
    %135 = llvm.add %134, %37  : i32 loc(#loc8)
    %136 = llvm.add %53, %37  : i32 loc(#loc4)
    %137 = llvm.add %102, %37  : i32 loc(#loc4)
    %138 = llvm.add %102, %39  : i32 loc(#loc4)
    %139 = llvm.add %53, %36  : i32 loc(#loc4)
    %140 = llvm.add %66, %37  : i32 loc(#loc3)
    %141 = llvm.add %116, %37  : i32 loc(#loc3)
    %142 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3> loc(#loc)
    %143 = llvm.bitcast %142 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3> loc(#loc)
    %144 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc2)
    %145 = llvm.insertvalue %19, %144[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %146 = llvm.insertvalue %19, %145[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %147 = llvm.insertvalue %19, %146[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %148 = llvm.insertvalue %19, %147[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %149 = llvm.insertvalue %19, %148[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %150 = llvm.insertvalue %19, %149[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %151 = llvm.insertvalue %19, %150[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %152 = llvm.insertvalue %19, %151[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %153 = llvm.insertvalue %19, %152[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %154 = llvm.insertvalue %19, %153[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %155 = llvm.insertvalue %19, %154[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %156 = llvm.insertvalue %19, %155[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %157 = llvm.insertvalue %19, %156[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %158 = llvm.insertvalue %19, %157[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %159 = llvm.insertvalue %19, %158[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %160 = llvm.insertvalue %19, %159[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %161 = llvm.add %58, %17  : i32 loc(#loc5)
    %162 = llvm.add %59, %17  : i32 loc(#loc5)
    %163 = llvm.add %68, %17  : i32 loc(#loc5)
    %164 = llvm.add %80, %17  : i32 loc(#loc5)
    %165 = llvm.add %81, %17  : i32 loc(#loc5)
    %166 = llvm.add %82, %17  : i32 loc(#loc5)
    %167 = llvm.add %83, %17  : i32 loc(#loc5)
    %168 = llvm.add %84, %17  : i32 loc(#loc5)
    %169 = llvm.add %85, %17  : i32 loc(#loc5)
    %170 = llvm.add %86, %17  : i32 loc(#loc5)
    %171 = llvm.add %87, %17  : i32 loc(#loc5)
    %172 = llvm.add %88, %17  : i32 loc(#loc5)
    %173 = llvm.add %89, %17  : i32 loc(#loc5)
    %174 = llvm.add %90, %17  : i32 loc(#loc5)
    %175 = llvm.add %91, %17  : i32 loc(#loc5)
    %176 = llvm.add %92, %17  : i32 loc(#loc5)
    %177 = llvm.add %93, %17  : i32 loc(#loc5)
    %178 = llvm.add %94, %17  : i32 loc(#loc5)
    %179 = llvm.add %95, %17  : i32 loc(#loc5)
    %180 = llvm.mul %161, %arg3  : i32 loc(#loc9)
    %181 = llvm.mul %162, %arg3  : i32 loc(#loc9)
    %182 = llvm.getelementptr %arg0[%180] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc5)
    %183 = llvm.getelementptr %arg0[%181] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc5)
    %184 = llvm.add %104, %17  : i32 loc(#loc7)
    %185 = llvm.add %105, %17  : i32 loc(#loc7)
    %186 = llvm.add %106, %17  : i32 loc(#loc7)
    %187 = llvm.add %107, %17  : i32 loc(#loc7)
    %188 = llvm.add %108, %17  : i32 loc(#loc7)
    %189 = llvm.add %109, %17  : i32 loc(#loc7)
    %190 = llvm.add %110, %17  : i32 loc(#loc7)
    %191 = llvm.add %111, %17  : i32 loc(#loc7)
    %192 = llvm.getelementptr %182[%184] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %193 = llvm.getelementptr %182[%185] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %194 = llvm.getelementptr %182[%186] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %195 = llvm.getelementptr %182[%187] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %196 = llvm.getelementptr %182[%188] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %197 = llvm.getelementptr %182[%189] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %198 = llvm.getelementptr %182[%190] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %199 = llvm.getelementptr %182[%191] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %200 = llvm.getelementptr %183[%184] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %201 = llvm.getelementptr %183[%185] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %202 = llvm.getelementptr %183[%186] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %203 = llvm.getelementptr %183[%187] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %204 = llvm.getelementptr %183[%188] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %205 = llvm.getelementptr %183[%189] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %206 = llvm.getelementptr %183[%190] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %207 = llvm.getelementptr %183[%191] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %208 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc7)
    %209 = llvm.insertvalue %192, %208[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %210 = llvm.insertvalue %193, %209[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %211 = llvm.insertvalue %194, %210[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %212 = llvm.insertvalue %195, %211[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %213 = llvm.insertvalue %196, %212[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %214 = llvm.insertvalue %197, %213[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %215 = llvm.insertvalue %198, %214[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %216 = llvm.insertvalue %199, %215[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %217 = llvm.insertvalue %200, %216[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %218 = llvm.insertvalue %201, %217[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %219 = llvm.insertvalue %202, %218[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %220 = llvm.insertvalue %203, %219[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %221 = llvm.insertvalue %204, %220[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %222 = llvm.insertvalue %205, %221[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %223 = llvm.insertvalue %206, %222[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %224 = llvm.insertvalue %207, %223[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %225 = llvm.mul %163, %arg4  : i32 loc(#loc10)
    %226 = llvm.getelementptr %arg1[%225] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %227 = llvm.add %119, %17  : i32 loc(#loc8)
    %228 = llvm.add %120, %17  : i32 loc(#loc8)
    %229 = llvm.add %121, %17  : i32 loc(#loc8)
    %230 = llvm.add %122, %17  : i32 loc(#loc8)
    %231 = llvm.add %123, %17  : i32 loc(#loc8)
    %232 = llvm.add %124, %17  : i32 loc(#loc8)
    %233 = llvm.add %125, %17  : i32 loc(#loc8)
    %234 = llvm.add %126, %17  : i32 loc(#loc8)
    %235 = llvm.add %135, %17  : i32 loc(#loc8)
    %236 = llvm.getelementptr %226[%227] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %237 = llvm.getelementptr %226[%228] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %238 = llvm.getelementptr %226[%229] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %239 = llvm.getelementptr %226[%230] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %240 = llvm.getelementptr %226[%231] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %241 = llvm.getelementptr %226[%232] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %242 = llvm.getelementptr %226[%233] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %243 = llvm.getelementptr %226[%234] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %244 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc8)
    %245 = llvm.insertvalue %236, %244[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %246 = llvm.insertvalue %237, %245[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %247 = llvm.insertvalue %238, %246[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %248 = llvm.insertvalue %239, %247[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %249 = llvm.insertvalue %240, %248[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %250 = llvm.insertvalue %241, %249[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %251 = llvm.insertvalue %242, %250[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %252 = llvm.insertvalue %243, %251[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %253 = llvm.mul %arg4, %41  : i32 loc(#loc12)
    llvm.br ^bb1(%37, %160, %224, %252 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc6)
  ^bb1(%254: i32 loc("/triton/python/test/unit/language/test_core_amd.py":1977:25), %255: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/triton/python/test/unit/language/test_core_amd.py":1980:33), %256: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1974:51), %257: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)):  // 2 preds: ^bb0, ^bb2
    %258 = llvm.icmp "slt" %254, %18 : i32 loc(#loc6)
    llvm.cond_br %258, ^bb2, ^bb3 loc(#loc6)
  ^bb2:  // pred: ^bb1
    %259 = llvm.extractvalue %256[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %260 = llvm.extractvalue %256[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %261 = llvm.extractvalue %256[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %262 = llvm.extractvalue %256[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %263 = llvm.extractvalue %256[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %264 = llvm.extractvalue %256[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %265 = llvm.extractvalue %256[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %266 = llvm.extractvalue %256[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %267 = llvm.addrspacecast %259 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %268 = llvm.load %267 : !llvm.ptr<i32> loc(#loc4)
    %269 = llvm.bitcast %268 : i32 to vector<2xf16> loc(#loc4)
    %270 = llvm.extractelement %269[%17 : i32] : vector<2xf16> loc(#loc4)
    %271 = llvm.extractelement %269[%15 : i32] : vector<2xf16> loc(#loc4)
    %272 = llvm.addrspacecast %260 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %273 = llvm.load %272 : !llvm.ptr<i32> loc(#loc4)
    %274 = llvm.bitcast %273 : i32 to vector<2xf16> loc(#loc4)
    %275 = llvm.extractelement %274[%17 : i32] : vector<2xf16> loc(#loc4)
    %276 = llvm.extractelement %274[%15 : i32] : vector<2xf16> loc(#loc4)
    %277 = llvm.addrspacecast %261 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %278 = llvm.load %277 : !llvm.ptr<i32> loc(#loc4)
    %279 = llvm.bitcast %278 : i32 to vector<2xf16> loc(#loc4)
    %280 = llvm.extractelement %279[%17 : i32] : vector<2xf16> loc(#loc4)
    %281 = llvm.extractelement %279[%15 : i32] : vector<2xf16> loc(#loc4)
    %282 = llvm.addrspacecast %262 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %283 = llvm.load %282 : !llvm.ptr<i32> loc(#loc4)
    %284 = llvm.bitcast %283 : i32 to vector<2xf16> loc(#loc4)
    %285 = llvm.extractelement %284[%17 : i32] : vector<2xf16> loc(#loc4)
    %286 = llvm.extractelement %284[%15 : i32] : vector<2xf16> loc(#loc4)
    %287 = llvm.addrspacecast %263 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %288 = llvm.load %287 : !llvm.ptr<i32> loc(#loc4)
    %289 = llvm.bitcast %288 : i32 to vector<2xf16> loc(#loc4)
    %290 = llvm.extractelement %289[%17 : i32] : vector<2xf16> loc(#loc4)
    %291 = llvm.extractelement %289[%15 : i32] : vector<2xf16> loc(#loc4)
    %292 = llvm.addrspacecast %264 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %293 = llvm.load %292 : !llvm.ptr<i32> loc(#loc4)
    %294 = llvm.bitcast %293 : i32 to vector<2xf16> loc(#loc4)
    %295 = llvm.extractelement %294[%17 : i32] : vector<2xf16> loc(#loc4)
    %296 = llvm.extractelement %294[%15 : i32] : vector<2xf16> loc(#loc4)
    %297 = llvm.addrspacecast %265 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %298 = llvm.load %297 : !llvm.ptr<i32> loc(#loc4)
    %299 = llvm.bitcast %298 : i32 to vector<2xf16> loc(#loc4)
    %300 = llvm.extractelement %299[%17 : i32] : vector<2xf16> loc(#loc4)
    %301 = llvm.extractelement %299[%15 : i32] : vector<2xf16> loc(#loc4)
    %302 = llvm.addrspacecast %266 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %303 = llvm.load %302 : !llvm.ptr<i32> loc(#loc4)
    %304 = llvm.bitcast %303 : i32 to vector<2xf16> loc(#loc4)
    %305 = llvm.extractelement %304[%17 : i32] : vector<2xf16> loc(#loc4)
    %306 = llvm.extractelement %304[%15 : i32] : vector<2xf16> loc(#loc4)
    rocdl.barrier loc(#loc4)
    %307 = llvm.bitcast %143 : !llvm.ptr<i8, 3> to !llvm.ptr<f16, 3> loc(#loc4)
    %308 = llvm.mul %37, %41  : i32 loc(#loc4)
    %309 = llvm.add %308, %37  : i32 loc(#loc4)
    %310 = llvm.mul %37, %40  : i32 loc(#loc4)
    %311 = llvm.add %309, %310  : i32 loc(#loc4)
    %312 = llvm.getelementptr %307[%311] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %313 = llvm.udiv %136, %40  : i32 loc(#loc4)
    %314 = llvm.urem %313, %35  : i32 loc(#loc4)
    %315 = llvm.mul %136, %41  : i32 loc(#loc4)
    %316 = llvm.udiv %137, %39  : i32 loc(#loc4)
    %317 = llvm.xor %316, %314  : i32 loc(#loc4)
    %318 = llvm.mul %317, %39  : i32 loc(#loc4)
    %319 = llvm.urem %137, %39  : i32 loc(#loc4)
    %320 = llvm.udiv %319, %39  : i32 loc(#loc4)
    %321 = llvm.mul %320, %39  : i32 loc(#loc4)
    %322 = llvm.add %318, %321  : i32 loc(#loc4)
    %323 = llvm.mul %322, %40  : i32 loc(#loc4)
    %324 = llvm.add %315, %323  : i32 loc(#loc4)
    %325 = llvm.add %324, %37  : i32 loc(#loc4)
    %326 = llvm.getelementptr %312[%325] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %327 = llvm.getelementptr %326[%309] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %328 = llvm.udiv %138, %39  : i32 loc(#loc4)
    %329 = llvm.xor %328, %314  : i32 loc(#loc4)
    %330 = llvm.mul %329, %39  : i32 loc(#loc4)
    %331 = llvm.urem %138, %39  : i32 loc(#loc4)
    %332 = llvm.udiv %331, %39  : i32 loc(#loc4)
    %333 = llvm.mul %332, %39  : i32 loc(#loc4)
    %334 = llvm.add %330, %333  : i32 loc(#loc4)
    %335 = llvm.mul %334, %40  : i32 loc(#loc4)
    %336 = llvm.add %315, %335  : i32 loc(#loc4)
    %337 = llvm.add %336, %37  : i32 loc(#loc4)
    %338 = llvm.getelementptr %312[%337] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %339 = llvm.getelementptr %338[%309] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %340 = llvm.udiv %139, %40  : i32 loc(#loc4)
    %341 = llvm.urem %340, %35  : i32 loc(#loc4)
    %342 = llvm.xor %316, %341  : i32 loc(#loc4)
    %343 = llvm.mul %342, %39  : i32 loc(#loc4)
    %344 = llvm.add %343, %321  : i32 loc(#loc4)
    %345 = llvm.mul %344, %40  : i32 loc(#loc4)
    %346 = llvm.add %315, %345  : i32 loc(#loc4)
    %347 = llvm.add %346, %37  : i32 loc(#loc4)
    %348 = llvm.getelementptr %312[%347] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %349 = llvm.mul %36, %41  : i32 loc(#loc4)
    %350 = llvm.add %349, %37  : i32 loc(#loc4)
    %351 = llvm.getelementptr %348[%350] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %352 = llvm.xor %328, %341  : i32 loc(#loc4)
    %353 = llvm.mul %352, %39  : i32 loc(#loc4)
    %354 = llvm.add %353, %333  : i32 loc(#loc4)
    %355 = llvm.mul %354, %40  : i32 loc(#loc4)
    %356 = llvm.add %315, %355  : i32 loc(#loc4)
    %357 = llvm.add %356, %37  : i32 loc(#loc4)
    %358 = llvm.getelementptr %312[%357] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %359 = llvm.getelementptr %358[%350] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %360 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %361 = llvm.insertelement %270, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %362 = llvm.insertelement %271, %361[%40 : i32] : vector<4xf16> loc(#loc4)
    %363 = llvm.insertelement %275, %362[%34 : i32] : vector<4xf16> loc(#loc4)
    %364 = llvm.insertelement %276, %363[%33 : i32] : vector<4xf16> loc(#loc4)
    %365 = llvm.bitcast %327 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %364, %365 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %366 = llvm.insertelement %280, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %367 = llvm.insertelement %281, %366[%40 : i32] : vector<4xf16> loc(#loc4)
    %368 = llvm.insertelement %285, %367[%34 : i32] : vector<4xf16> loc(#loc4)
    %369 = llvm.insertelement %286, %368[%33 : i32] : vector<4xf16> loc(#loc4)
    %370 = llvm.bitcast %339 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %369, %370 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %371 = llvm.insertelement %290, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %372 = llvm.insertelement %291, %371[%40 : i32] : vector<4xf16> loc(#loc4)
    %373 = llvm.insertelement %295, %372[%34 : i32] : vector<4xf16> loc(#loc4)
    %374 = llvm.insertelement %296, %373[%33 : i32] : vector<4xf16> loc(#loc4)
    %375 = llvm.bitcast %351 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %374, %375 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %376 = llvm.insertelement %300, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %377 = llvm.insertelement %301, %376[%40 : i32] : vector<4xf16> loc(#loc4)
    %378 = llvm.insertelement %305, %377[%34 : i32] : vector<4xf16> loc(#loc4)
    %379 = llvm.insertelement %306, %378[%33 : i32] : vector<4xf16> loc(#loc4)
    %380 = llvm.bitcast %359 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %379, %380 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    rocdl.barrier loc(#loc4)
    %381 = llvm.icmp "uge" %43, %36 : i32 loc(#loc4)
    %382 = llvm.select %381, %39, %37 : i1, i32 loc(#loc4)
    %383 = llvm.add %71, %37  : i32 loc(#loc4)
    %384 = llvm.add %383, %37  : i32 loc(#loc4)
    %385 = llvm.add %384, %131  : i32 loc(#loc4)
    %386 = llvm.add %385, %37  : i32 loc(#loc4)
    %387 = llvm.add %37, %37  : i32 loc(#loc4)
    %388 = llvm.add %387, %37  : i32 loc(#loc4)
    %389 = llvm.add %388, %382  : i32 loc(#loc4)
    %390 = llvm.add %389, %37  : i32 loc(#loc4)
    %391 = llvm.add %386, %37  : i32 loc(#loc4)
    %392 = llvm.add %390, %37  : i32 loc(#loc4)
    %393 = llvm.add %387, %38  : i32 loc(#loc4)
    %394 = llvm.add %393, %382  : i32 loc(#loc4)
    %395 = llvm.add %394, %37  : i32 loc(#loc4)
    %396 = llvm.add %395, %37  : i32 loc(#loc4)
    %397 = llvm.add %387, %35  : i32 loc(#loc4)
    %398 = llvm.add %397, %382  : i32 loc(#loc4)
    %399 = llvm.add %398, %37  : i32 loc(#loc4)
    %400 = llvm.add %399, %37  : i32 loc(#loc4)
    %401 = llvm.add %387, %26  : i32 loc(#loc4)
    %402 = llvm.add %401, %382  : i32 loc(#loc4)
    %403 = llvm.add %402, %37  : i32 loc(#loc4)
    %404 = llvm.add %403, %37  : i32 loc(#loc4)
    %405 = llvm.add %387, %36  : i32 loc(#loc4)
    %406 = llvm.add %405, %382  : i32 loc(#loc4)
    %407 = llvm.add %406, %37  : i32 loc(#loc4)
    %408 = llvm.add %407, %37  : i32 loc(#loc4)
    %409 = llvm.add %387, %14  : i32 loc(#loc4)
    %410 = llvm.add %409, %382  : i32 loc(#loc4)
    %411 = llvm.add %410, %37  : i32 loc(#loc4)
    %412 = llvm.add %411, %37  : i32 loc(#loc4)
    %413 = llvm.add %387, %13  : i32 loc(#loc4)
    %414 = llvm.add %413, %382  : i32 loc(#loc4)
    %415 = llvm.add %414, %37  : i32 loc(#loc4)
    %416 = llvm.add %415, %37  : i32 loc(#loc4)
    %417 = llvm.add %387, %12  : i32 loc(#loc4)
    %418 = llvm.add %417, %382  : i32 loc(#loc4)
    %419 = llvm.add %418, %37  : i32 loc(#loc4)
    %420 = llvm.add %419, %37  : i32 loc(#loc4)
    %421 = llvm.udiv %391, %40  : i32 loc(#loc4)
    %422 = llvm.urem %421, %35  : i32 loc(#loc4)
    %423 = llvm.udiv %392, %39  : i32 loc(#loc4)
    %424 = llvm.xor %423, %422  : i32 loc(#loc4)
    %425 = llvm.mul %424, %39  : i32 loc(#loc4)
    %426 = llvm.urem %392, %39  : i32 loc(#loc4)
    %427 = llvm.add %425, %426  : i32 loc(#loc4)
    %428 = llvm.mul %391, %41  : i32 loc(#loc4)
    %429 = llvm.mul %427, %40  : i32 loc(#loc4)
    %430 = llvm.add %428, %429  : i32 loc(#loc4)
    %431 = llvm.udiv %396, %39  : i32 loc(#loc4)
    %432 = llvm.xor %431, %422  : i32 loc(#loc4)
    %433 = llvm.mul %432, %39  : i32 loc(#loc4)
    %434 = llvm.urem %396, %39  : i32 loc(#loc4)
    %435 = llvm.add %433, %434  : i32 loc(#loc4)
    %436 = llvm.mul %435, %40  : i32 loc(#loc4)
    %437 = llvm.add %428, %436  : i32 loc(#loc4)
    %438 = llvm.udiv %400, %39  : i32 loc(#loc4)
    %439 = llvm.xor %438, %422  : i32 loc(#loc4)
    %440 = llvm.mul %439, %39  : i32 loc(#loc4)
    %441 = llvm.urem %400, %39  : i32 loc(#loc4)
    %442 = llvm.add %440, %441  : i32 loc(#loc4)
    %443 = llvm.mul %442, %40  : i32 loc(#loc4)
    %444 = llvm.add %428, %443  : i32 loc(#loc4)
    %445 = llvm.udiv %404, %39  : i32 loc(#loc4)
    %446 = llvm.xor %445, %422  : i32 loc(#loc4)
    %447 = llvm.mul %446, %39  : i32 loc(#loc4)
    %448 = llvm.urem %404, %39  : i32 loc(#loc4)
    %449 = llvm.add %447, %448  : i32 loc(#loc4)
    %450 = llvm.mul %449, %40  : i32 loc(#loc4)
    %451 = llvm.add %428, %450  : i32 loc(#loc4)
    %452 = llvm.udiv %408, %39  : i32 loc(#loc4)
    %453 = llvm.xor %452, %422  : i32 loc(#loc4)
    %454 = llvm.mul %453, %39  : i32 loc(#loc4)
    %455 = llvm.urem %408, %39  : i32 loc(#loc4)
    %456 = llvm.add %454, %455  : i32 loc(#loc4)
    %457 = llvm.mul %456, %40  : i32 loc(#loc4)
    %458 = llvm.add %428, %457  : i32 loc(#loc4)
    %459 = llvm.udiv %412, %39  : i32 loc(#loc4)
    %460 = llvm.xor %459, %422  : i32 loc(#loc4)
    %461 = llvm.mul %460, %39  : i32 loc(#loc4)
    %462 = llvm.urem %412, %39  : i32 loc(#loc4)
    %463 = llvm.add %461, %462  : i32 loc(#loc4)
    %464 = llvm.mul %463, %40  : i32 loc(#loc4)
    %465 = llvm.add %428, %464  : i32 loc(#loc4)
    %466 = llvm.udiv %416, %39  : i32 loc(#loc4)
    %467 = llvm.xor %466, %422  : i32 loc(#loc4)
    %468 = llvm.mul %467, %39  : i32 loc(#loc4)
    %469 = llvm.urem %416, %39  : i32 loc(#loc4)
    %470 = llvm.add %468, %469  : i32 loc(#loc4)
    %471 = llvm.mul %470, %40  : i32 loc(#loc4)
    %472 = llvm.add %428, %471  : i32 loc(#loc4)
    %473 = llvm.udiv %420, %39  : i32 loc(#loc4)
    %474 = llvm.xor %473, %422  : i32 loc(#loc4)
    %475 = llvm.mul %474, %39  : i32 loc(#loc4)
    %476 = llvm.urem %420, %39  : i32 loc(#loc4)
    %477 = llvm.add %475, %476  : i32 loc(#loc4)
    %478 = llvm.mul %477, %40  : i32 loc(#loc4)
    %479 = llvm.add %428, %478  : i32 loc(#loc4)
    %480 = llvm.sub %37, %308  : i32 loc(#loc4)
    %481 = llvm.getelementptr %307[%480] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %482 = llvm.sub %37, %310  : i32 loc(#loc4)
    %483 = llvm.getelementptr %481[%482] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %484 = llvm.getelementptr %483[%430] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %485 = llvm.bitcast %484 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %486 = llvm.load %485 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %487 = llvm.extractelement %486[%37 : i32] : vector<4xf16> loc(#loc4)
    %488 = llvm.insertelement %487, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %489 = llvm.extractelement %486[%40 : i32] : vector<4xf16> loc(#loc4)
    %490 = llvm.insertelement %489, %488[%40 : i32] : vector<4xf16> loc(#loc4)
    %491 = llvm.extractelement %486[%34 : i32] : vector<4xf16> loc(#loc4)
    %492 = llvm.insertelement %491, %490[%34 : i32] : vector<4xf16> loc(#loc4)
    %493 = llvm.extractelement %486[%33 : i32] : vector<4xf16> loc(#loc4)
    %494 = llvm.insertelement %493, %492[%33 : i32] : vector<4xf16> loc(#loc4)
    %495 = llvm.getelementptr %483[%437] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %496 = llvm.bitcast %495 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %497 = llvm.load %496 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %498 = llvm.extractelement %497[%37 : i32] : vector<4xf16> loc(#loc4)
    %499 = llvm.insertelement %498, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %500 = llvm.extractelement %497[%40 : i32] : vector<4xf16> loc(#loc4)
    %501 = llvm.insertelement %500, %499[%40 : i32] : vector<4xf16> loc(#loc4)
    %502 = llvm.extractelement %497[%34 : i32] : vector<4xf16> loc(#loc4)
    %503 = llvm.insertelement %502, %501[%34 : i32] : vector<4xf16> loc(#loc4)
    %504 = llvm.extractelement %497[%33 : i32] : vector<4xf16> loc(#loc4)
    %505 = llvm.insertelement %504, %503[%33 : i32] : vector<4xf16> loc(#loc4)
    %506 = llvm.getelementptr %483[%444] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %507 = llvm.bitcast %506 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %508 = llvm.load %507 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %509 = llvm.extractelement %508[%37 : i32] : vector<4xf16> loc(#loc4)
    %510 = llvm.insertelement %509, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %511 = llvm.extractelement %508[%40 : i32] : vector<4xf16> loc(#loc4)
    %512 = llvm.insertelement %511, %510[%40 : i32] : vector<4xf16> loc(#loc4)
    %513 = llvm.extractelement %508[%34 : i32] : vector<4xf16> loc(#loc4)
    %514 = llvm.insertelement %513, %512[%34 : i32] : vector<4xf16> loc(#loc4)
    %515 = llvm.extractelement %508[%33 : i32] : vector<4xf16> loc(#loc4)
    %516 = llvm.insertelement %515, %514[%33 : i32] : vector<4xf16> loc(#loc4)
    %517 = llvm.getelementptr %483[%451] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %518 = llvm.bitcast %517 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %519 = llvm.load %518 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %520 = llvm.extractelement %519[%37 : i32] : vector<4xf16> loc(#loc4)
    %521 = llvm.insertelement %520, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %522 = llvm.extractelement %519[%40 : i32] : vector<4xf16> loc(#loc4)
    %523 = llvm.insertelement %522, %521[%40 : i32] : vector<4xf16> loc(#loc4)
    %524 = llvm.extractelement %519[%34 : i32] : vector<4xf16> loc(#loc4)
    %525 = llvm.insertelement %524, %523[%34 : i32] : vector<4xf16> loc(#loc4)
    %526 = llvm.extractelement %519[%33 : i32] : vector<4xf16> loc(#loc4)
    %527 = llvm.insertelement %526, %525[%33 : i32] : vector<4xf16> loc(#loc4)
    %528 = llvm.getelementptr %483[%458] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %529 = llvm.bitcast %528 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %530 = llvm.load %529 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %531 = llvm.extractelement %530[%37 : i32] : vector<4xf16> loc(#loc4)
    %532 = llvm.insertelement %531, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %533 = llvm.extractelement %530[%40 : i32] : vector<4xf16> loc(#loc4)
    %534 = llvm.insertelement %533, %532[%40 : i32] : vector<4xf16> loc(#loc4)
    %535 = llvm.extractelement %530[%34 : i32] : vector<4xf16> loc(#loc4)
    %536 = llvm.insertelement %535, %534[%34 : i32] : vector<4xf16> loc(#loc4)
    %537 = llvm.extractelement %530[%33 : i32] : vector<4xf16> loc(#loc4)
    %538 = llvm.insertelement %537, %536[%33 : i32] : vector<4xf16> loc(#loc4)
    %539 = llvm.getelementptr %483[%465] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %540 = llvm.bitcast %539 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %541 = llvm.load %540 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %542 = llvm.extractelement %541[%37 : i32] : vector<4xf16> loc(#loc4)
    %543 = llvm.insertelement %542, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %544 = llvm.extractelement %541[%40 : i32] : vector<4xf16> loc(#loc4)
    %545 = llvm.insertelement %544, %543[%40 : i32] : vector<4xf16> loc(#loc4)
    %546 = llvm.extractelement %541[%34 : i32] : vector<4xf16> loc(#loc4)
    %547 = llvm.insertelement %546, %545[%34 : i32] : vector<4xf16> loc(#loc4)
    %548 = llvm.extractelement %541[%33 : i32] : vector<4xf16> loc(#loc4)
    %549 = llvm.insertelement %548, %547[%33 : i32] : vector<4xf16> loc(#loc4)
    %550 = llvm.getelementptr %483[%472] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %551 = llvm.bitcast %550 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %552 = llvm.load %551 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %553 = llvm.extractelement %552[%37 : i32] : vector<4xf16> loc(#loc4)
    %554 = llvm.insertelement %553, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %555 = llvm.extractelement %552[%40 : i32] : vector<4xf16> loc(#loc4)
    %556 = llvm.insertelement %555, %554[%40 : i32] : vector<4xf16> loc(#loc4)
    %557 = llvm.extractelement %552[%34 : i32] : vector<4xf16> loc(#loc4)
    %558 = llvm.insertelement %557, %556[%34 : i32] : vector<4xf16> loc(#loc4)
    %559 = llvm.extractelement %552[%33 : i32] : vector<4xf16> loc(#loc4)
    %560 = llvm.insertelement %559, %558[%33 : i32] : vector<4xf16> loc(#loc4)
    %561 = llvm.getelementptr %483[%479] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %562 = llvm.bitcast %561 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %563 = llvm.load %562 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %564 = llvm.extractelement %563[%37 : i32] : vector<4xf16> loc(#loc4)
    %565 = llvm.insertelement %564, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %566 = llvm.extractelement %563[%40 : i32] : vector<4xf16> loc(#loc4)
    %567 = llvm.insertelement %566, %565[%40 : i32] : vector<4xf16> loc(#loc4)
    %568 = llvm.extractelement %563[%34 : i32] : vector<4xf16> loc(#loc4)
    %569 = llvm.insertelement %568, %567[%34 : i32] : vector<4xf16> loc(#loc4)
    %570 = llvm.extractelement %563[%33 : i32] : vector<4xf16> loc(#loc4)
    %571 = llvm.insertelement %570, %569[%33 : i32] : vector<4xf16> loc(#loc4)
    %572 = llvm.extractvalue %257[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %573 = llvm.extractvalue %257[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %574 = llvm.extractvalue %257[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %575 = llvm.extractvalue %257[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %576 = llvm.addrspacecast %572 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %577 = llvm.load %576 : !llvm.ptr<i32> loc(#loc3)
    %578 = llvm.bitcast %577 : i32 to vector<2xf16> loc(#loc3)
    %579 = llvm.extractelement %578[%17 : i32] : vector<2xf16> loc(#loc3)
    %580 = llvm.extractelement %578[%15 : i32] : vector<2xf16> loc(#loc3)
    %581 = llvm.addrspacecast %573 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %582 = llvm.load %581 : !llvm.ptr<i32> loc(#loc3)
    %583 = llvm.bitcast %582 : i32 to vector<2xf16> loc(#loc3)
    %584 = llvm.extractelement %583[%17 : i32] : vector<2xf16> loc(#loc3)
    %585 = llvm.extractelement %583[%15 : i32] : vector<2xf16> loc(#loc3)
    %586 = llvm.addrspacecast %574 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %587 = llvm.load %586 : !llvm.ptr<i32> loc(#loc3)
    %588 = llvm.bitcast %587 : i32 to vector<2xf16> loc(#loc3)
    %589 = llvm.extractelement %588[%17 : i32] : vector<2xf16> loc(#loc3)
    %590 = llvm.extractelement %588[%15 : i32] : vector<2xf16> loc(#loc3)
    %591 = llvm.addrspacecast %575 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %592 = llvm.load %591 : !llvm.ptr<i32> loc(#loc3)
    %593 = llvm.bitcast %592 : i32 to vector<2xf16> loc(#loc3)
    %594 = llvm.extractelement %593[%17 : i32] : vector<2xf16> loc(#loc3)
    %595 = llvm.extractelement %593[%15 : i32] : vector<2xf16> loc(#loc3)
    rocdl.barrier loc(#loc3)
    %596 = llvm.mul %37, %36  : i32 loc(#loc3)
    %597 = llvm.add %596, %37  : i32 loc(#loc3)
    %598 = llvm.add %597, %310  : i32 loc(#loc3)
    %599 = llvm.getelementptr %307[%598] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %600 = llvm.udiv %140, %40  : i32 loc(#loc3)
    %601 = llvm.urem %600, %40  : i32 loc(#loc3)
    %602 = llvm.mul %140, %36  : i32 loc(#loc3)
    %603 = llvm.udiv %141, %40  : i32 loc(#loc3)
    %604 = llvm.xor %603, %601  : i32 loc(#loc3)
    %605 = llvm.mul %604, %40  : i32 loc(#loc3)
    %606 = llvm.urem %141, %40  : i32 loc(#loc3)
    %607 = llvm.udiv %606, %40  : i32 loc(#loc3)
    %608 = llvm.mul %607, %40  : i32 loc(#loc3)
    %609 = llvm.add %605, %608  : i32 loc(#loc3)
    %610 = llvm.mul %609, %40  : i32 loc(#loc3)
    %611 = llvm.add %602, %610  : i32 loc(#loc3)
    %612 = llvm.add %611, %37  : i32 loc(#loc3)
    %613 = llvm.getelementptr %599[%612] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %614 = llvm.getelementptr %613[%597] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %615 = llvm.add %596, %40  : i32 loc(#loc3)
    %616 = llvm.getelementptr %613[%615] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %617 = llvm.add %596, %34  : i32 loc(#loc3)
    %618 = llvm.getelementptr %613[%617] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %619 = llvm.add %596, %33  : i32 loc(#loc3)
    %620 = llvm.getelementptr %613[%619] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %621 = llvm.add %596, %39  : i32 loc(#loc3)
    %622 = llvm.getelementptr %613[%621] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %623 = llvm.add %596, %22  : i32 loc(#loc3)
    %624 = llvm.getelementptr %613[%623] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %625 = llvm.add %596, %21  : i32 loc(#loc3)
    %626 = llvm.getelementptr %613[%625] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %627 = llvm.add %596, %20  : i32 loc(#loc3)
    %628 = llvm.getelementptr %613[%627] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %629 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %630 = llvm.insertelement %579, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %631 = llvm.bitcast %614 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %630, %631 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %632 = llvm.insertelement %580, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %633 = llvm.bitcast %616 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %632, %633 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %634 = llvm.insertelement %584, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %635 = llvm.bitcast %618 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %634, %635 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %636 = llvm.insertelement %585, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %637 = llvm.bitcast %620 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %636, %637 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %638 = llvm.insertelement %589, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %639 = llvm.bitcast %622 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %638, %639 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %640 = llvm.insertelement %590, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %641 = llvm.bitcast %624 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %640, %641 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %642 = llvm.insertelement %594, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %643 = llvm.bitcast %626 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %642, %643 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %644 = llvm.insertelement %595, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %645 = llvm.bitcast %628 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %644, %645 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    rocdl.barrier loc(#loc3)
    %646 = llvm.select %381, %18, %37 : i1, i32 loc(#loc3)
    %647 = llvm.add %646, %37  : i32 loc(#loc3)
    %648 = llvm.add %647, %131  : i32 loc(#loc3)
    %649 = llvm.add %130, %37  : i32 loc(#loc3)
    %650 = llvm.add %649, %37  : i32 loc(#loc3)
    %651 = llvm.add %650, %648  : i32 loc(#loc3)
    %652 = llvm.add %646, %36  : i32 loc(#loc3)
    %653 = llvm.add %652, %131  : i32 loc(#loc3)
    %654 = llvm.add %650, %653  : i32 loc(#loc3)
    %655 = llvm.add %646, %41  : i32 loc(#loc3)
    %656 = llvm.add %655, %131  : i32 loc(#loc3)
    %657 = llvm.add %650, %656  : i32 loc(#loc3)
    %658 = llvm.add %646, %11  : i32 loc(#loc3)
    %659 = llvm.add %658, %131  : i32 loc(#loc3)
    %660 = llvm.add %650, %659  : i32 loc(#loc3)
    %661 = llvm.add %649, %10  : i32 loc(#loc3)
    %662 = llvm.add %661, %648  : i32 loc(#loc3)
    %663 = llvm.add %661, %653  : i32 loc(#loc3)
    %664 = llvm.add %661, %656  : i32 loc(#loc3)
    %665 = llvm.add %661, %659  : i32 loc(#loc3)
    %666 = llvm.add %649, %9  : i32 loc(#loc3)
    %667 = llvm.add %666, %648  : i32 loc(#loc3)
    %668 = llvm.add %666, %653  : i32 loc(#loc3)
    %669 = llvm.add %666, %656  : i32 loc(#loc3)
    %670 = llvm.add %666, %659  : i32 loc(#loc3)
    %671 = llvm.add %649, %8  : i32 loc(#loc3)
    %672 = llvm.add %671, %648  : i32 loc(#loc3)
    %673 = llvm.add %671, %653  : i32 loc(#loc3)
    %674 = llvm.add %671, %656  : i32 loc(#loc3)
    %675 = llvm.add %671, %659  : i32 loc(#loc3)
    %676 = llvm.add %649, %7  : i32 loc(#loc3)
    %677 = llvm.add %676, %648  : i32 loc(#loc3)
    %678 = llvm.add %676, %653  : i32 loc(#loc3)
    %679 = llvm.add %676, %656  : i32 loc(#loc3)
    %680 = llvm.add %676, %659  : i32 loc(#loc3)
    %681 = llvm.add %649, %6  : i32 loc(#loc3)
    %682 = llvm.add %681, %648  : i32 loc(#loc3)
    %683 = llvm.add %681, %653  : i32 loc(#loc3)
    %684 = llvm.add %681, %656  : i32 loc(#loc3)
    %685 = llvm.add %681, %659  : i32 loc(#loc3)
    %686 = llvm.add %649, %5  : i32 loc(#loc3)
    %687 = llvm.add %686, %648  : i32 loc(#loc3)
    %688 = llvm.add %686, %653  : i32 loc(#loc3)
    %689 = llvm.add %686, %656  : i32 loc(#loc3)
    %690 = llvm.add %686, %659  : i32 loc(#loc3)
    %691 = llvm.add %649, %4  : i32 loc(#loc3)
    %692 = llvm.add %691, %648  : i32 loc(#loc3)
    %693 = llvm.add %691, %653  : i32 loc(#loc3)
    %694 = llvm.add %691, %656  : i32 loc(#loc3)
    %695 = llvm.add %691, %659  : i32 loc(#loc3)
    %696 = llvm.sub %37, %37  : i32 loc(#loc3)
    %697 = llvm.getelementptr %307[%696] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %698 = llvm.getelementptr %697[%651] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %699 = llvm.bitcast %698 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %700 = llvm.load %699 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %701 = llvm.extractelement %700[%37 : i32] : vector<1xf16> loc(#loc3)
    %702 = llvm.insertelement %701, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %703 = llvm.getelementptr %697[%654] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %704 = llvm.bitcast %703 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %705 = llvm.load %704 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %706 = llvm.extractelement %705[%37 : i32] : vector<1xf16> loc(#loc3)
    %707 = llvm.insertelement %706, %702[%40 : i32] : vector<4xf16> loc(#loc3)
    %708 = llvm.getelementptr %697[%657] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %709 = llvm.bitcast %708 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %710 = llvm.load %709 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %711 = llvm.extractelement %710[%37 : i32] : vector<1xf16> loc(#loc3)
    %712 = llvm.insertelement %711, %707[%34 : i32] : vector<4xf16> loc(#loc3)
    %713 = llvm.getelementptr %697[%660] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %714 = llvm.bitcast %713 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %715 = llvm.load %714 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %716 = llvm.extractelement %715[%37 : i32] : vector<1xf16> loc(#loc3)
    %717 = llvm.insertelement %716, %712[%33 : i32] : vector<4xf16> loc(#loc3)
    %718 = llvm.getelementptr %697[%662] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %719 = llvm.bitcast %718 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %720 = llvm.load %719 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %721 = llvm.extractelement %720[%37 : i32] : vector<1xf16> loc(#loc3)
    %722 = llvm.insertelement %721, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %723 = llvm.getelementptr %697[%663] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %724 = llvm.bitcast %723 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %725 = llvm.load %724 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %726 = llvm.extractelement %725[%37 : i32] : vector<1xf16> loc(#loc3)
    %727 = llvm.insertelement %726, %722[%40 : i32] : vector<4xf16> loc(#loc3)
    %728 = llvm.getelementptr %697[%664] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %729 = llvm.bitcast %728 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %730 = llvm.load %729 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %731 = llvm.extractelement %730[%37 : i32] : vector<1xf16> loc(#loc3)
    %732 = llvm.insertelement %731, %727[%34 : i32] : vector<4xf16> loc(#loc3)
    %733 = llvm.getelementptr %697[%665] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %734 = llvm.bitcast %733 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %735 = llvm.load %734 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %736 = llvm.extractelement %735[%37 : i32] : vector<1xf16> loc(#loc3)
    %737 = llvm.insertelement %736, %732[%33 : i32] : vector<4xf16> loc(#loc3)
    %738 = llvm.getelementptr %697[%667] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %739 = llvm.bitcast %738 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %740 = llvm.load %739 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %741 = llvm.extractelement %740[%37 : i32] : vector<1xf16> loc(#loc3)
    %742 = llvm.insertelement %741, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %743 = llvm.getelementptr %697[%668] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %744 = llvm.bitcast %743 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %745 = llvm.load %744 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %746 = llvm.extractelement %745[%37 : i32] : vector<1xf16> loc(#loc3)
    %747 = llvm.insertelement %746, %742[%40 : i32] : vector<4xf16> loc(#loc3)
    %748 = llvm.getelementptr %697[%669] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %749 = llvm.bitcast %748 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %750 = llvm.load %749 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %751 = llvm.extractelement %750[%37 : i32] : vector<1xf16> loc(#loc3)
    %752 = llvm.insertelement %751, %747[%34 : i32] : vector<4xf16> loc(#loc3)
    %753 = llvm.getelementptr %697[%670] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %754 = llvm.bitcast %753 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %755 = llvm.load %754 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %756 = llvm.extractelement %755[%37 : i32] : vector<1xf16> loc(#loc3)
    %757 = llvm.insertelement %756, %752[%33 : i32] : vector<4xf16> loc(#loc3)
    %758 = llvm.getelementptr %697[%672] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %759 = llvm.bitcast %758 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %760 = llvm.load %759 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %761 = llvm.extractelement %760[%37 : i32] : vector<1xf16> loc(#loc3)
    %762 = llvm.insertelement %761, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %763 = llvm.getelementptr %697[%673] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %764 = llvm.bitcast %763 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %765 = llvm.load %764 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %766 = llvm.extractelement %765[%37 : i32] : vector<1xf16> loc(#loc3)
    %767 = llvm.insertelement %766, %762[%40 : i32] : vector<4xf16> loc(#loc3)
    %768 = llvm.getelementptr %697[%674] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %769 = llvm.bitcast %768 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %770 = llvm.load %769 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %771 = llvm.extractelement %770[%37 : i32] : vector<1xf16> loc(#loc3)
    %772 = llvm.insertelement %771, %767[%34 : i32] : vector<4xf16> loc(#loc3)
    %773 = llvm.getelementptr %697[%675] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %774 = llvm.bitcast %773 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %775 = llvm.load %774 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %776 = llvm.extractelement %775[%37 : i32] : vector<1xf16> loc(#loc3)
    %777 = llvm.insertelement %776, %772[%33 : i32] : vector<4xf16> loc(#loc3)
    %778 = llvm.getelementptr %697[%677] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %779 = llvm.bitcast %778 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %780 = llvm.load %779 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %781 = llvm.extractelement %780[%37 : i32] : vector<1xf16> loc(#loc3)
    %782 = llvm.insertelement %781, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %783 = llvm.getelementptr %697[%678] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %784 = llvm.bitcast %783 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %785 = llvm.load %784 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %786 = llvm.extractelement %785[%37 : i32] : vector<1xf16> loc(#loc3)
    %787 = llvm.insertelement %786, %782[%40 : i32] : vector<4xf16> loc(#loc3)
    %788 = llvm.getelementptr %697[%679] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %789 = llvm.bitcast %788 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %790 = llvm.load %789 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %791 = llvm.extractelement %790[%37 : i32] : vector<1xf16> loc(#loc3)
    %792 = llvm.insertelement %791, %787[%34 : i32] : vector<4xf16> loc(#loc3)
    %793 = llvm.getelementptr %697[%680] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %794 = llvm.bitcast %793 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %795 = llvm.load %794 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %796 = llvm.extractelement %795[%37 : i32] : vector<1xf16> loc(#loc3)
    %797 = llvm.insertelement %796, %792[%33 : i32] : vector<4xf16> loc(#loc3)
    %798 = llvm.getelementptr %697[%682] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %799 = llvm.bitcast %798 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %800 = llvm.load %799 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %801 = llvm.extractelement %800[%37 : i32] : vector<1xf16> loc(#loc3)
    %802 = llvm.insertelement %801, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %803 = llvm.getelementptr %697[%683] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %804 = llvm.bitcast %803 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %805 = llvm.load %804 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %806 = llvm.extractelement %805[%37 : i32] : vector<1xf16> loc(#loc3)
    %807 = llvm.insertelement %806, %802[%40 : i32] : vector<4xf16> loc(#loc3)
    %808 = llvm.getelementptr %697[%684] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %809 = llvm.bitcast %808 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %810 = llvm.load %809 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %811 = llvm.extractelement %810[%37 : i32] : vector<1xf16> loc(#loc3)
    %812 = llvm.insertelement %811, %807[%34 : i32] : vector<4xf16> loc(#loc3)
    %813 = llvm.getelementptr %697[%685] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %814 = llvm.bitcast %813 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %815 = llvm.load %814 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %816 = llvm.extractelement %815[%37 : i32] : vector<1xf16> loc(#loc3)
    %817 = llvm.insertelement %816, %812[%33 : i32] : vector<4xf16> loc(#loc3)
    %818 = llvm.getelementptr %697[%687] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %819 = llvm.bitcast %818 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %820 = llvm.load %819 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %821 = llvm.extractelement %820[%37 : i32] : vector<1xf16> loc(#loc3)
    %822 = llvm.insertelement %821, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %823 = llvm.getelementptr %697[%688] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %824 = llvm.bitcast %823 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %825 = llvm.load %824 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %826 = llvm.extractelement %825[%37 : i32] : vector<1xf16> loc(#loc3)
    %827 = llvm.insertelement %826, %822[%40 : i32] : vector<4xf16> loc(#loc3)
    %828 = llvm.getelementptr %697[%689] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %829 = llvm.bitcast %828 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %830 = llvm.load %829 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %831 = llvm.extractelement %830[%37 : i32] : vector<1xf16> loc(#loc3)
    %832 = llvm.insertelement %831, %827[%34 : i32] : vector<4xf16> loc(#loc3)
    %833 = llvm.getelementptr %697[%690] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %834 = llvm.bitcast %833 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %835 = llvm.load %834 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %836 = llvm.extractelement %835[%37 : i32] : vector<1xf16> loc(#loc3)
    %837 = llvm.insertelement %836, %832[%33 : i32] : vector<4xf16> loc(#loc3)
    %838 = llvm.getelementptr %697[%692] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %839 = llvm.bitcast %838 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %840 = llvm.load %839 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %841 = llvm.extractelement %840[%37 : i32] : vector<1xf16> loc(#loc3)
    %842 = llvm.insertelement %841, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %843 = llvm.getelementptr %697[%693] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %844 = llvm.bitcast %843 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %845 = llvm.load %844 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %846 = llvm.extractelement %845[%37 : i32] : vector<1xf16> loc(#loc3)
    %847 = llvm.insertelement %846, %842[%40 : i32] : vector<4xf16> loc(#loc3)
    %848 = llvm.getelementptr %697[%694] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %849 = llvm.bitcast %848 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %850 = llvm.load %849 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %851 = llvm.extractelement %850[%37 : i32] : vector<1xf16> loc(#loc3)
    %852 = llvm.insertelement %851, %847[%34 : i32] : vector<4xf16> loc(#loc3)
    %853 = llvm.getelementptr %697[%695] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %854 = llvm.bitcast %853 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %855 = llvm.load %854 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %856 = llvm.extractelement %855[%37 : i32] : vector<1xf16> loc(#loc3)
    %857 = llvm.insertelement %856, %852[%33 : i32] : vector<4xf16> loc(#loc3)
    %858 = llvm.extractvalue %255[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %859 = llvm.extractvalue %255[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %860 = llvm.extractvalue %255[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %861 = llvm.extractvalue %255[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %862 = llvm.extractvalue %255[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %863 = llvm.extractvalue %255[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %864 = llvm.extractvalue %255[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %865 = llvm.extractvalue %255[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %866 = llvm.extractvalue %255[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %867 = llvm.extractvalue %255[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %868 = llvm.extractvalue %255[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %869 = llvm.extractvalue %255[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %870 = llvm.extractvalue %255[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %871 = llvm.extractvalue %255[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %872 = llvm.extractvalue %255[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %873 = llvm.extractvalue %255[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %874 = llvm.mlir.undef : vector<16xf32> loc(#loc20)
    %875 = llvm.insertelement %858, %874[%37 : i32] : vector<16xf32> loc(#loc20)
    %876 = llvm.insertelement %859, %875[%40 : i32] : vector<16xf32> loc(#loc20)
    %877 = llvm.insertelement %860, %876[%34 : i32] : vector<16xf32> loc(#loc20)
    %878 = llvm.insertelement %861, %877[%33 : i32] : vector<16xf32> loc(#loc20)
    %879 = llvm.insertelement %862, %878[%39 : i32] : vector<16xf32> loc(#loc20)
    %880 = llvm.insertelement %863, %879[%22 : i32] : vector<16xf32> loc(#loc20)
    %881 = llvm.insertelement %864, %880[%21 : i32] : vector<16xf32> loc(#loc20)
    %882 = llvm.insertelement %865, %881[%20 : i32] : vector<16xf32> loc(#loc20)
    %883 = llvm.insertelement %866, %882[%38 : i32] : vector<16xf32> loc(#loc20)
    %884 = llvm.insertelement %867, %883[%32 : i32] : vector<16xf32> loc(#loc20)
    %885 = llvm.insertelement %868, %884[%31 : i32] : vector<16xf32> loc(#loc20)
    %886 = llvm.insertelement %869, %885[%30 : i32] : vector<16xf32> loc(#loc20)
    %887 = llvm.insertelement %870, %886[%3 : i32] : vector<16xf32> loc(#loc20)
    %888 = llvm.insertelement %871, %887[%2 : i32] : vector<16xf32> loc(#loc20)
    %889 = llvm.insertelement %872, %888[%1 : i32] : vector<16xf32> loc(#loc20)
    %890 = llvm.insertelement %873, %889[%0 : i32] : vector<16xf32> loc(#loc20)
    %891 = rocdl.mfma.f32.32x32x8f16 %494, %717, %890, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %892 = rocdl.mfma.f32.32x32x8f16 %505, %737, %891, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %893 = rocdl.mfma.f32.32x32x8f16 %516, %757, %892, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %894 = rocdl.mfma.f32.32x32x8f16 %527, %777, %893, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %895 = rocdl.mfma.f32.32x32x8f16 %538, %797, %894, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %896 = rocdl.mfma.f32.32x32x8f16 %549, %817, %895, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %897 = rocdl.mfma.f32.32x32x8f16 %560, %837, %896, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %898 = rocdl.mfma.f32.32x32x8f16 %571, %857, %897, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %899 = llvm.extractelement %898[%37 : i32] : vector<16xf32> loc(#loc20)
    %900 = llvm.extractelement %898[%40 : i32] : vector<16xf32> loc(#loc20)
    %901 = llvm.extractelement %898[%34 : i32] : vector<16xf32> loc(#loc20)
    %902 = llvm.extractelement %898[%33 : i32] : vector<16xf32> loc(#loc20)
    %903 = llvm.extractelement %898[%39 : i32] : vector<16xf32> loc(#loc20)
    %904 = llvm.extractelement %898[%22 : i32] : vector<16xf32> loc(#loc20)
    %905 = llvm.extractelement %898[%21 : i32] : vector<16xf32> loc(#loc20)
    %906 = llvm.extractelement %898[%20 : i32] : vector<16xf32> loc(#loc20)
    %907 = llvm.extractelement %898[%38 : i32] : vector<16xf32> loc(#loc20)
    %908 = llvm.extractelement %898[%32 : i32] : vector<16xf32> loc(#loc20)
    %909 = llvm.extractelement %898[%31 : i32] : vector<16xf32> loc(#loc20)
    %910 = llvm.extractelement %898[%30 : i32] : vector<16xf32> loc(#loc20)
    %911 = llvm.extractelement %898[%3 : i32] : vector<16xf32> loc(#loc20)
    %912 = llvm.extractelement %898[%2 : i32] : vector<16xf32> loc(#loc20)
    %913 = llvm.extractelement %898[%1 : i32] : vector<16xf32> loc(#loc20)
    %914 = llvm.extractelement %898[%0 : i32] : vector<16xf32> loc(#loc20)
    %915 = llvm.insertvalue %899, %144[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %916 = llvm.insertvalue %900, %915[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %917 = llvm.insertvalue %901, %916[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %918 = llvm.insertvalue %902, %917[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %919 = llvm.insertvalue %903, %918[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %920 = llvm.insertvalue %904, %919[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %921 = llvm.insertvalue %905, %920[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %922 = llvm.insertvalue %906, %921[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %923 = llvm.insertvalue %907, %922[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %924 = llvm.insertvalue %908, %923[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %925 = llvm.insertvalue %909, %924[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %926 = llvm.insertvalue %910, %925[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %927 = llvm.insertvalue %911, %926[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %928 = llvm.insertvalue %912, %927[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %929 = llvm.insertvalue %913, %928[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %930 = llvm.insertvalue %914, %929[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %931 = llvm.extractvalue %256[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %932 = llvm.extractvalue %256[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %933 = llvm.extractvalue %256[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %934 = llvm.extractvalue %256[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %935 = llvm.extractvalue %256[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %936 = llvm.extractvalue %256[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %937 = llvm.extractvalue %256[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %938 = llvm.extractvalue %256[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %939 = llvm.getelementptr %259[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %940 = llvm.getelementptr %931[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %941 = llvm.getelementptr %260[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %942 = llvm.getelementptr %932[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %943 = llvm.getelementptr %261[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %944 = llvm.getelementptr %933[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %945 = llvm.getelementptr %262[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %946 = llvm.getelementptr %934[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %947 = llvm.getelementptr %263[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %948 = llvm.getelementptr %935[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %949 = llvm.getelementptr %264[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %950 = llvm.getelementptr %936[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %951 = llvm.getelementptr %265[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %952 = llvm.getelementptr %937[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %953 = llvm.getelementptr %266[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %954 = llvm.getelementptr %938[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %955 = llvm.insertvalue %939, %208[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %956 = llvm.insertvalue %940, %955[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %957 = llvm.insertvalue %941, %956[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %958 = llvm.insertvalue %942, %957[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %959 = llvm.insertvalue %943, %958[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %960 = llvm.insertvalue %944, %959[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %961 = llvm.insertvalue %945, %960[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %962 = llvm.insertvalue %946, %961[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %963 = llvm.insertvalue %947, %962[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %964 = llvm.insertvalue %948, %963[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %965 = llvm.insertvalue %949, %964[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %966 = llvm.insertvalue %950, %965[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %967 = llvm.insertvalue %951, %966[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %968 = llvm.insertvalue %952, %967[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %969 = llvm.insertvalue %953, %968[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %970 = llvm.insertvalue %954, %969[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %971 = llvm.extractvalue %257[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %972 = llvm.extractvalue %257[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %973 = llvm.extractvalue %257[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %974 = llvm.extractvalue %257[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %975 = llvm.getelementptr %572[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %976 = llvm.getelementptr %971[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %977 = llvm.getelementptr %573[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %978 = llvm.getelementptr %972[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %979 = llvm.getelementptr %574[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %980 = llvm.getelementptr %973[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %981 = llvm.getelementptr %575[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %982 = llvm.getelementptr %974[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %983 = llvm.insertvalue %975, %244[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %984 = llvm.insertvalue %976, %983[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %985 = llvm.insertvalue %977, %984[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %986 = llvm.insertvalue %978, %985[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %987 = llvm.insertvalue %979, %986[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %988 = llvm.insertvalue %980, %987[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %989 = llvm.insertvalue %981, %988[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %990 = llvm.insertvalue %982, %989[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %991 = llvm.add %254, %41  : i32 loc(#loc6)
    llvm.br ^bb1(%991, %930, %970, %990 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc6)
  ^bb3:  // pred: ^bb1
    %992 = llvm.mul %164, %arg5  : i32 loc(#loc15)
    %993 = llvm.mul %165, %arg5  : i32 loc(#loc15)
    %994 = llvm.mul %166, %arg5  : i32 loc(#loc15)
    %995 = llvm.mul %167, %arg5  : i32 loc(#loc15)
    %996 = llvm.mul %168, %arg5  : i32 loc(#loc15)
    %997 = llvm.mul %169, %arg5  : i32 loc(#loc15)
    %998 = llvm.mul %170, %arg5  : i32 loc(#loc15)
    %999 = llvm.mul %171, %arg5  : i32 loc(#loc15)
    %1000 = llvm.mul %172, %arg5  : i32 loc(#loc15)
    %1001 = llvm.mul %173, %arg5  : i32 loc(#loc15)
    %1002 = llvm.mul %174, %arg5  : i32 loc(#loc15)
    %1003 = llvm.mul %175, %arg5  : i32 loc(#loc15)
    %1004 = llvm.mul %176, %arg5  : i32 loc(#loc15)
    %1005 = llvm.mul %177, %arg5  : i32 loc(#loc15)
    %1006 = llvm.mul %178, %arg5  : i32 loc(#loc15)
    %1007 = llvm.mul %179, %arg5  : i32 loc(#loc15)
    %1008 = llvm.getelementptr %arg2[%992] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1009 = llvm.getelementptr %arg2[%993] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1010 = llvm.getelementptr %arg2[%994] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1011 = llvm.getelementptr %arg2[%995] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1012 = llvm.getelementptr %arg2[%996] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1013 = llvm.getelementptr %arg2[%997] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1014 = llvm.getelementptr %arg2[%998] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1015 = llvm.getelementptr %arg2[%999] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1016 = llvm.getelementptr %arg2[%1000] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1017 = llvm.getelementptr %arg2[%1001] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1018 = llvm.getelementptr %arg2[%1002] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1019 = llvm.getelementptr %arg2[%1003] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1020 = llvm.getelementptr %arg2[%1004] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1021 = llvm.getelementptr %arg2[%1005] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1022 = llvm.getelementptr %arg2[%1006] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1023 = llvm.getelementptr %arg2[%1007] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1024 = llvm.getelementptr %1008[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1025 = llvm.getelementptr %1009[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1026 = llvm.getelementptr %1010[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1027 = llvm.getelementptr %1011[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1028 = llvm.getelementptr %1012[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1029 = llvm.getelementptr %1013[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1030 = llvm.getelementptr %1014[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1031 = llvm.getelementptr %1015[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1032 = llvm.getelementptr %1016[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1033 = llvm.getelementptr %1017[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1034 = llvm.getelementptr %1018[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1035 = llvm.getelementptr %1019[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1036 = llvm.getelementptr %1020[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1037 = llvm.getelementptr %1021[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1038 = llvm.getelementptr %1022[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1039 = llvm.getelementptr %1023[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1040 = llvm.extractvalue %255[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1041 = llvm.extractvalue %255[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1042 = llvm.extractvalue %255[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1043 = llvm.extractvalue %255[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1044 = llvm.extractvalue %255[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1045 = llvm.extractvalue %255[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1046 = llvm.extractvalue %255[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1047 = llvm.extractvalue %255[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1048 = llvm.extractvalue %255[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1049 = llvm.extractvalue %255[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1050 = llvm.extractvalue %255[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1051 = llvm.extractvalue %255[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1052 = llvm.extractvalue %255[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1053 = llvm.extractvalue %255[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1054 = llvm.extractvalue %255[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1055 = llvm.extractvalue %255[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1056 = llvm.mul %69, %36  : i32 loc(#loc18)
    %1057 = llvm.add %1056, %131  : i32 loc(#loc18)
    %1058 = llvm.mul %1057, %40  : i32 loc(#loc18)
    %1059 = llvm.icmp "slt" %1058, %36 : i32 loc(#loc18)
    %1060 = llvm.and %16, %1059  : i1 loc(#loc18)
    %1061 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1062 = llvm.insertelement %1040, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1063 = llvm.bitcast %1062 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb4, ^bb5 loc(#loc18)
  ^bb4:  // pred: ^bb3
    llvm.store %1063, %1024 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb5 loc(#loc18)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    %1064 = llvm.insertelement %1041, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1065 = llvm.bitcast %1064 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb6, ^bb7 loc(#loc18)
  ^bb6:  // pred: ^bb5
    llvm.store %1065, %1025 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb7 loc(#loc18)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %1066 = llvm.insertelement %1042, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1067 = llvm.bitcast %1066 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb8, ^bb9 loc(#loc18)
  ^bb8:  // pred: ^bb7
    llvm.store %1067, %1026 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %1068 = llvm.insertelement %1043, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1069 = llvm.bitcast %1068 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb10, ^bb11 loc(#loc18)
  ^bb10:  // pred: ^bb9
    llvm.store %1069, %1027 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb11 loc(#loc18)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %1070 = llvm.insertelement %1044, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1071 = llvm.bitcast %1070 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb12, ^bb13 loc(#loc18)
  ^bb12:  // pred: ^bb11
    llvm.store %1071, %1028 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb13 loc(#loc18)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    %1072 = llvm.insertelement %1045, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1073 = llvm.bitcast %1072 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb14, ^bb15 loc(#loc18)
  ^bb14:  // pred: ^bb13
    llvm.store %1073, %1029 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb15 loc(#loc18)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %1074 = llvm.insertelement %1046, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1075 = llvm.bitcast %1074 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb16, ^bb17 loc(#loc18)
  ^bb16:  // pred: ^bb15
    llvm.store %1075, %1030 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb17 loc(#loc18)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    %1076 = llvm.insertelement %1047, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1077 = llvm.bitcast %1076 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb18, ^bb19 loc(#loc18)
  ^bb18:  // pred: ^bb17
    llvm.store %1077, %1031 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb19 loc(#loc18)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    %1078 = llvm.insertelement %1048, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1079 = llvm.bitcast %1078 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb20, ^bb21 loc(#loc18)
  ^bb20:  // pred: ^bb19
    llvm.store %1079, %1032 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb21 loc(#loc18)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    %1080 = llvm.insertelement %1049, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1081 = llvm.bitcast %1080 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb22, ^bb23 loc(#loc18)
  ^bb22:  // pred: ^bb21
    llvm.store %1081, %1033 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb23 loc(#loc18)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    %1082 = llvm.insertelement %1050, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1083 = llvm.bitcast %1082 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb24, ^bb25 loc(#loc18)
  ^bb24:  // pred: ^bb23
    llvm.store %1083, %1034 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb25 loc(#loc18)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    %1084 = llvm.insertelement %1051, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1085 = llvm.bitcast %1084 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb26, ^bb27 loc(#loc18)
  ^bb26:  // pred: ^bb25
    llvm.store %1085, %1035 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb27 loc(#loc18)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    %1086 = llvm.insertelement %1052, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1087 = llvm.bitcast %1086 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb28, ^bb29 loc(#loc18)
  ^bb28:  // pred: ^bb27
    llvm.store %1087, %1036 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb29 loc(#loc18)
  ^bb29:  // 2 preds: ^bb27, ^bb28
    %1088 = llvm.insertelement %1053, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1089 = llvm.bitcast %1088 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb30, ^bb31 loc(#loc18)
  ^bb30:  // pred: ^bb29
    llvm.store %1089, %1037 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb31 loc(#loc18)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    %1090 = llvm.insertelement %1054, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1091 = llvm.bitcast %1090 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb32, ^bb33 loc(#loc18)
  ^bb32:  // pred: ^bb31
    llvm.store %1091, %1038 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb33 loc(#loc18)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    %1092 = llvm.insertelement %1055, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1093 = llvm.bitcast %1092 : vector<1xf32> to i32 loc(#loc18)
    cf.cond_br %1060, ^bb34, ^bb35 loc(#loc18)
  ^bb34:  // pred: ^bb33
    llvm.store %1093, %1039 : !llvm.ptr<f32, 1> loc(#loc18)
    cf.br ^bb35 loc(#loc18)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    llvm.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc20 = loc(fused[#loc1, #loc2])


// -----// IR Dump After ConvertControlFlowToLLVMPass (convert-cf-to-llvm) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
module attributes {"triton_gpu.compute-capability" = 0 : i32, triton_gpu.externs = {library_0 = "/triton/python/triton/third_party/hip/lib/bitcode/opencl.bc", library_1 = "/triton/python/triton/third_party/hip/lib/bitcode/ocml.bc", library_2 = "/triton/python/triton/third_party/hip/lib/bitcode/ockl.bc", library_3 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 8192 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public", "triton_gpu.num-tma-load" = 0 : i32, "triton_gpu.num-tma-store" = 0 : i32} {
    %0 = llvm.mlir.constant(15 : i32) : i32 loc(#loc20)
    %1 = llvm.mlir.constant(14 : i32) : i32 loc(#loc20)
    %2 = llvm.mlir.constant(13 : i32) : i32 loc(#loc20)
    %3 = llvm.mlir.constant(12 : i32) : i32 loc(#loc20)
    %4 = llvm.mlir.constant(1792 : i32) : i32 loc(#loc3)
    %5 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc3)
    %6 = llvm.mlir.constant(1280 : i32) : i32 loc(#loc3)
    %7 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc3)
    %8 = llvm.mlir.constant(768 : i32) : i32 loc(#loc3)
    %9 = llvm.mlir.constant(512 : i32) : i32 loc(#loc3)
    %10 = llvm.mlir.constant(256 : i32) : i32 loc(#loc3)
    %11 = llvm.mlir.constant(96 : i32) : i32 loc(#loc3)
    %12 = llvm.mlir.constant(56 : i32) : i32 loc(#loc4)
    %13 = llvm.mlir.constant(48 : i32) : i32 loc(#loc4)
    %14 = llvm.mlir.constant(40 : i32) : i32 loc(#loc4)
    %15 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %16 = llvm.mlir.constant(true) : i1 loc(#loc4)
    %17 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %18 = llvm.mlir.constant(128 : i32) : i32 loc(#loc6)
    %19 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc2)
    %20 = llvm.mlir.constant(7 : i32) : i32 loc(#loc7)
    %21 = llvm.mlir.constant(6 : i32) : i32 loc(#loc7)
    %22 = llvm.mlir.constant(5 : i32) : i32 loc(#loc7)
    %23 = llvm.mlir.constant(27 : i32) : i32 loc(#loc5)
    %24 = llvm.mlir.constant(26 : i32) : i32 loc(#loc5)
    %25 = llvm.mlir.constant(25 : i32) : i32 loc(#loc5)
    %26 = llvm.mlir.constant(24 : i32) : i32 loc(#loc5)
    %27 = llvm.mlir.constant(19 : i32) : i32 loc(#loc5)
    %28 = llvm.mlir.constant(18 : i32) : i32 loc(#loc5)
    %29 = llvm.mlir.constant(17 : i32) : i32 loc(#loc5)
    %30 = llvm.mlir.constant(11 : i32) : i32 loc(#loc5)
    %31 = llvm.mlir.constant(10 : i32) : i32 loc(#loc5)
    %32 = llvm.mlir.constant(9 : i32) : i32 loc(#loc5)
    %33 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %34 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %35 = llvm.mlir.constant(16 : i32) : i32 loc(#loc5)
    %36 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %37 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %38 = llvm.mlir.constant(8 : i32) : i32 loc(#loc5)
    %39 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %40 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %41 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %42 = rocdl.workitem.id.x : i32 loc(#loc5)
    %43 = llvm.urem %42, %41  : i32 loc(#loc5)
    %44 = llvm.udiv %42, %41  : i32 loc(#loc5)
    %45 = llvm.udiv %44, %40  : i32 loc(#loc5)
    %46 = llvm.urem %45, %39  : i32 loc(#loc5)
    %47 = llvm.udiv %43, %38  : i32 loc(#loc5)
    %48 = llvm.urem %47, %38  : i32 loc(#loc5)
    %49 = llvm.urem %46, %38  : i32 loc(#loc5)
    %50 = llvm.urem %48, %41  : i32 loc(#loc5)
    %51 = llvm.mul %49, %38  : i32 loc(#loc5)
    %52 = llvm.add %50, %51  : i32 loc(#loc5)
    %53 = llvm.mul %52, %40  : i32 loc(#loc5)
    %54 = llvm.urem %37, %40  : i32 loc(#loc5)
    %55 = llvm.urem %54, %40  : i32 loc(#loc5)
    %56 = llvm.mul %55, %41  : i32 loc(#loc5)
    %57 = llvm.add %53, %56  : i32 loc(#loc5)
    %58 = llvm.add %57, %37  : i32 loc(#loc5)
    %59 = llvm.add %57, %36  : i32 loc(#loc5)
    %60 = llvm.udiv %43, %39  : i32 loc(#loc5)
    %61 = llvm.urem %60, %35  : i32 loc(#loc5)
    %62 = llvm.urem %46, %39  : i32 loc(#loc5)
    %63 = llvm.urem %61, %41  : i32 loc(#loc5)
    %64 = llvm.mul %62, %35  : i32 loc(#loc5)
    %65 = llvm.add %63, %64  : i32 loc(#loc5)
    %66 = llvm.mul %65, %40  : i32 loc(#loc5)
    %67 = llvm.add %66, %56  : i32 loc(#loc5)
    %68 = llvm.add %67, %37  : i32 loc(#loc5)
    %69 = llvm.urem %44, %34  : i32 loc(#loc5)
    %70 = llvm.urem %69, %34  : i32 loc(#loc5)
    %71 = llvm.mul %70, %36  : i32 loc(#loc5)
    %72 = llvm.udiv %43, %36  : i32 loc(#loc5)
    %73 = llvm.mul %72, %39  : i32 loc(#loc5)
    %74 = llvm.add %73, %71  : i32 loc(#loc5)
    %75 = llvm.udiv %37, %40  : i32 loc(#loc5)
    %76 = llvm.urem %75, %40  : i32 loc(#loc5)
    %77 = llvm.urem %76, %40  : i32 loc(#loc5)
    %78 = llvm.mul %77, %41  : i32 loc(#loc5)
    %79 = llvm.add %74, %78  : i32 loc(#loc5)
    %80 = llvm.add %79, %37  : i32 loc(#loc5)
    %81 = llvm.add %79, %40  : i32 loc(#loc5)
    %82 = llvm.add %79, %34  : i32 loc(#loc5)
    %83 = llvm.add %79, %33  : i32 loc(#loc5)
    %84 = llvm.add %79, %38  : i32 loc(#loc5)
    %85 = llvm.add %79, %32  : i32 loc(#loc5)
    %86 = llvm.add %79, %31  : i32 loc(#loc5)
    %87 = llvm.add %79, %30  : i32 loc(#loc5)
    %88 = llvm.add %79, %35  : i32 loc(#loc5)
    %89 = llvm.add %79, %29  : i32 loc(#loc5)
    %90 = llvm.add %79, %28  : i32 loc(#loc5)
    %91 = llvm.add %79, %27  : i32 loc(#loc5)
    %92 = llvm.add %79, %26  : i32 loc(#loc5)
    %93 = llvm.add %79, %25  : i32 loc(#loc5)
    %94 = llvm.add %79, %24  : i32 loc(#loc5)
    %95 = llvm.add %79, %23  : i32 loc(#loc5)
    %96 = llvm.urem %44, %40  : i32 loc(#loc7)
    %97 = llvm.urem %43, %38  : i32 loc(#loc7)
    %98 = llvm.urem %96, %40  : i32 loc(#loc7)
    %99 = llvm.urem %97, %38  : i32 loc(#loc7)
    %100 = llvm.mul %98, %38  : i32 loc(#loc7)
    %101 = llvm.add %99, %100  : i32 loc(#loc7)
    %102 = llvm.mul %101, %38  : i32 loc(#loc7)
    %103 = llvm.add %102, %78  : i32 loc(#loc7)
    %104 = llvm.add %103, %37  : i32 loc(#loc7)
    %105 = llvm.add %103, %40  : i32 loc(#loc7)
    %106 = llvm.add %103, %34  : i32 loc(#loc7)
    %107 = llvm.add %103, %33  : i32 loc(#loc7)
    %108 = llvm.add %103, %39  : i32 loc(#loc7)
    %109 = llvm.add %103, %22  : i32 loc(#loc7)
    %110 = llvm.add %103, %21  : i32 loc(#loc7)
    %111 = llvm.add %103, %20  : i32 loc(#loc7)
    %112 = llvm.urem %43, %39  : i32 loc(#loc8)
    %113 = llvm.urem %112, %39  : i32 loc(#loc8)
    %114 = llvm.mul %98, %39  : i32 loc(#loc8)
    %115 = llvm.add %113, %114  : i32 loc(#loc8)
    %116 = llvm.mul %115, %38  : i32 loc(#loc8)
    %117 = llvm.mul %77, %36  : i32 loc(#loc8)
    %118 = llvm.add %116, %117  : i32 loc(#loc8)
    %119 = llvm.add %118, %37  : i32 loc(#loc8)
    %120 = llvm.add %118, %40  : i32 loc(#loc8)
    %121 = llvm.add %118, %34  : i32 loc(#loc8)
    %122 = llvm.add %118, %33  : i32 loc(#loc8)
    %123 = llvm.add %118, %39  : i32 loc(#loc8)
    %124 = llvm.add %118, %22  : i32 loc(#loc8)
    %125 = llvm.add %118, %21  : i32 loc(#loc8)
    %126 = llvm.add %118, %20  : i32 loc(#loc8)
    %127 = llvm.udiv %44, %34  : i32 loc(#loc8)
    %128 = llvm.urem %127, %34  : i32 loc(#loc8)
    %129 = llvm.urem %128, %40  : i32 loc(#loc8)
    %130 = llvm.mul %129, %36  : i32 loc(#loc8)
    %131 = llvm.urem %43, %36  : i32 loc(#loc8)
    %132 = llvm.add %131, %130  : i32 loc(#loc8)
    %133 = llvm.mul %55, %36  : i32 loc(#loc8)
    %134 = llvm.add %132, %133  : i32 loc(#loc8)
    %135 = llvm.add %134, %37  : i32 loc(#loc8)
    %136 = llvm.add %53, %37  : i32 loc(#loc4)
    %137 = llvm.add %102, %37  : i32 loc(#loc4)
    %138 = llvm.add %102, %39  : i32 loc(#loc4)
    %139 = llvm.add %53, %36  : i32 loc(#loc4)
    %140 = llvm.add %66, %37  : i32 loc(#loc3)
    %141 = llvm.add %116, %37  : i32 loc(#loc3)
    %142 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3> loc(#loc)
    %143 = llvm.bitcast %142 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3> loc(#loc)
    %144 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc2)
    %145 = llvm.insertvalue %19, %144[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %146 = llvm.insertvalue %19, %145[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %147 = llvm.insertvalue %19, %146[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %148 = llvm.insertvalue %19, %147[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %149 = llvm.insertvalue %19, %148[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %150 = llvm.insertvalue %19, %149[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %151 = llvm.insertvalue %19, %150[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %152 = llvm.insertvalue %19, %151[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %153 = llvm.insertvalue %19, %152[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %154 = llvm.insertvalue %19, %153[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %155 = llvm.insertvalue %19, %154[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %156 = llvm.insertvalue %19, %155[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %157 = llvm.insertvalue %19, %156[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %158 = llvm.insertvalue %19, %157[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %159 = llvm.insertvalue %19, %158[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %160 = llvm.insertvalue %19, %159[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %161 = llvm.add %58, %17  : i32 loc(#loc5)
    %162 = llvm.add %59, %17  : i32 loc(#loc5)
    %163 = llvm.add %68, %17  : i32 loc(#loc5)
    %164 = llvm.add %80, %17  : i32 loc(#loc5)
    %165 = llvm.add %81, %17  : i32 loc(#loc5)
    %166 = llvm.add %82, %17  : i32 loc(#loc5)
    %167 = llvm.add %83, %17  : i32 loc(#loc5)
    %168 = llvm.add %84, %17  : i32 loc(#loc5)
    %169 = llvm.add %85, %17  : i32 loc(#loc5)
    %170 = llvm.add %86, %17  : i32 loc(#loc5)
    %171 = llvm.add %87, %17  : i32 loc(#loc5)
    %172 = llvm.add %88, %17  : i32 loc(#loc5)
    %173 = llvm.add %89, %17  : i32 loc(#loc5)
    %174 = llvm.add %90, %17  : i32 loc(#loc5)
    %175 = llvm.add %91, %17  : i32 loc(#loc5)
    %176 = llvm.add %92, %17  : i32 loc(#loc5)
    %177 = llvm.add %93, %17  : i32 loc(#loc5)
    %178 = llvm.add %94, %17  : i32 loc(#loc5)
    %179 = llvm.add %95, %17  : i32 loc(#loc5)
    %180 = llvm.mul %161, %arg3  : i32 loc(#loc9)
    %181 = llvm.mul %162, %arg3  : i32 loc(#loc9)
    %182 = llvm.getelementptr %arg0[%180] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc5)
    %183 = llvm.getelementptr %arg0[%181] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc5)
    %184 = llvm.add %104, %17  : i32 loc(#loc7)
    %185 = llvm.add %105, %17  : i32 loc(#loc7)
    %186 = llvm.add %106, %17  : i32 loc(#loc7)
    %187 = llvm.add %107, %17  : i32 loc(#loc7)
    %188 = llvm.add %108, %17  : i32 loc(#loc7)
    %189 = llvm.add %109, %17  : i32 loc(#loc7)
    %190 = llvm.add %110, %17  : i32 loc(#loc7)
    %191 = llvm.add %111, %17  : i32 loc(#loc7)
    %192 = llvm.getelementptr %182[%184] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %193 = llvm.getelementptr %182[%185] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %194 = llvm.getelementptr %182[%186] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %195 = llvm.getelementptr %182[%187] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %196 = llvm.getelementptr %182[%188] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %197 = llvm.getelementptr %182[%189] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %198 = llvm.getelementptr %182[%190] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %199 = llvm.getelementptr %182[%191] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %200 = llvm.getelementptr %183[%184] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %201 = llvm.getelementptr %183[%185] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %202 = llvm.getelementptr %183[%186] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %203 = llvm.getelementptr %183[%187] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %204 = llvm.getelementptr %183[%188] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %205 = llvm.getelementptr %183[%189] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %206 = llvm.getelementptr %183[%190] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %207 = llvm.getelementptr %183[%191] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %208 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc7)
    %209 = llvm.insertvalue %192, %208[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %210 = llvm.insertvalue %193, %209[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %211 = llvm.insertvalue %194, %210[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %212 = llvm.insertvalue %195, %211[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %213 = llvm.insertvalue %196, %212[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %214 = llvm.insertvalue %197, %213[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %215 = llvm.insertvalue %198, %214[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %216 = llvm.insertvalue %199, %215[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %217 = llvm.insertvalue %200, %216[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %218 = llvm.insertvalue %201, %217[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %219 = llvm.insertvalue %202, %218[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %220 = llvm.insertvalue %203, %219[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %221 = llvm.insertvalue %204, %220[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %222 = llvm.insertvalue %205, %221[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %223 = llvm.insertvalue %206, %222[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %224 = llvm.insertvalue %207, %223[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %225 = llvm.mul %163, %arg4  : i32 loc(#loc10)
    %226 = llvm.getelementptr %arg1[%225] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %227 = llvm.add %119, %17  : i32 loc(#loc8)
    %228 = llvm.add %120, %17  : i32 loc(#loc8)
    %229 = llvm.add %121, %17  : i32 loc(#loc8)
    %230 = llvm.add %122, %17  : i32 loc(#loc8)
    %231 = llvm.add %123, %17  : i32 loc(#loc8)
    %232 = llvm.add %124, %17  : i32 loc(#loc8)
    %233 = llvm.add %125, %17  : i32 loc(#loc8)
    %234 = llvm.add %126, %17  : i32 loc(#loc8)
    %235 = llvm.add %135, %17  : i32 loc(#loc8)
    %236 = llvm.getelementptr %226[%227] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %237 = llvm.getelementptr %226[%228] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %238 = llvm.getelementptr %226[%229] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %239 = llvm.getelementptr %226[%230] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %240 = llvm.getelementptr %226[%231] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %241 = llvm.getelementptr %226[%232] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %242 = llvm.getelementptr %226[%233] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %243 = llvm.getelementptr %226[%234] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %244 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc8)
    %245 = llvm.insertvalue %236, %244[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %246 = llvm.insertvalue %237, %245[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %247 = llvm.insertvalue %238, %246[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %248 = llvm.insertvalue %239, %247[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %249 = llvm.insertvalue %240, %248[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %250 = llvm.insertvalue %241, %249[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %251 = llvm.insertvalue %242, %250[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %252 = llvm.insertvalue %243, %251[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %253 = llvm.mul %arg4, %41  : i32 loc(#loc12)
    llvm.br ^bb1(%37, %160, %224, %252 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc6)
  ^bb1(%254: i32 loc("/triton/python/test/unit/language/test_core_amd.py":1977:25), %255: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/triton/python/test/unit/language/test_core_amd.py":1980:33), %256: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1974:51), %257: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)):  // 2 preds: ^bb0, ^bb2
    %258 = llvm.icmp "slt" %254, %18 : i32 loc(#loc6)
    llvm.cond_br %258, ^bb2, ^bb3 loc(#loc6)
  ^bb2:  // pred: ^bb1
    %259 = llvm.extractvalue %256[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %260 = llvm.extractvalue %256[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %261 = llvm.extractvalue %256[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %262 = llvm.extractvalue %256[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %263 = llvm.extractvalue %256[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %264 = llvm.extractvalue %256[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %265 = llvm.extractvalue %256[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %266 = llvm.extractvalue %256[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %267 = llvm.addrspacecast %259 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %268 = llvm.load %267 : !llvm.ptr<i32> loc(#loc4)
    %269 = llvm.bitcast %268 : i32 to vector<2xf16> loc(#loc4)
    %270 = llvm.extractelement %269[%17 : i32] : vector<2xf16> loc(#loc4)
    %271 = llvm.extractelement %269[%15 : i32] : vector<2xf16> loc(#loc4)
    %272 = llvm.addrspacecast %260 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %273 = llvm.load %272 : !llvm.ptr<i32> loc(#loc4)
    %274 = llvm.bitcast %273 : i32 to vector<2xf16> loc(#loc4)
    %275 = llvm.extractelement %274[%17 : i32] : vector<2xf16> loc(#loc4)
    %276 = llvm.extractelement %274[%15 : i32] : vector<2xf16> loc(#loc4)
    %277 = llvm.addrspacecast %261 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %278 = llvm.load %277 : !llvm.ptr<i32> loc(#loc4)
    %279 = llvm.bitcast %278 : i32 to vector<2xf16> loc(#loc4)
    %280 = llvm.extractelement %279[%17 : i32] : vector<2xf16> loc(#loc4)
    %281 = llvm.extractelement %279[%15 : i32] : vector<2xf16> loc(#loc4)
    %282 = llvm.addrspacecast %262 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %283 = llvm.load %282 : !llvm.ptr<i32> loc(#loc4)
    %284 = llvm.bitcast %283 : i32 to vector<2xf16> loc(#loc4)
    %285 = llvm.extractelement %284[%17 : i32] : vector<2xf16> loc(#loc4)
    %286 = llvm.extractelement %284[%15 : i32] : vector<2xf16> loc(#loc4)
    %287 = llvm.addrspacecast %263 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %288 = llvm.load %287 : !llvm.ptr<i32> loc(#loc4)
    %289 = llvm.bitcast %288 : i32 to vector<2xf16> loc(#loc4)
    %290 = llvm.extractelement %289[%17 : i32] : vector<2xf16> loc(#loc4)
    %291 = llvm.extractelement %289[%15 : i32] : vector<2xf16> loc(#loc4)
    %292 = llvm.addrspacecast %264 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %293 = llvm.load %292 : !llvm.ptr<i32> loc(#loc4)
    %294 = llvm.bitcast %293 : i32 to vector<2xf16> loc(#loc4)
    %295 = llvm.extractelement %294[%17 : i32] : vector<2xf16> loc(#loc4)
    %296 = llvm.extractelement %294[%15 : i32] : vector<2xf16> loc(#loc4)
    %297 = llvm.addrspacecast %265 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %298 = llvm.load %297 : !llvm.ptr<i32> loc(#loc4)
    %299 = llvm.bitcast %298 : i32 to vector<2xf16> loc(#loc4)
    %300 = llvm.extractelement %299[%17 : i32] : vector<2xf16> loc(#loc4)
    %301 = llvm.extractelement %299[%15 : i32] : vector<2xf16> loc(#loc4)
    %302 = llvm.addrspacecast %266 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %303 = llvm.load %302 : !llvm.ptr<i32> loc(#loc4)
    %304 = llvm.bitcast %303 : i32 to vector<2xf16> loc(#loc4)
    %305 = llvm.extractelement %304[%17 : i32] : vector<2xf16> loc(#loc4)
    %306 = llvm.extractelement %304[%15 : i32] : vector<2xf16> loc(#loc4)
    rocdl.barrier loc(#loc4)
    %307 = llvm.bitcast %143 : !llvm.ptr<i8, 3> to !llvm.ptr<f16, 3> loc(#loc4)
    %308 = llvm.mul %37, %41  : i32 loc(#loc4)
    %309 = llvm.add %308, %37  : i32 loc(#loc4)
    %310 = llvm.mul %37, %40  : i32 loc(#loc4)
    %311 = llvm.add %309, %310  : i32 loc(#loc4)
    %312 = llvm.getelementptr %307[%311] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %313 = llvm.udiv %136, %40  : i32 loc(#loc4)
    %314 = llvm.urem %313, %35  : i32 loc(#loc4)
    %315 = llvm.mul %136, %41  : i32 loc(#loc4)
    %316 = llvm.udiv %137, %39  : i32 loc(#loc4)
    %317 = llvm.xor %316, %314  : i32 loc(#loc4)
    %318 = llvm.mul %317, %39  : i32 loc(#loc4)
    %319 = llvm.urem %137, %39  : i32 loc(#loc4)
    %320 = llvm.udiv %319, %39  : i32 loc(#loc4)
    %321 = llvm.mul %320, %39  : i32 loc(#loc4)
    %322 = llvm.add %318, %321  : i32 loc(#loc4)
    %323 = llvm.mul %322, %40  : i32 loc(#loc4)
    %324 = llvm.add %315, %323  : i32 loc(#loc4)
    %325 = llvm.add %324, %37  : i32 loc(#loc4)
    %326 = llvm.getelementptr %312[%325] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %327 = llvm.getelementptr %326[%309] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %328 = llvm.udiv %138, %39  : i32 loc(#loc4)
    %329 = llvm.xor %328, %314  : i32 loc(#loc4)
    %330 = llvm.mul %329, %39  : i32 loc(#loc4)
    %331 = llvm.urem %138, %39  : i32 loc(#loc4)
    %332 = llvm.udiv %331, %39  : i32 loc(#loc4)
    %333 = llvm.mul %332, %39  : i32 loc(#loc4)
    %334 = llvm.add %330, %333  : i32 loc(#loc4)
    %335 = llvm.mul %334, %40  : i32 loc(#loc4)
    %336 = llvm.add %315, %335  : i32 loc(#loc4)
    %337 = llvm.add %336, %37  : i32 loc(#loc4)
    %338 = llvm.getelementptr %312[%337] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %339 = llvm.getelementptr %338[%309] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %340 = llvm.udiv %139, %40  : i32 loc(#loc4)
    %341 = llvm.urem %340, %35  : i32 loc(#loc4)
    %342 = llvm.xor %316, %341  : i32 loc(#loc4)
    %343 = llvm.mul %342, %39  : i32 loc(#loc4)
    %344 = llvm.add %343, %321  : i32 loc(#loc4)
    %345 = llvm.mul %344, %40  : i32 loc(#loc4)
    %346 = llvm.add %315, %345  : i32 loc(#loc4)
    %347 = llvm.add %346, %37  : i32 loc(#loc4)
    %348 = llvm.getelementptr %312[%347] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %349 = llvm.mul %36, %41  : i32 loc(#loc4)
    %350 = llvm.add %349, %37  : i32 loc(#loc4)
    %351 = llvm.getelementptr %348[%350] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %352 = llvm.xor %328, %341  : i32 loc(#loc4)
    %353 = llvm.mul %352, %39  : i32 loc(#loc4)
    %354 = llvm.add %353, %333  : i32 loc(#loc4)
    %355 = llvm.mul %354, %40  : i32 loc(#loc4)
    %356 = llvm.add %315, %355  : i32 loc(#loc4)
    %357 = llvm.add %356, %37  : i32 loc(#loc4)
    %358 = llvm.getelementptr %312[%357] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %359 = llvm.getelementptr %358[%350] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %360 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %361 = llvm.insertelement %270, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %362 = llvm.insertelement %271, %361[%40 : i32] : vector<4xf16> loc(#loc4)
    %363 = llvm.insertelement %275, %362[%34 : i32] : vector<4xf16> loc(#loc4)
    %364 = llvm.insertelement %276, %363[%33 : i32] : vector<4xf16> loc(#loc4)
    %365 = llvm.bitcast %327 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %364, %365 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %366 = llvm.insertelement %280, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %367 = llvm.insertelement %281, %366[%40 : i32] : vector<4xf16> loc(#loc4)
    %368 = llvm.insertelement %285, %367[%34 : i32] : vector<4xf16> loc(#loc4)
    %369 = llvm.insertelement %286, %368[%33 : i32] : vector<4xf16> loc(#loc4)
    %370 = llvm.bitcast %339 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %369, %370 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %371 = llvm.insertelement %290, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %372 = llvm.insertelement %291, %371[%40 : i32] : vector<4xf16> loc(#loc4)
    %373 = llvm.insertelement %295, %372[%34 : i32] : vector<4xf16> loc(#loc4)
    %374 = llvm.insertelement %296, %373[%33 : i32] : vector<4xf16> loc(#loc4)
    %375 = llvm.bitcast %351 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %374, %375 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %376 = llvm.insertelement %300, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %377 = llvm.insertelement %301, %376[%40 : i32] : vector<4xf16> loc(#loc4)
    %378 = llvm.insertelement %305, %377[%34 : i32] : vector<4xf16> loc(#loc4)
    %379 = llvm.insertelement %306, %378[%33 : i32] : vector<4xf16> loc(#loc4)
    %380 = llvm.bitcast %359 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %379, %380 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    rocdl.barrier loc(#loc4)
    %381 = llvm.icmp "uge" %43, %36 : i32 loc(#loc4)
    %382 = llvm.select %381, %39, %37 : i1, i32 loc(#loc4)
    %383 = llvm.add %71, %37  : i32 loc(#loc4)
    %384 = llvm.add %383, %37  : i32 loc(#loc4)
    %385 = llvm.add %384, %131  : i32 loc(#loc4)
    %386 = llvm.add %385, %37  : i32 loc(#loc4)
    %387 = llvm.add %37, %37  : i32 loc(#loc4)
    %388 = llvm.add %387, %37  : i32 loc(#loc4)
    %389 = llvm.add %388, %382  : i32 loc(#loc4)
    %390 = llvm.add %389, %37  : i32 loc(#loc4)
    %391 = llvm.add %386, %37  : i32 loc(#loc4)
    %392 = llvm.add %390, %37  : i32 loc(#loc4)
    %393 = llvm.add %387, %38  : i32 loc(#loc4)
    %394 = llvm.add %393, %382  : i32 loc(#loc4)
    %395 = llvm.add %394, %37  : i32 loc(#loc4)
    %396 = llvm.add %395, %37  : i32 loc(#loc4)
    %397 = llvm.add %387, %35  : i32 loc(#loc4)
    %398 = llvm.add %397, %382  : i32 loc(#loc4)
    %399 = llvm.add %398, %37  : i32 loc(#loc4)
    %400 = llvm.add %399, %37  : i32 loc(#loc4)
    %401 = llvm.add %387, %26  : i32 loc(#loc4)
    %402 = llvm.add %401, %382  : i32 loc(#loc4)
    %403 = llvm.add %402, %37  : i32 loc(#loc4)
    %404 = llvm.add %403, %37  : i32 loc(#loc4)
    %405 = llvm.add %387, %36  : i32 loc(#loc4)
    %406 = llvm.add %405, %382  : i32 loc(#loc4)
    %407 = llvm.add %406, %37  : i32 loc(#loc4)
    %408 = llvm.add %407, %37  : i32 loc(#loc4)
    %409 = llvm.add %387, %14  : i32 loc(#loc4)
    %410 = llvm.add %409, %382  : i32 loc(#loc4)
    %411 = llvm.add %410, %37  : i32 loc(#loc4)
    %412 = llvm.add %411, %37  : i32 loc(#loc4)
    %413 = llvm.add %387, %13  : i32 loc(#loc4)
    %414 = llvm.add %413, %382  : i32 loc(#loc4)
    %415 = llvm.add %414, %37  : i32 loc(#loc4)
    %416 = llvm.add %415, %37  : i32 loc(#loc4)
    %417 = llvm.add %387, %12  : i32 loc(#loc4)
    %418 = llvm.add %417, %382  : i32 loc(#loc4)
    %419 = llvm.add %418, %37  : i32 loc(#loc4)
    %420 = llvm.add %419, %37  : i32 loc(#loc4)
    %421 = llvm.udiv %391, %40  : i32 loc(#loc4)
    %422 = llvm.urem %421, %35  : i32 loc(#loc4)
    %423 = llvm.udiv %392, %39  : i32 loc(#loc4)
    %424 = llvm.xor %423, %422  : i32 loc(#loc4)
    %425 = llvm.mul %424, %39  : i32 loc(#loc4)
    %426 = llvm.urem %392, %39  : i32 loc(#loc4)
    %427 = llvm.add %425, %426  : i32 loc(#loc4)
    %428 = llvm.mul %391, %41  : i32 loc(#loc4)
    %429 = llvm.mul %427, %40  : i32 loc(#loc4)
    %430 = llvm.add %428, %429  : i32 loc(#loc4)
    %431 = llvm.udiv %396, %39  : i32 loc(#loc4)
    %432 = llvm.xor %431, %422  : i32 loc(#loc4)
    %433 = llvm.mul %432, %39  : i32 loc(#loc4)
    %434 = llvm.urem %396, %39  : i32 loc(#loc4)
    %435 = llvm.add %433, %434  : i32 loc(#loc4)
    %436 = llvm.mul %435, %40  : i32 loc(#loc4)
    %437 = llvm.add %428, %436  : i32 loc(#loc4)
    %438 = llvm.udiv %400, %39  : i32 loc(#loc4)
    %439 = llvm.xor %438, %422  : i32 loc(#loc4)
    %440 = llvm.mul %439, %39  : i32 loc(#loc4)
    %441 = llvm.urem %400, %39  : i32 loc(#loc4)
    %442 = llvm.add %440, %441  : i32 loc(#loc4)
    %443 = llvm.mul %442, %40  : i32 loc(#loc4)
    %444 = llvm.add %428, %443  : i32 loc(#loc4)
    %445 = llvm.udiv %404, %39  : i32 loc(#loc4)
    %446 = llvm.xor %445, %422  : i32 loc(#loc4)
    %447 = llvm.mul %446, %39  : i32 loc(#loc4)
    %448 = llvm.urem %404, %39  : i32 loc(#loc4)
    %449 = llvm.add %447, %448  : i32 loc(#loc4)
    %450 = llvm.mul %449, %40  : i32 loc(#loc4)
    %451 = llvm.add %428, %450  : i32 loc(#loc4)
    %452 = llvm.udiv %408, %39  : i32 loc(#loc4)
    %453 = llvm.xor %452, %422  : i32 loc(#loc4)
    %454 = llvm.mul %453, %39  : i32 loc(#loc4)
    %455 = llvm.urem %408, %39  : i32 loc(#loc4)
    %456 = llvm.add %454, %455  : i32 loc(#loc4)
    %457 = llvm.mul %456, %40  : i32 loc(#loc4)
    %458 = llvm.add %428, %457  : i32 loc(#loc4)
    %459 = llvm.udiv %412, %39  : i32 loc(#loc4)
    %460 = llvm.xor %459, %422  : i32 loc(#loc4)
    %461 = llvm.mul %460, %39  : i32 loc(#loc4)
    %462 = llvm.urem %412, %39  : i32 loc(#loc4)
    %463 = llvm.add %461, %462  : i32 loc(#loc4)
    %464 = llvm.mul %463, %40  : i32 loc(#loc4)
    %465 = llvm.add %428, %464  : i32 loc(#loc4)
    %466 = llvm.udiv %416, %39  : i32 loc(#loc4)
    %467 = llvm.xor %466, %422  : i32 loc(#loc4)
    %468 = llvm.mul %467, %39  : i32 loc(#loc4)
    %469 = llvm.urem %416, %39  : i32 loc(#loc4)
    %470 = llvm.add %468, %469  : i32 loc(#loc4)
    %471 = llvm.mul %470, %40  : i32 loc(#loc4)
    %472 = llvm.add %428, %471  : i32 loc(#loc4)
    %473 = llvm.udiv %420, %39  : i32 loc(#loc4)
    %474 = llvm.xor %473, %422  : i32 loc(#loc4)
    %475 = llvm.mul %474, %39  : i32 loc(#loc4)
    %476 = llvm.urem %420, %39  : i32 loc(#loc4)
    %477 = llvm.add %475, %476  : i32 loc(#loc4)
    %478 = llvm.mul %477, %40  : i32 loc(#loc4)
    %479 = llvm.add %428, %478  : i32 loc(#loc4)
    %480 = llvm.sub %37, %308  : i32 loc(#loc4)
    %481 = llvm.getelementptr %307[%480] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %482 = llvm.sub %37, %310  : i32 loc(#loc4)
    %483 = llvm.getelementptr %481[%482] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %484 = llvm.getelementptr %483[%430] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %485 = llvm.bitcast %484 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %486 = llvm.load %485 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %487 = llvm.extractelement %486[%37 : i32] : vector<4xf16> loc(#loc4)
    %488 = llvm.insertelement %487, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %489 = llvm.extractelement %486[%40 : i32] : vector<4xf16> loc(#loc4)
    %490 = llvm.insertelement %489, %488[%40 : i32] : vector<4xf16> loc(#loc4)
    %491 = llvm.extractelement %486[%34 : i32] : vector<4xf16> loc(#loc4)
    %492 = llvm.insertelement %491, %490[%34 : i32] : vector<4xf16> loc(#loc4)
    %493 = llvm.extractelement %486[%33 : i32] : vector<4xf16> loc(#loc4)
    %494 = llvm.insertelement %493, %492[%33 : i32] : vector<4xf16> loc(#loc4)
    %495 = llvm.getelementptr %483[%437] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %496 = llvm.bitcast %495 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %497 = llvm.load %496 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %498 = llvm.extractelement %497[%37 : i32] : vector<4xf16> loc(#loc4)
    %499 = llvm.insertelement %498, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %500 = llvm.extractelement %497[%40 : i32] : vector<4xf16> loc(#loc4)
    %501 = llvm.insertelement %500, %499[%40 : i32] : vector<4xf16> loc(#loc4)
    %502 = llvm.extractelement %497[%34 : i32] : vector<4xf16> loc(#loc4)
    %503 = llvm.insertelement %502, %501[%34 : i32] : vector<4xf16> loc(#loc4)
    %504 = llvm.extractelement %497[%33 : i32] : vector<4xf16> loc(#loc4)
    %505 = llvm.insertelement %504, %503[%33 : i32] : vector<4xf16> loc(#loc4)
    %506 = llvm.getelementptr %483[%444] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %507 = llvm.bitcast %506 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %508 = llvm.load %507 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %509 = llvm.extractelement %508[%37 : i32] : vector<4xf16> loc(#loc4)
    %510 = llvm.insertelement %509, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %511 = llvm.extractelement %508[%40 : i32] : vector<4xf16> loc(#loc4)
    %512 = llvm.insertelement %511, %510[%40 : i32] : vector<4xf16> loc(#loc4)
    %513 = llvm.extractelement %508[%34 : i32] : vector<4xf16> loc(#loc4)
    %514 = llvm.insertelement %513, %512[%34 : i32] : vector<4xf16> loc(#loc4)
    %515 = llvm.extractelement %508[%33 : i32] : vector<4xf16> loc(#loc4)
    %516 = llvm.insertelement %515, %514[%33 : i32] : vector<4xf16> loc(#loc4)
    %517 = llvm.getelementptr %483[%451] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %518 = llvm.bitcast %517 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %519 = llvm.load %518 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %520 = llvm.extractelement %519[%37 : i32] : vector<4xf16> loc(#loc4)
    %521 = llvm.insertelement %520, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %522 = llvm.extractelement %519[%40 : i32] : vector<4xf16> loc(#loc4)
    %523 = llvm.insertelement %522, %521[%40 : i32] : vector<4xf16> loc(#loc4)
    %524 = llvm.extractelement %519[%34 : i32] : vector<4xf16> loc(#loc4)
    %525 = llvm.insertelement %524, %523[%34 : i32] : vector<4xf16> loc(#loc4)
    %526 = llvm.extractelement %519[%33 : i32] : vector<4xf16> loc(#loc4)
    %527 = llvm.insertelement %526, %525[%33 : i32] : vector<4xf16> loc(#loc4)
    %528 = llvm.getelementptr %483[%458] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %529 = llvm.bitcast %528 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %530 = llvm.load %529 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %531 = llvm.extractelement %530[%37 : i32] : vector<4xf16> loc(#loc4)
    %532 = llvm.insertelement %531, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %533 = llvm.extractelement %530[%40 : i32] : vector<4xf16> loc(#loc4)
    %534 = llvm.insertelement %533, %532[%40 : i32] : vector<4xf16> loc(#loc4)
    %535 = llvm.extractelement %530[%34 : i32] : vector<4xf16> loc(#loc4)
    %536 = llvm.insertelement %535, %534[%34 : i32] : vector<4xf16> loc(#loc4)
    %537 = llvm.extractelement %530[%33 : i32] : vector<4xf16> loc(#loc4)
    %538 = llvm.insertelement %537, %536[%33 : i32] : vector<4xf16> loc(#loc4)
    %539 = llvm.getelementptr %483[%465] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %540 = llvm.bitcast %539 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %541 = llvm.load %540 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %542 = llvm.extractelement %541[%37 : i32] : vector<4xf16> loc(#loc4)
    %543 = llvm.insertelement %542, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %544 = llvm.extractelement %541[%40 : i32] : vector<4xf16> loc(#loc4)
    %545 = llvm.insertelement %544, %543[%40 : i32] : vector<4xf16> loc(#loc4)
    %546 = llvm.extractelement %541[%34 : i32] : vector<4xf16> loc(#loc4)
    %547 = llvm.insertelement %546, %545[%34 : i32] : vector<4xf16> loc(#loc4)
    %548 = llvm.extractelement %541[%33 : i32] : vector<4xf16> loc(#loc4)
    %549 = llvm.insertelement %548, %547[%33 : i32] : vector<4xf16> loc(#loc4)
    %550 = llvm.getelementptr %483[%472] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %551 = llvm.bitcast %550 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %552 = llvm.load %551 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %553 = llvm.extractelement %552[%37 : i32] : vector<4xf16> loc(#loc4)
    %554 = llvm.insertelement %553, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %555 = llvm.extractelement %552[%40 : i32] : vector<4xf16> loc(#loc4)
    %556 = llvm.insertelement %555, %554[%40 : i32] : vector<4xf16> loc(#loc4)
    %557 = llvm.extractelement %552[%34 : i32] : vector<4xf16> loc(#loc4)
    %558 = llvm.insertelement %557, %556[%34 : i32] : vector<4xf16> loc(#loc4)
    %559 = llvm.extractelement %552[%33 : i32] : vector<4xf16> loc(#loc4)
    %560 = llvm.insertelement %559, %558[%33 : i32] : vector<4xf16> loc(#loc4)
    %561 = llvm.getelementptr %483[%479] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %562 = llvm.bitcast %561 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %563 = llvm.load %562 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %564 = llvm.extractelement %563[%37 : i32] : vector<4xf16> loc(#loc4)
    %565 = llvm.insertelement %564, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %566 = llvm.extractelement %563[%40 : i32] : vector<4xf16> loc(#loc4)
    %567 = llvm.insertelement %566, %565[%40 : i32] : vector<4xf16> loc(#loc4)
    %568 = llvm.extractelement %563[%34 : i32] : vector<4xf16> loc(#loc4)
    %569 = llvm.insertelement %568, %567[%34 : i32] : vector<4xf16> loc(#loc4)
    %570 = llvm.extractelement %563[%33 : i32] : vector<4xf16> loc(#loc4)
    %571 = llvm.insertelement %570, %569[%33 : i32] : vector<4xf16> loc(#loc4)
    %572 = llvm.extractvalue %257[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %573 = llvm.extractvalue %257[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %574 = llvm.extractvalue %257[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %575 = llvm.extractvalue %257[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %576 = llvm.addrspacecast %572 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %577 = llvm.load %576 : !llvm.ptr<i32> loc(#loc3)
    %578 = llvm.bitcast %577 : i32 to vector<2xf16> loc(#loc3)
    %579 = llvm.extractelement %578[%17 : i32] : vector<2xf16> loc(#loc3)
    %580 = llvm.extractelement %578[%15 : i32] : vector<2xf16> loc(#loc3)
    %581 = llvm.addrspacecast %573 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %582 = llvm.load %581 : !llvm.ptr<i32> loc(#loc3)
    %583 = llvm.bitcast %582 : i32 to vector<2xf16> loc(#loc3)
    %584 = llvm.extractelement %583[%17 : i32] : vector<2xf16> loc(#loc3)
    %585 = llvm.extractelement %583[%15 : i32] : vector<2xf16> loc(#loc3)
    %586 = llvm.addrspacecast %574 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %587 = llvm.load %586 : !llvm.ptr<i32> loc(#loc3)
    %588 = llvm.bitcast %587 : i32 to vector<2xf16> loc(#loc3)
    %589 = llvm.extractelement %588[%17 : i32] : vector<2xf16> loc(#loc3)
    %590 = llvm.extractelement %588[%15 : i32] : vector<2xf16> loc(#loc3)
    %591 = llvm.addrspacecast %575 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %592 = llvm.load %591 : !llvm.ptr<i32> loc(#loc3)
    %593 = llvm.bitcast %592 : i32 to vector<2xf16> loc(#loc3)
    %594 = llvm.extractelement %593[%17 : i32] : vector<2xf16> loc(#loc3)
    %595 = llvm.extractelement %593[%15 : i32] : vector<2xf16> loc(#loc3)
    rocdl.barrier loc(#loc3)
    %596 = llvm.mul %37, %36  : i32 loc(#loc3)
    %597 = llvm.add %596, %37  : i32 loc(#loc3)
    %598 = llvm.add %597, %310  : i32 loc(#loc3)
    %599 = llvm.getelementptr %307[%598] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %600 = llvm.udiv %140, %40  : i32 loc(#loc3)
    %601 = llvm.urem %600, %40  : i32 loc(#loc3)
    %602 = llvm.mul %140, %36  : i32 loc(#loc3)
    %603 = llvm.udiv %141, %40  : i32 loc(#loc3)
    %604 = llvm.xor %603, %601  : i32 loc(#loc3)
    %605 = llvm.mul %604, %40  : i32 loc(#loc3)
    %606 = llvm.urem %141, %40  : i32 loc(#loc3)
    %607 = llvm.udiv %606, %40  : i32 loc(#loc3)
    %608 = llvm.mul %607, %40  : i32 loc(#loc3)
    %609 = llvm.add %605, %608  : i32 loc(#loc3)
    %610 = llvm.mul %609, %40  : i32 loc(#loc3)
    %611 = llvm.add %602, %610  : i32 loc(#loc3)
    %612 = llvm.add %611, %37  : i32 loc(#loc3)
    %613 = llvm.getelementptr %599[%612] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %614 = llvm.getelementptr %613[%597] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %615 = llvm.add %596, %40  : i32 loc(#loc3)
    %616 = llvm.getelementptr %613[%615] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %617 = llvm.add %596, %34  : i32 loc(#loc3)
    %618 = llvm.getelementptr %613[%617] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %619 = llvm.add %596, %33  : i32 loc(#loc3)
    %620 = llvm.getelementptr %613[%619] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %621 = llvm.add %596, %39  : i32 loc(#loc3)
    %622 = llvm.getelementptr %613[%621] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %623 = llvm.add %596, %22  : i32 loc(#loc3)
    %624 = llvm.getelementptr %613[%623] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %625 = llvm.add %596, %21  : i32 loc(#loc3)
    %626 = llvm.getelementptr %613[%625] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %627 = llvm.add %596, %20  : i32 loc(#loc3)
    %628 = llvm.getelementptr %613[%627] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %629 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %630 = llvm.insertelement %579, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %631 = llvm.bitcast %614 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %630, %631 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %632 = llvm.insertelement %580, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %633 = llvm.bitcast %616 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %632, %633 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %634 = llvm.insertelement %584, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %635 = llvm.bitcast %618 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %634, %635 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %636 = llvm.insertelement %585, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %637 = llvm.bitcast %620 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %636, %637 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %638 = llvm.insertelement %589, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %639 = llvm.bitcast %622 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %638, %639 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %640 = llvm.insertelement %590, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %641 = llvm.bitcast %624 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %640, %641 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %642 = llvm.insertelement %594, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %643 = llvm.bitcast %626 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %642, %643 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %644 = llvm.insertelement %595, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %645 = llvm.bitcast %628 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %644, %645 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    rocdl.barrier loc(#loc3)
    %646 = llvm.select %381, %18, %37 : i1, i32 loc(#loc3)
    %647 = llvm.add %646, %37  : i32 loc(#loc3)
    %648 = llvm.add %647, %131  : i32 loc(#loc3)
    %649 = llvm.add %130, %37  : i32 loc(#loc3)
    %650 = llvm.add %649, %37  : i32 loc(#loc3)
    %651 = llvm.add %650, %648  : i32 loc(#loc3)
    %652 = llvm.add %646, %36  : i32 loc(#loc3)
    %653 = llvm.add %652, %131  : i32 loc(#loc3)
    %654 = llvm.add %650, %653  : i32 loc(#loc3)
    %655 = llvm.add %646, %41  : i32 loc(#loc3)
    %656 = llvm.add %655, %131  : i32 loc(#loc3)
    %657 = llvm.add %650, %656  : i32 loc(#loc3)
    %658 = llvm.add %646, %11  : i32 loc(#loc3)
    %659 = llvm.add %658, %131  : i32 loc(#loc3)
    %660 = llvm.add %650, %659  : i32 loc(#loc3)
    %661 = llvm.add %649, %10  : i32 loc(#loc3)
    %662 = llvm.add %661, %648  : i32 loc(#loc3)
    %663 = llvm.add %661, %653  : i32 loc(#loc3)
    %664 = llvm.add %661, %656  : i32 loc(#loc3)
    %665 = llvm.add %661, %659  : i32 loc(#loc3)
    %666 = llvm.add %649, %9  : i32 loc(#loc3)
    %667 = llvm.add %666, %648  : i32 loc(#loc3)
    %668 = llvm.add %666, %653  : i32 loc(#loc3)
    %669 = llvm.add %666, %656  : i32 loc(#loc3)
    %670 = llvm.add %666, %659  : i32 loc(#loc3)
    %671 = llvm.add %649, %8  : i32 loc(#loc3)
    %672 = llvm.add %671, %648  : i32 loc(#loc3)
    %673 = llvm.add %671, %653  : i32 loc(#loc3)
    %674 = llvm.add %671, %656  : i32 loc(#loc3)
    %675 = llvm.add %671, %659  : i32 loc(#loc3)
    %676 = llvm.add %649, %7  : i32 loc(#loc3)
    %677 = llvm.add %676, %648  : i32 loc(#loc3)
    %678 = llvm.add %676, %653  : i32 loc(#loc3)
    %679 = llvm.add %676, %656  : i32 loc(#loc3)
    %680 = llvm.add %676, %659  : i32 loc(#loc3)
    %681 = llvm.add %649, %6  : i32 loc(#loc3)
    %682 = llvm.add %681, %648  : i32 loc(#loc3)
    %683 = llvm.add %681, %653  : i32 loc(#loc3)
    %684 = llvm.add %681, %656  : i32 loc(#loc3)
    %685 = llvm.add %681, %659  : i32 loc(#loc3)
    %686 = llvm.add %649, %5  : i32 loc(#loc3)
    %687 = llvm.add %686, %648  : i32 loc(#loc3)
    %688 = llvm.add %686, %653  : i32 loc(#loc3)
    %689 = llvm.add %686, %656  : i32 loc(#loc3)
    %690 = llvm.add %686, %659  : i32 loc(#loc3)
    %691 = llvm.add %649, %4  : i32 loc(#loc3)
    %692 = llvm.add %691, %648  : i32 loc(#loc3)
    %693 = llvm.add %691, %653  : i32 loc(#loc3)
    %694 = llvm.add %691, %656  : i32 loc(#loc3)
    %695 = llvm.add %691, %659  : i32 loc(#loc3)
    %696 = llvm.sub %37, %37  : i32 loc(#loc3)
    %697 = llvm.getelementptr %307[%696] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %698 = llvm.getelementptr %697[%651] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %699 = llvm.bitcast %698 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %700 = llvm.load %699 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %701 = llvm.extractelement %700[%37 : i32] : vector<1xf16> loc(#loc3)
    %702 = llvm.insertelement %701, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %703 = llvm.getelementptr %697[%654] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %704 = llvm.bitcast %703 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %705 = llvm.load %704 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %706 = llvm.extractelement %705[%37 : i32] : vector<1xf16> loc(#loc3)
    %707 = llvm.insertelement %706, %702[%40 : i32] : vector<4xf16> loc(#loc3)
    %708 = llvm.getelementptr %697[%657] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %709 = llvm.bitcast %708 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %710 = llvm.load %709 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %711 = llvm.extractelement %710[%37 : i32] : vector<1xf16> loc(#loc3)
    %712 = llvm.insertelement %711, %707[%34 : i32] : vector<4xf16> loc(#loc3)
    %713 = llvm.getelementptr %697[%660] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %714 = llvm.bitcast %713 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %715 = llvm.load %714 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %716 = llvm.extractelement %715[%37 : i32] : vector<1xf16> loc(#loc3)
    %717 = llvm.insertelement %716, %712[%33 : i32] : vector<4xf16> loc(#loc3)
    %718 = llvm.getelementptr %697[%662] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %719 = llvm.bitcast %718 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %720 = llvm.load %719 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %721 = llvm.extractelement %720[%37 : i32] : vector<1xf16> loc(#loc3)
    %722 = llvm.insertelement %721, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %723 = llvm.getelementptr %697[%663] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %724 = llvm.bitcast %723 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %725 = llvm.load %724 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %726 = llvm.extractelement %725[%37 : i32] : vector<1xf16> loc(#loc3)
    %727 = llvm.insertelement %726, %722[%40 : i32] : vector<4xf16> loc(#loc3)
    %728 = llvm.getelementptr %697[%664] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %729 = llvm.bitcast %728 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %730 = llvm.load %729 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %731 = llvm.extractelement %730[%37 : i32] : vector<1xf16> loc(#loc3)
    %732 = llvm.insertelement %731, %727[%34 : i32] : vector<4xf16> loc(#loc3)
    %733 = llvm.getelementptr %697[%665] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %734 = llvm.bitcast %733 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %735 = llvm.load %734 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %736 = llvm.extractelement %735[%37 : i32] : vector<1xf16> loc(#loc3)
    %737 = llvm.insertelement %736, %732[%33 : i32] : vector<4xf16> loc(#loc3)
    %738 = llvm.getelementptr %697[%667] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %739 = llvm.bitcast %738 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %740 = llvm.load %739 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %741 = llvm.extractelement %740[%37 : i32] : vector<1xf16> loc(#loc3)
    %742 = llvm.insertelement %741, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %743 = llvm.getelementptr %697[%668] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %744 = llvm.bitcast %743 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %745 = llvm.load %744 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %746 = llvm.extractelement %745[%37 : i32] : vector<1xf16> loc(#loc3)
    %747 = llvm.insertelement %746, %742[%40 : i32] : vector<4xf16> loc(#loc3)
    %748 = llvm.getelementptr %697[%669] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %749 = llvm.bitcast %748 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %750 = llvm.load %749 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %751 = llvm.extractelement %750[%37 : i32] : vector<1xf16> loc(#loc3)
    %752 = llvm.insertelement %751, %747[%34 : i32] : vector<4xf16> loc(#loc3)
    %753 = llvm.getelementptr %697[%670] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %754 = llvm.bitcast %753 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %755 = llvm.load %754 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %756 = llvm.extractelement %755[%37 : i32] : vector<1xf16> loc(#loc3)
    %757 = llvm.insertelement %756, %752[%33 : i32] : vector<4xf16> loc(#loc3)
    %758 = llvm.getelementptr %697[%672] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %759 = llvm.bitcast %758 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %760 = llvm.load %759 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %761 = llvm.extractelement %760[%37 : i32] : vector<1xf16> loc(#loc3)
    %762 = llvm.insertelement %761, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %763 = llvm.getelementptr %697[%673] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %764 = llvm.bitcast %763 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %765 = llvm.load %764 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %766 = llvm.extractelement %765[%37 : i32] : vector<1xf16> loc(#loc3)
    %767 = llvm.insertelement %766, %762[%40 : i32] : vector<4xf16> loc(#loc3)
    %768 = llvm.getelementptr %697[%674] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %769 = llvm.bitcast %768 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %770 = llvm.load %769 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %771 = llvm.extractelement %770[%37 : i32] : vector<1xf16> loc(#loc3)
    %772 = llvm.insertelement %771, %767[%34 : i32] : vector<4xf16> loc(#loc3)
    %773 = llvm.getelementptr %697[%675] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %774 = llvm.bitcast %773 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %775 = llvm.load %774 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %776 = llvm.extractelement %775[%37 : i32] : vector<1xf16> loc(#loc3)
    %777 = llvm.insertelement %776, %772[%33 : i32] : vector<4xf16> loc(#loc3)
    %778 = llvm.getelementptr %697[%677] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %779 = llvm.bitcast %778 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %780 = llvm.load %779 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %781 = llvm.extractelement %780[%37 : i32] : vector<1xf16> loc(#loc3)
    %782 = llvm.insertelement %781, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %783 = llvm.getelementptr %697[%678] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %784 = llvm.bitcast %783 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %785 = llvm.load %784 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %786 = llvm.extractelement %785[%37 : i32] : vector<1xf16> loc(#loc3)
    %787 = llvm.insertelement %786, %782[%40 : i32] : vector<4xf16> loc(#loc3)
    %788 = llvm.getelementptr %697[%679] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %789 = llvm.bitcast %788 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %790 = llvm.load %789 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %791 = llvm.extractelement %790[%37 : i32] : vector<1xf16> loc(#loc3)
    %792 = llvm.insertelement %791, %787[%34 : i32] : vector<4xf16> loc(#loc3)
    %793 = llvm.getelementptr %697[%680] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %794 = llvm.bitcast %793 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %795 = llvm.load %794 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %796 = llvm.extractelement %795[%37 : i32] : vector<1xf16> loc(#loc3)
    %797 = llvm.insertelement %796, %792[%33 : i32] : vector<4xf16> loc(#loc3)
    %798 = llvm.getelementptr %697[%682] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %799 = llvm.bitcast %798 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %800 = llvm.load %799 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %801 = llvm.extractelement %800[%37 : i32] : vector<1xf16> loc(#loc3)
    %802 = llvm.insertelement %801, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %803 = llvm.getelementptr %697[%683] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %804 = llvm.bitcast %803 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %805 = llvm.load %804 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %806 = llvm.extractelement %805[%37 : i32] : vector<1xf16> loc(#loc3)
    %807 = llvm.insertelement %806, %802[%40 : i32] : vector<4xf16> loc(#loc3)
    %808 = llvm.getelementptr %697[%684] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %809 = llvm.bitcast %808 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %810 = llvm.load %809 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %811 = llvm.extractelement %810[%37 : i32] : vector<1xf16> loc(#loc3)
    %812 = llvm.insertelement %811, %807[%34 : i32] : vector<4xf16> loc(#loc3)
    %813 = llvm.getelementptr %697[%685] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %814 = llvm.bitcast %813 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %815 = llvm.load %814 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %816 = llvm.extractelement %815[%37 : i32] : vector<1xf16> loc(#loc3)
    %817 = llvm.insertelement %816, %812[%33 : i32] : vector<4xf16> loc(#loc3)
    %818 = llvm.getelementptr %697[%687] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %819 = llvm.bitcast %818 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %820 = llvm.load %819 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %821 = llvm.extractelement %820[%37 : i32] : vector<1xf16> loc(#loc3)
    %822 = llvm.insertelement %821, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %823 = llvm.getelementptr %697[%688] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %824 = llvm.bitcast %823 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %825 = llvm.load %824 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %826 = llvm.extractelement %825[%37 : i32] : vector<1xf16> loc(#loc3)
    %827 = llvm.insertelement %826, %822[%40 : i32] : vector<4xf16> loc(#loc3)
    %828 = llvm.getelementptr %697[%689] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %829 = llvm.bitcast %828 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %830 = llvm.load %829 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %831 = llvm.extractelement %830[%37 : i32] : vector<1xf16> loc(#loc3)
    %832 = llvm.insertelement %831, %827[%34 : i32] : vector<4xf16> loc(#loc3)
    %833 = llvm.getelementptr %697[%690] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %834 = llvm.bitcast %833 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %835 = llvm.load %834 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %836 = llvm.extractelement %835[%37 : i32] : vector<1xf16> loc(#loc3)
    %837 = llvm.insertelement %836, %832[%33 : i32] : vector<4xf16> loc(#loc3)
    %838 = llvm.getelementptr %697[%692] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %839 = llvm.bitcast %838 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %840 = llvm.load %839 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %841 = llvm.extractelement %840[%37 : i32] : vector<1xf16> loc(#loc3)
    %842 = llvm.insertelement %841, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %843 = llvm.getelementptr %697[%693] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %844 = llvm.bitcast %843 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %845 = llvm.load %844 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %846 = llvm.extractelement %845[%37 : i32] : vector<1xf16> loc(#loc3)
    %847 = llvm.insertelement %846, %842[%40 : i32] : vector<4xf16> loc(#loc3)
    %848 = llvm.getelementptr %697[%694] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %849 = llvm.bitcast %848 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %850 = llvm.load %849 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %851 = llvm.extractelement %850[%37 : i32] : vector<1xf16> loc(#loc3)
    %852 = llvm.insertelement %851, %847[%34 : i32] : vector<4xf16> loc(#loc3)
    %853 = llvm.getelementptr %697[%695] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %854 = llvm.bitcast %853 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %855 = llvm.load %854 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %856 = llvm.extractelement %855[%37 : i32] : vector<1xf16> loc(#loc3)
    %857 = llvm.insertelement %856, %852[%33 : i32] : vector<4xf16> loc(#loc3)
    %858 = llvm.extractvalue %255[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %859 = llvm.extractvalue %255[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %860 = llvm.extractvalue %255[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %861 = llvm.extractvalue %255[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %862 = llvm.extractvalue %255[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %863 = llvm.extractvalue %255[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %864 = llvm.extractvalue %255[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %865 = llvm.extractvalue %255[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %866 = llvm.extractvalue %255[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %867 = llvm.extractvalue %255[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %868 = llvm.extractvalue %255[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %869 = llvm.extractvalue %255[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %870 = llvm.extractvalue %255[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %871 = llvm.extractvalue %255[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %872 = llvm.extractvalue %255[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %873 = llvm.extractvalue %255[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %874 = llvm.mlir.undef : vector<16xf32> loc(#loc20)
    %875 = llvm.insertelement %858, %874[%37 : i32] : vector<16xf32> loc(#loc20)
    %876 = llvm.insertelement %859, %875[%40 : i32] : vector<16xf32> loc(#loc20)
    %877 = llvm.insertelement %860, %876[%34 : i32] : vector<16xf32> loc(#loc20)
    %878 = llvm.insertelement %861, %877[%33 : i32] : vector<16xf32> loc(#loc20)
    %879 = llvm.insertelement %862, %878[%39 : i32] : vector<16xf32> loc(#loc20)
    %880 = llvm.insertelement %863, %879[%22 : i32] : vector<16xf32> loc(#loc20)
    %881 = llvm.insertelement %864, %880[%21 : i32] : vector<16xf32> loc(#loc20)
    %882 = llvm.insertelement %865, %881[%20 : i32] : vector<16xf32> loc(#loc20)
    %883 = llvm.insertelement %866, %882[%38 : i32] : vector<16xf32> loc(#loc20)
    %884 = llvm.insertelement %867, %883[%32 : i32] : vector<16xf32> loc(#loc20)
    %885 = llvm.insertelement %868, %884[%31 : i32] : vector<16xf32> loc(#loc20)
    %886 = llvm.insertelement %869, %885[%30 : i32] : vector<16xf32> loc(#loc20)
    %887 = llvm.insertelement %870, %886[%3 : i32] : vector<16xf32> loc(#loc20)
    %888 = llvm.insertelement %871, %887[%2 : i32] : vector<16xf32> loc(#loc20)
    %889 = llvm.insertelement %872, %888[%1 : i32] : vector<16xf32> loc(#loc20)
    %890 = llvm.insertelement %873, %889[%0 : i32] : vector<16xf32> loc(#loc20)
    %891 = rocdl.mfma.f32.32x32x8f16 %494, %717, %890, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %892 = rocdl.mfma.f32.32x32x8f16 %505, %737, %891, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %893 = rocdl.mfma.f32.32x32x8f16 %516, %757, %892, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %894 = rocdl.mfma.f32.32x32x8f16 %527, %777, %893, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %895 = rocdl.mfma.f32.32x32x8f16 %538, %797, %894, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %896 = rocdl.mfma.f32.32x32x8f16 %549, %817, %895, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %897 = rocdl.mfma.f32.32x32x8f16 %560, %837, %896, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %898 = rocdl.mfma.f32.32x32x8f16 %571, %857, %897, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %899 = llvm.extractelement %898[%37 : i32] : vector<16xf32> loc(#loc20)
    %900 = llvm.extractelement %898[%40 : i32] : vector<16xf32> loc(#loc20)
    %901 = llvm.extractelement %898[%34 : i32] : vector<16xf32> loc(#loc20)
    %902 = llvm.extractelement %898[%33 : i32] : vector<16xf32> loc(#loc20)
    %903 = llvm.extractelement %898[%39 : i32] : vector<16xf32> loc(#loc20)
    %904 = llvm.extractelement %898[%22 : i32] : vector<16xf32> loc(#loc20)
    %905 = llvm.extractelement %898[%21 : i32] : vector<16xf32> loc(#loc20)
    %906 = llvm.extractelement %898[%20 : i32] : vector<16xf32> loc(#loc20)
    %907 = llvm.extractelement %898[%38 : i32] : vector<16xf32> loc(#loc20)
    %908 = llvm.extractelement %898[%32 : i32] : vector<16xf32> loc(#loc20)
    %909 = llvm.extractelement %898[%31 : i32] : vector<16xf32> loc(#loc20)
    %910 = llvm.extractelement %898[%30 : i32] : vector<16xf32> loc(#loc20)
    %911 = llvm.extractelement %898[%3 : i32] : vector<16xf32> loc(#loc20)
    %912 = llvm.extractelement %898[%2 : i32] : vector<16xf32> loc(#loc20)
    %913 = llvm.extractelement %898[%1 : i32] : vector<16xf32> loc(#loc20)
    %914 = llvm.extractelement %898[%0 : i32] : vector<16xf32> loc(#loc20)
    %915 = llvm.insertvalue %899, %144[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %916 = llvm.insertvalue %900, %915[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %917 = llvm.insertvalue %901, %916[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %918 = llvm.insertvalue %902, %917[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %919 = llvm.insertvalue %903, %918[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %920 = llvm.insertvalue %904, %919[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %921 = llvm.insertvalue %905, %920[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %922 = llvm.insertvalue %906, %921[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %923 = llvm.insertvalue %907, %922[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %924 = llvm.insertvalue %908, %923[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %925 = llvm.insertvalue %909, %924[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %926 = llvm.insertvalue %910, %925[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %927 = llvm.insertvalue %911, %926[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %928 = llvm.insertvalue %912, %927[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %929 = llvm.insertvalue %913, %928[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %930 = llvm.insertvalue %914, %929[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %931 = llvm.extractvalue %256[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %932 = llvm.extractvalue %256[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %933 = llvm.extractvalue %256[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %934 = llvm.extractvalue %256[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %935 = llvm.extractvalue %256[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %936 = llvm.extractvalue %256[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %937 = llvm.extractvalue %256[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %938 = llvm.extractvalue %256[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %939 = llvm.getelementptr %259[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %940 = llvm.getelementptr %931[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %941 = llvm.getelementptr %260[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %942 = llvm.getelementptr %932[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %943 = llvm.getelementptr %261[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %944 = llvm.getelementptr %933[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %945 = llvm.getelementptr %262[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %946 = llvm.getelementptr %934[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %947 = llvm.getelementptr %263[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %948 = llvm.getelementptr %935[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %949 = llvm.getelementptr %264[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %950 = llvm.getelementptr %936[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %951 = llvm.getelementptr %265[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %952 = llvm.getelementptr %937[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %953 = llvm.getelementptr %266[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %954 = llvm.getelementptr %938[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %955 = llvm.insertvalue %939, %208[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %956 = llvm.insertvalue %940, %955[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %957 = llvm.insertvalue %941, %956[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %958 = llvm.insertvalue %942, %957[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %959 = llvm.insertvalue %943, %958[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %960 = llvm.insertvalue %944, %959[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %961 = llvm.insertvalue %945, %960[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %962 = llvm.insertvalue %946, %961[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %963 = llvm.insertvalue %947, %962[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %964 = llvm.insertvalue %948, %963[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %965 = llvm.insertvalue %949, %964[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %966 = llvm.insertvalue %950, %965[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %967 = llvm.insertvalue %951, %966[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %968 = llvm.insertvalue %952, %967[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %969 = llvm.insertvalue %953, %968[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %970 = llvm.insertvalue %954, %969[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %971 = llvm.extractvalue %257[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %972 = llvm.extractvalue %257[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %973 = llvm.extractvalue %257[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %974 = llvm.extractvalue %257[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %975 = llvm.getelementptr %572[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %976 = llvm.getelementptr %971[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %977 = llvm.getelementptr %573[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %978 = llvm.getelementptr %972[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %979 = llvm.getelementptr %574[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %980 = llvm.getelementptr %973[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %981 = llvm.getelementptr %575[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %982 = llvm.getelementptr %974[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %983 = llvm.insertvalue %975, %244[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %984 = llvm.insertvalue %976, %983[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %985 = llvm.insertvalue %977, %984[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %986 = llvm.insertvalue %978, %985[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %987 = llvm.insertvalue %979, %986[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %988 = llvm.insertvalue %980, %987[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %989 = llvm.insertvalue %981, %988[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %990 = llvm.insertvalue %982, %989[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %991 = llvm.add %254, %41  : i32 loc(#loc6)
    llvm.br ^bb1(%991, %930, %970, %990 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc6)
  ^bb3:  // pred: ^bb1
    %992 = llvm.mul %164, %arg5  : i32 loc(#loc15)
    %993 = llvm.mul %165, %arg5  : i32 loc(#loc15)
    %994 = llvm.mul %166, %arg5  : i32 loc(#loc15)
    %995 = llvm.mul %167, %arg5  : i32 loc(#loc15)
    %996 = llvm.mul %168, %arg5  : i32 loc(#loc15)
    %997 = llvm.mul %169, %arg5  : i32 loc(#loc15)
    %998 = llvm.mul %170, %arg5  : i32 loc(#loc15)
    %999 = llvm.mul %171, %arg5  : i32 loc(#loc15)
    %1000 = llvm.mul %172, %arg5  : i32 loc(#loc15)
    %1001 = llvm.mul %173, %arg5  : i32 loc(#loc15)
    %1002 = llvm.mul %174, %arg5  : i32 loc(#loc15)
    %1003 = llvm.mul %175, %arg5  : i32 loc(#loc15)
    %1004 = llvm.mul %176, %arg5  : i32 loc(#loc15)
    %1005 = llvm.mul %177, %arg5  : i32 loc(#loc15)
    %1006 = llvm.mul %178, %arg5  : i32 loc(#loc15)
    %1007 = llvm.mul %179, %arg5  : i32 loc(#loc15)
    %1008 = llvm.getelementptr %arg2[%992] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1009 = llvm.getelementptr %arg2[%993] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1010 = llvm.getelementptr %arg2[%994] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1011 = llvm.getelementptr %arg2[%995] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1012 = llvm.getelementptr %arg2[%996] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1013 = llvm.getelementptr %arg2[%997] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1014 = llvm.getelementptr %arg2[%998] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1015 = llvm.getelementptr %arg2[%999] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1016 = llvm.getelementptr %arg2[%1000] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1017 = llvm.getelementptr %arg2[%1001] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1018 = llvm.getelementptr %arg2[%1002] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1019 = llvm.getelementptr %arg2[%1003] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1020 = llvm.getelementptr %arg2[%1004] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1021 = llvm.getelementptr %arg2[%1005] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1022 = llvm.getelementptr %arg2[%1006] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1023 = llvm.getelementptr %arg2[%1007] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1024 = llvm.getelementptr %1008[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1025 = llvm.getelementptr %1009[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1026 = llvm.getelementptr %1010[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1027 = llvm.getelementptr %1011[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1028 = llvm.getelementptr %1012[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1029 = llvm.getelementptr %1013[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1030 = llvm.getelementptr %1014[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1031 = llvm.getelementptr %1015[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1032 = llvm.getelementptr %1016[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1033 = llvm.getelementptr %1017[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1034 = llvm.getelementptr %1018[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1035 = llvm.getelementptr %1019[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1036 = llvm.getelementptr %1020[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1037 = llvm.getelementptr %1021[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1038 = llvm.getelementptr %1022[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1039 = llvm.getelementptr %1023[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1040 = llvm.extractvalue %255[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1041 = llvm.extractvalue %255[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1042 = llvm.extractvalue %255[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1043 = llvm.extractvalue %255[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1044 = llvm.extractvalue %255[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1045 = llvm.extractvalue %255[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1046 = llvm.extractvalue %255[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1047 = llvm.extractvalue %255[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1048 = llvm.extractvalue %255[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1049 = llvm.extractvalue %255[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1050 = llvm.extractvalue %255[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1051 = llvm.extractvalue %255[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1052 = llvm.extractvalue %255[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1053 = llvm.extractvalue %255[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1054 = llvm.extractvalue %255[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1055 = llvm.extractvalue %255[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1056 = llvm.mul %69, %36  : i32 loc(#loc18)
    %1057 = llvm.add %1056, %131  : i32 loc(#loc18)
    %1058 = llvm.mul %1057, %40  : i32 loc(#loc18)
    %1059 = llvm.icmp "slt" %1058, %36 : i32 loc(#loc18)
    %1060 = llvm.and %16, %1059  : i1 loc(#loc18)
    %1061 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1062 = llvm.insertelement %1040, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1063 = llvm.bitcast %1062 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb4, ^bb5 loc(#loc18)
  ^bb4:  // pred: ^bb3
    llvm.store %1063, %1024 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb5 loc(#loc18)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    %1064 = llvm.insertelement %1041, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1065 = llvm.bitcast %1064 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb6, ^bb7 loc(#loc18)
  ^bb6:  // pred: ^bb5
    llvm.store %1065, %1025 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb7 loc(#loc18)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %1066 = llvm.insertelement %1042, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1067 = llvm.bitcast %1066 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb8, ^bb9 loc(#loc18)
  ^bb8:  // pred: ^bb7
    llvm.store %1067, %1026 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %1068 = llvm.insertelement %1043, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1069 = llvm.bitcast %1068 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb10, ^bb11 loc(#loc18)
  ^bb10:  // pred: ^bb9
    llvm.store %1069, %1027 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb11 loc(#loc18)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %1070 = llvm.insertelement %1044, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1071 = llvm.bitcast %1070 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb12, ^bb13 loc(#loc18)
  ^bb12:  // pred: ^bb11
    llvm.store %1071, %1028 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb13 loc(#loc18)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    %1072 = llvm.insertelement %1045, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1073 = llvm.bitcast %1072 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb14, ^bb15 loc(#loc18)
  ^bb14:  // pred: ^bb13
    llvm.store %1073, %1029 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb15 loc(#loc18)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %1074 = llvm.insertelement %1046, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1075 = llvm.bitcast %1074 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb16, ^bb17 loc(#loc18)
  ^bb16:  // pred: ^bb15
    llvm.store %1075, %1030 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb17 loc(#loc18)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    %1076 = llvm.insertelement %1047, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1077 = llvm.bitcast %1076 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb18, ^bb19 loc(#loc18)
  ^bb18:  // pred: ^bb17
    llvm.store %1077, %1031 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb19 loc(#loc18)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    %1078 = llvm.insertelement %1048, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1079 = llvm.bitcast %1078 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb20, ^bb21 loc(#loc18)
  ^bb20:  // pred: ^bb19
    llvm.store %1079, %1032 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb21 loc(#loc18)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    %1080 = llvm.insertelement %1049, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1081 = llvm.bitcast %1080 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb22, ^bb23 loc(#loc18)
  ^bb22:  // pred: ^bb21
    llvm.store %1081, %1033 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb23 loc(#loc18)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    %1082 = llvm.insertelement %1050, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1083 = llvm.bitcast %1082 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb24, ^bb25 loc(#loc18)
  ^bb24:  // pred: ^bb23
    llvm.store %1083, %1034 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb25 loc(#loc18)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    %1084 = llvm.insertelement %1051, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1085 = llvm.bitcast %1084 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb26, ^bb27 loc(#loc18)
  ^bb26:  // pred: ^bb25
    llvm.store %1085, %1035 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb27 loc(#loc18)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    %1086 = llvm.insertelement %1052, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1087 = llvm.bitcast %1086 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb28, ^bb29 loc(#loc18)
  ^bb28:  // pred: ^bb27
    llvm.store %1087, %1036 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb29 loc(#loc18)
  ^bb29:  // 2 preds: ^bb27, ^bb28
    %1088 = llvm.insertelement %1053, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1089 = llvm.bitcast %1088 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb30, ^bb31 loc(#loc18)
  ^bb30:  // pred: ^bb29
    llvm.store %1089, %1037 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb31 loc(#loc18)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    %1090 = llvm.insertelement %1054, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1091 = llvm.bitcast %1090 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb32, ^bb33 loc(#loc18)
  ^bb32:  // pred: ^bb31
    llvm.store %1091, %1038 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb33 loc(#loc18)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    %1092 = llvm.insertelement %1055, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1093 = llvm.bitcast %1092 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb34, ^bb35 loc(#loc18)
  ^bb34:  // pred: ^bb33
    llvm.store %1093, %1039 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb35 loc(#loc18)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    llvm.return loc(#loc19)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#loc20 = loc(fused[#loc1, #loc2])


// -----// IR Dump After LLVMDIScope (enable-line-info) //----- //
#loc = loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)
#loc2 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:33)
#loc6 = loc("/triton/python/test/unit/language/test_core_amd.py":1977:25)
#loc7 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:51)
#loc8 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)
module attributes {"triton_gpu.compute-capability" = 0 : i32, triton_gpu.externs = {library_0 = "/triton/python/triton/third_party/hip/lib/bitcode/opencl.bc", library_1 = "/triton/python/triton/third_party/hip/lib/bitcode/ocml.bc", library_2 = "/triton/python/triton/third_party/hip/lib/bitcode/ockl.bc", library_3 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_finite_only_off.bc", library_4 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_daz_opt_off.bc", library_5 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_correctly_rounded_sqrt_on.bc", library_6 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_unsafe_math_off.bc", library_7 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_wavefrontsize64_on.bc", library_8 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_abi_version_400.bc", library_9 = "/triton/python/triton/third_party/hip/lib/bitcode/oclc_isa_version_90a.bc"}, "triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.shared = 8192 : i32, "triton_gpu.threads-per-warp" = 64 : i32} {
  llvm.mlir.global external @global_smem() {addr_space = 3 : i32} : !llvm.array<0 x i8> loc(#loc)
  llvm.func @matmul_kernel_0d1d2d3de4c5de6c7de8c(%arg0: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg1: !llvm.ptr<f16, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg2: !llvm.ptr<f32, 1> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg3: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg4: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0), %arg5: i32 {tt.divisibility = 16 : i32, tt.max_divisibility = 8 : i32} loc("/triton/python/test/unit/language/test_core_amd.py":1970:0)) attributes {noinline = false, nvvm.kernel = 1 : ui1, sym_visibility = "public", "triton_gpu.num-tma-load" = 0 : i32, "triton_gpu.num-tma-store" = 0 : i32} {
    %0 = llvm.mlir.constant(15 : i32) : i32 loc(#loc20)
    %1 = llvm.mlir.constant(14 : i32) : i32 loc(#loc20)
    %2 = llvm.mlir.constant(13 : i32) : i32 loc(#loc20)
    %3 = llvm.mlir.constant(12 : i32) : i32 loc(#loc20)
    %4 = llvm.mlir.constant(1792 : i32) : i32 loc(#loc3)
    %5 = llvm.mlir.constant(1536 : i32) : i32 loc(#loc3)
    %6 = llvm.mlir.constant(1280 : i32) : i32 loc(#loc3)
    %7 = llvm.mlir.constant(1024 : i32) : i32 loc(#loc3)
    %8 = llvm.mlir.constant(768 : i32) : i32 loc(#loc3)
    %9 = llvm.mlir.constant(512 : i32) : i32 loc(#loc3)
    %10 = llvm.mlir.constant(256 : i32) : i32 loc(#loc3)
    %11 = llvm.mlir.constant(96 : i32) : i32 loc(#loc3)
    %12 = llvm.mlir.constant(56 : i32) : i32 loc(#loc4)
    %13 = llvm.mlir.constant(48 : i32) : i32 loc(#loc4)
    %14 = llvm.mlir.constant(40 : i32) : i32 loc(#loc4)
    %15 = llvm.mlir.constant(1 : index) : i32 loc(#loc4)
    %16 = llvm.mlir.constant(true) : i1 loc(#loc4)
    %17 = llvm.mlir.constant(0 : index) : i32 loc(#loc5)
    %18 = llvm.mlir.constant(128 : i32) : i32 loc(#loc6)
    %19 = llvm.mlir.constant(0.000000e+00 : f32) : f32 loc(#loc2)
    %20 = llvm.mlir.constant(7 : i32) : i32 loc(#loc7)
    %21 = llvm.mlir.constant(6 : i32) : i32 loc(#loc7)
    %22 = llvm.mlir.constant(5 : i32) : i32 loc(#loc7)
    %23 = llvm.mlir.constant(27 : i32) : i32 loc(#loc5)
    %24 = llvm.mlir.constant(26 : i32) : i32 loc(#loc5)
    %25 = llvm.mlir.constant(25 : i32) : i32 loc(#loc5)
    %26 = llvm.mlir.constant(24 : i32) : i32 loc(#loc5)
    %27 = llvm.mlir.constant(19 : i32) : i32 loc(#loc5)
    %28 = llvm.mlir.constant(18 : i32) : i32 loc(#loc5)
    %29 = llvm.mlir.constant(17 : i32) : i32 loc(#loc5)
    %30 = llvm.mlir.constant(11 : i32) : i32 loc(#loc5)
    %31 = llvm.mlir.constant(10 : i32) : i32 loc(#loc5)
    %32 = llvm.mlir.constant(9 : i32) : i32 loc(#loc5)
    %33 = llvm.mlir.constant(3 : i32) : i32 loc(#loc5)
    %34 = llvm.mlir.constant(2 : i32) : i32 loc(#loc5)
    %35 = llvm.mlir.constant(16 : i32) : i32 loc(#loc5)
    %36 = llvm.mlir.constant(32 : i32) : i32 loc(#loc5)
    %37 = llvm.mlir.constant(0 : i32) : i32 loc(#loc5)
    %38 = llvm.mlir.constant(8 : i32) : i32 loc(#loc5)
    %39 = llvm.mlir.constant(4 : i32) : i32 loc(#loc5)
    %40 = llvm.mlir.constant(1 : i32) : i32 loc(#loc5)
    %41 = llvm.mlir.constant(64 : i32) : i32 loc(#loc5)
    %42 = rocdl.workitem.id.x : i32 loc(#loc5)
    %43 = llvm.urem %42, %41  : i32 loc(#loc5)
    %44 = llvm.udiv %42, %41  : i32 loc(#loc5)
    %45 = llvm.udiv %44, %40  : i32 loc(#loc5)
    %46 = llvm.urem %45, %39  : i32 loc(#loc5)
    %47 = llvm.udiv %43, %38  : i32 loc(#loc5)
    %48 = llvm.urem %47, %38  : i32 loc(#loc5)
    %49 = llvm.urem %46, %38  : i32 loc(#loc5)
    %50 = llvm.urem %48, %41  : i32 loc(#loc5)
    %51 = llvm.mul %49, %38  : i32 loc(#loc5)
    %52 = llvm.add %50, %51  : i32 loc(#loc5)
    %53 = llvm.mul %52, %40  : i32 loc(#loc5)
    %54 = llvm.urem %37, %40  : i32 loc(#loc5)
    %55 = llvm.urem %54, %40  : i32 loc(#loc5)
    %56 = llvm.mul %55, %41  : i32 loc(#loc5)
    %57 = llvm.add %53, %56  : i32 loc(#loc5)
    %58 = llvm.add %57, %37  : i32 loc(#loc5)
    %59 = llvm.add %57, %36  : i32 loc(#loc5)
    %60 = llvm.udiv %43, %39  : i32 loc(#loc5)
    %61 = llvm.urem %60, %35  : i32 loc(#loc5)
    %62 = llvm.urem %46, %39  : i32 loc(#loc5)
    %63 = llvm.urem %61, %41  : i32 loc(#loc5)
    %64 = llvm.mul %62, %35  : i32 loc(#loc5)
    %65 = llvm.add %63, %64  : i32 loc(#loc5)
    %66 = llvm.mul %65, %40  : i32 loc(#loc5)
    %67 = llvm.add %66, %56  : i32 loc(#loc5)
    %68 = llvm.add %67, %37  : i32 loc(#loc5)
    %69 = llvm.urem %44, %34  : i32 loc(#loc5)
    %70 = llvm.urem %69, %34  : i32 loc(#loc5)
    %71 = llvm.mul %70, %36  : i32 loc(#loc5)
    %72 = llvm.udiv %43, %36  : i32 loc(#loc5)
    %73 = llvm.mul %72, %39  : i32 loc(#loc5)
    %74 = llvm.add %73, %71  : i32 loc(#loc5)
    %75 = llvm.udiv %37, %40  : i32 loc(#loc5)
    %76 = llvm.urem %75, %40  : i32 loc(#loc5)
    %77 = llvm.urem %76, %40  : i32 loc(#loc5)
    %78 = llvm.mul %77, %41  : i32 loc(#loc5)
    %79 = llvm.add %74, %78  : i32 loc(#loc5)
    %80 = llvm.add %79, %37  : i32 loc(#loc5)
    %81 = llvm.add %79, %40  : i32 loc(#loc5)
    %82 = llvm.add %79, %34  : i32 loc(#loc5)
    %83 = llvm.add %79, %33  : i32 loc(#loc5)
    %84 = llvm.add %79, %38  : i32 loc(#loc5)
    %85 = llvm.add %79, %32  : i32 loc(#loc5)
    %86 = llvm.add %79, %31  : i32 loc(#loc5)
    %87 = llvm.add %79, %30  : i32 loc(#loc5)
    %88 = llvm.add %79, %35  : i32 loc(#loc5)
    %89 = llvm.add %79, %29  : i32 loc(#loc5)
    %90 = llvm.add %79, %28  : i32 loc(#loc5)
    %91 = llvm.add %79, %27  : i32 loc(#loc5)
    %92 = llvm.add %79, %26  : i32 loc(#loc5)
    %93 = llvm.add %79, %25  : i32 loc(#loc5)
    %94 = llvm.add %79, %24  : i32 loc(#loc5)
    %95 = llvm.add %79, %23  : i32 loc(#loc5)
    %96 = llvm.urem %44, %40  : i32 loc(#loc7)
    %97 = llvm.urem %43, %38  : i32 loc(#loc7)
    %98 = llvm.urem %96, %40  : i32 loc(#loc7)
    %99 = llvm.urem %97, %38  : i32 loc(#loc7)
    %100 = llvm.mul %98, %38  : i32 loc(#loc7)
    %101 = llvm.add %99, %100  : i32 loc(#loc7)
    %102 = llvm.mul %101, %38  : i32 loc(#loc7)
    %103 = llvm.add %102, %78  : i32 loc(#loc7)
    %104 = llvm.add %103, %37  : i32 loc(#loc7)
    %105 = llvm.add %103, %40  : i32 loc(#loc7)
    %106 = llvm.add %103, %34  : i32 loc(#loc7)
    %107 = llvm.add %103, %33  : i32 loc(#loc7)
    %108 = llvm.add %103, %39  : i32 loc(#loc7)
    %109 = llvm.add %103, %22  : i32 loc(#loc7)
    %110 = llvm.add %103, %21  : i32 loc(#loc7)
    %111 = llvm.add %103, %20  : i32 loc(#loc7)
    %112 = llvm.urem %43, %39  : i32 loc(#loc8)
    %113 = llvm.urem %112, %39  : i32 loc(#loc8)
    %114 = llvm.mul %98, %39  : i32 loc(#loc8)
    %115 = llvm.add %113, %114  : i32 loc(#loc8)
    %116 = llvm.mul %115, %38  : i32 loc(#loc8)
    %117 = llvm.mul %77, %36  : i32 loc(#loc8)
    %118 = llvm.add %116, %117  : i32 loc(#loc8)
    %119 = llvm.add %118, %37  : i32 loc(#loc8)
    %120 = llvm.add %118, %40  : i32 loc(#loc8)
    %121 = llvm.add %118, %34  : i32 loc(#loc8)
    %122 = llvm.add %118, %33  : i32 loc(#loc8)
    %123 = llvm.add %118, %39  : i32 loc(#loc8)
    %124 = llvm.add %118, %22  : i32 loc(#loc8)
    %125 = llvm.add %118, %21  : i32 loc(#loc8)
    %126 = llvm.add %118, %20  : i32 loc(#loc8)
    %127 = llvm.udiv %44, %34  : i32 loc(#loc8)
    %128 = llvm.urem %127, %34  : i32 loc(#loc8)
    %129 = llvm.urem %128, %40  : i32 loc(#loc8)
    %130 = llvm.mul %129, %36  : i32 loc(#loc8)
    %131 = llvm.urem %43, %36  : i32 loc(#loc8)
    %132 = llvm.add %131, %130  : i32 loc(#loc8)
    %133 = llvm.mul %55, %36  : i32 loc(#loc8)
    %134 = llvm.add %132, %133  : i32 loc(#loc8)
    %135 = llvm.add %134, %37  : i32 loc(#loc8)
    %136 = llvm.add %53, %37  : i32 loc(#loc4)
    %137 = llvm.add %102, %37  : i32 loc(#loc4)
    %138 = llvm.add %102, %39  : i32 loc(#loc4)
    %139 = llvm.add %53, %36  : i32 loc(#loc4)
    %140 = llvm.add %66, %37  : i32 loc(#loc3)
    %141 = llvm.add %116, %37  : i32 loc(#loc3)
    %142 = llvm.mlir.addressof @global_smem : !llvm.ptr<array<0 x i8>, 3> loc(#loc)
    %143 = llvm.bitcast %142 : !llvm.ptr<array<0 x i8>, 3> to !llvm.ptr<i8, 3> loc(#loc)
    %144 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc(#loc2)
    %145 = llvm.insertvalue %19, %144[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %146 = llvm.insertvalue %19, %145[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %147 = llvm.insertvalue %19, %146[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %148 = llvm.insertvalue %19, %147[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %149 = llvm.insertvalue %19, %148[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %150 = llvm.insertvalue %19, %149[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %151 = llvm.insertvalue %19, %150[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %152 = llvm.insertvalue %19, %151[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %153 = llvm.insertvalue %19, %152[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %154 = llvm.insertvalue %19, %153[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %155 = llvm.insertvalue %19, %154[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %156 = llvm.insertvalue %19, %155[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %157 = llvm.insertvalue %19, %156[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %158 = llvm.insertvalue %19, %157[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %159 = llvm.insertvalue %19, %158[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %160 = llvm.insertvalue %19, %159[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc2)
    %161 = llvm.add %58, %17  : i32 loc(#loc5)
    %162 = llvm.add %59, %17  : i32 loc(#loc5)
    %163 = llvm.add %68, %17  : i32 loc(#loc5)
    %164 = llvm.add %80, %17  : i32 loc(#loc5)
    %165 = llvm.add %81, %17  : i32 loc(#loc5)
    %166 = llvm.add %82, %17  : i32 loc(#loc5)
    %167 = llvm.add %83, %17  : i32 loc(#loc5)
    %168 = llvm.add %84, %17  : i32 loc(#loc5)
    %169 = llvm.add %85, %17  : i32 loc(#loc5)
    %170 = llvm.add %86, %17  : i32 loc(#loc5)
    %171 = llvm.add %87, %17  : i32 loc(#loc5)
    %172 = llvm.add %88, %17  : i32 loc(#loc5)
    %173 = llvm.add %89, %17  : i32 loc(#loc5)
    %174 = llvm.add %90, %17  : i32 loc(#loc5)
    %175 = llvm.add %91, %17  : i32 loc(#loc5)
    %176 = llvm.add %92, %17  : i32 loc(#loc5)
    %177 = llvm.add %93, %17  : i32 loc(#loc5)
    %178 = llvm.add %94, %17  : i32 loc(#loc5)
    %179 = llvm.add %95, %17  : i32 loc(#loc5)
    %180 = llvm.mul %161, %arg3  : i32 loc(#loc9)
    %181 = llvm.mul %162, %arg3  : i32 loc(#loc9)
    %182 = llvm.getelementptr %arg0[%180] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc5)
    %183 = llvm.getelementptr %arg0[%181] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc5)
    %184 = llvm.add %104, %17  : i32 loc(#loc7)
    %185 = llvm.add %105, %17  : i32 loc(#loc7)
    %186 = llvm.add %106, %17  : i32 loc(#loc7)
    %187 = llvm.add %107, %17  : i32 loc(#loc7)
    %188 = llvm.add %108, %17  : i32 loc(#loc7)
    %189 = llvm.add %109, %17  : i32 loc(#loc7)
    %190 = llvm.add %110, %17  : i32 loc(#loc7)
    %191 = llvm.add %111, %17  : i32 loc(#loc7)
    %192 = llvm.getelementptr %182[%184] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %193 = llvm.getelementptr %182[%185] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %194 = llvm.getelementptr %182[%186] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %195 = llvm.getelementptr %182[%187] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %196 = llvm.getelementptr %182[%188] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %197 = llvm.getelementptr %182[%189] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %198 = llvm.getelementptr %182[%190] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %199 = llvm.getelementptr %182[%191] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %200 = llvm.getelementptr %183[%184] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %201 = llvm.getelementptr %183[%185] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %202 = llvm.getelementptr %183[%186] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %203 = llvm.getelementptr %183[%187] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %204 = llvm.getelementptr %183[%188] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %205 = llvm.getelementptr %183[%189] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %206 = llvm.getelementptr %183[%190] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %207 = llvm.getelementptr %183[%191] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc7)
    %208 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc7)
    %209 = llvm.insertvalue %192, %208[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %210 = llvm.insertvalue %193, %209[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %211 = llvm.insertvalue %194, %210[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %212 = llvm.insertvalue %195, %211[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %213 = llvm.insertvalue %196, %212[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %214 = llvm.insertvalue %197, %213[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %215 = llvm.insertvalue %198, %214[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %216 = llvm.insertvalue %199, %215[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %217 = llvm.insertvalue %200, %216[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %218 = llvm.insertvalue %201, %217[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %219 = llvm.insertvalue %202, %218[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %220 = llvm.insertvalue %203, %219[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %221 = llvm.insertvalue %204, %220[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %222 = llvm.insertvalue %205, %221[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %223 = llvm.insertvalue %206, %222[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %224 = llvm.insertvalue %207, %223[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc7)
    %225 = llvm.mul %163, %arg4  : i32 loc(#loc10)
    %226 = llvm.getelementptr %arg1[%225] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc11)
    %227 = llvm.add %119, %17  : i32 loc(#loc8)
    %228 = llvm.add %120, %17  : i32 loc(#loc8)
    %229 = llvm.add %121, %17  : i32 loc(#loc8)
    %230 = llvm.add %122, %17  : i32 loc(#loc8)
    %231 = llvm.add %123, %17  : i32 loc(#loc8)
    %232 = llvm.add %124, %17  : i32 loc(#loc8)
    %233 = llvm.add %125, %17  : i32 loc(#loc8)
    %234 = llvm.add %126, %17  : i32 loc(#loc8)
    %235 = llvm.add %135, %17  : i32 loc(#loc8)
    %236 = llvm.getelementptr %226[%227] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %237 = llvm.getelementptr %226[%228] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %238 = llvm.getelementptr %226[%229] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %239 = llvm.getelementptr %226[%230] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %240 = llvm.getelementptr %226[%231] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %241 = llvm.getelementptr %226[%232] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %242 = llvm.getelementptr %226[%233] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %243 = llvm.getelementptr %226[%234] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc8)
    %244 = llvm.mlir.undef : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc(#loc8)
    %245 = llvm.insertvalue %236, %244[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %246 = llvm.insertvalue %237, %245[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %247 = llvm.insertvalue %238, %246[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %248 = llvm.insertvalue %239, %247[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %249 = llvm.insertvalue %240, %248[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %250 = llvm.insertvalue %241, %249[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %251 = llvm.insertvalue %242, %250[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %252 = llvm.insertvalue %243, %251[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc8)
    %253 = llvm.mul %arg4, %41  : i32 loc(#loc12)
    llvm.br ^bb1(%37, %160, %224, %252 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc6)
  ^bb1(%254: i32 loc("/triton/python/test/unit/language/test_core_amd.py":1977:25), %255: !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)> loc("/triton/python/test/unit/language/test_core_amd.py":1980:33), %256: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1974:51), %257: !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)> loc("/triton/python/test/unit/language/test_core_amd.py":1975:51)):  // 2 preds: ^bb0, ^bb2
    %258 = llvm.icmp "slt" %254, %18 : i32 loc(#loc6)
    llvm.cond_br %258, ^bb2, ^bb3 loc(#loc6)
  ^bb2:  // pred: ^bb1
    %259 = llvm.extractvalue %256[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %260 = llvm.extractvalue %256[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %261 = llvm.extractvalue %256[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %262 = llvm.extractvalue %256[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %263 = llvm.extractvalue %256[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %264 = llvm.extractvalue %256[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %265 = llvm.extractvalue %256[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %266 = llvm.extractvalue %256[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc4)
    %267 = llvm.addrspacecast %259 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %268 = llvm.load %267 : !llvm.ptr<i32> loc(#loc4)
    %269 = llvm.bitcast %268 : i32 to vector<2xf16> loc(#loc4)
    %270 = llvm.extractelement %269[%17 : i32] : vector<2xf16> loc(#loc4)
    %271 = llvm.extractelement %269[%15 : i32] : vector<2xf16> loc(#loc4)
    %272 = llvm.addrspacecast %260 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %273 = llvm.load %272 : !llvm.ptr<i32> loc(#loc4)
    %274 = llvm.bitcast %273 : i32 to vector<2xf16> loc(#loc4)
    %275 = llvm.extractelement %274[%17 : i32] : vector<2xf16> loc(#loc4)
    %276 = llvm.extractelement %274[%15 : i32] : vector<2xf16> loc(#loc4)
    %277 = llvm.addrspacecast %261 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %278 = llvm.load %277 : !llvm.ptr<i32> loc(#loc4)
    %279 = llvm.bitcast %278 : i32 to vector<2xf16> loc(#loc4)
    %280 = llvm.extractelement %279[%17 : i32] : vector<2xf16> loc(#loc4)
    %281 = llvm.extractelement %279[%15 : i32] : vector<2xf16> loc(#loc4)
    %282 = llvm.addrspacecast %262 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %283 = llvm.load %282 : !llvm.ptr<i32> loc(#loc4)
    %284 = llvm.bitcast %283 : i32 to vector<2xf16> loc(#loc4)
    %285 = llvm.extractelement %284[%17 : i32] : vector<2xf16> loc(#loc4)
    %286 = llvm.extractelement %284[%15 : i32] : vector<2xf16> loc(#loc4)
    %287 = llvm.addrspacecast %263 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %288 = llvm.load %287 : !llvm.ptr<i32> loc(#loc4)
    %289 = llvm.bitcast %288 : i32 to vector<2xf16> loc(#loc4)
    %290 = llvm.extractelement %289[%17 : i32] : vector<2xf16> loc(#loc4)
    %291 = llvm.extractelement %289[%15 : i32] : vector<2xf16> loc(#loc4)
    %292 = llvm.addrspacecast %264 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %293 = llvm.load %292 : !llvm.ptr<i32> loc(#loc4)
    %294 = llvm.bitcast %293 : i32 to vector<2xf16> loc(#loc4)
    %295 = llvm.extractelement %294[%17 : i32] : vector<2xf16> loc(#loc4)
    %296 = llvm.extractelement %294[%15 : i32] : vector<2xf16> loc(#loc4)
    %297 = llvm.addrspacecast %265 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %298 = llvm.load %297 : !llvm.ptr<i32> loc(#loc4)
    %299 = llvm.bitcast %298 : i32 to vector<2xf16> loc(#loc4)
    %300 = llvm.extractelement %299[%17 : i32] : vector<2xf16> loc(#loc4)
    %301 = llvm.extractelement %299[%15 : i32] : vector<2xf16> loc(#loc4)
    %302 = llvm.addrspacecast %266 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc4)
    %303 = llvm.load %302 : !llvm.ptr<i32> loc(#loc4)
    %304 = llvm.bitcast %303 : i32 to vector<2xf16> loc(#loc4)
    %305 = llvm.extractelement %304[%17 : i32] : vector<2xf16> loc(#loc4)
    %306 = llvm.extractelement %304[%15 : i32] : vector<2xf16> loc(#loc4)
    rocdl.barrier loc(#loc4)
    %307 = llvm.bitcast %143 : !llvm.ptr<i8, 3> to !llvm.ptr<f16, 3> loc(#loc4)
    %308 = llvm.mul %37, %41  : i32 loc(#loc4)
    %309 = llvm.add %308, %37  : i32 loc(#loc4)
    %310 = llvm.mul %37, %40  : i32 loc(#loc4)
    %311 = llvm.add %309, %310  : i32 loc(#loc4)
    %312 = llvm.getelementptr %307[%311] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %313 = llvm.udiv %136, %40  : i32 loc(#loc4)
    %314 = llvm.urem %313, %35  : i32 loc(#loc4)
    %315 = llvm.mul %136, %41  : i32 loc(#loc4)
    %316 = llvm.udiv %137, %39  : i32 loc(#loc4)
    %317 = llvm.xor %316, %314  : i32 loc(#loc4)
    %318 = llvm.mul %317, %39  : i32 loc(#loc4)
    %319 = llvm.urem %137, %39  : i32 loc(#loc4)
    %320 = llvm.udiv %319, %39  : i32 loc(#loc4)
    %321 = llvm.mul %320, %39  : i32 loc(#loc4)
    %322 = llvm.add %318, %321  : i32 loc(#loc4)
    %323 = llvm.mul %322, %40  : i32 loc(#loc4)
    %324 = llvm.add %315, %323  : i32 loc(#loc4)
    %325 = llvm.add %324, %37  : i32 loc(#loc4)
    %326 = llvm.getelementptr %312[%325] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %327 = llvm.getelementptr %326[%309] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %328 = llvm.udiv %138, %39  : i32 loc(#loc4)
    %329 = llvm.xor %328, %314  : i32 loc(#loc4)
    %330 = llvm.mul %329, %39  : i32 loc(#loc4)
    %331 = llvm.urem %138, %39  : i32 loc(#loc4)
    %332 = llvm.udiv %331, %39  : i32 loc(#loc4)
    %333 = llvm.mul %332, %39  : i32 loc(#loc4)
    %334 = llvm.add %330, %333  : i32 loc(#loc4)
    %335 = llvm.mul %334, %40  : i32 loc(#loc4)
    %336 = llvm.add %315, %335  : i32 loc(#loc4)
    %337 = llvm.add %336, %37  : i32 loc(#loc4)
    %338 = llvm.getelementptr %312[%337] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %339 = llvm.getelementptr %338[%309] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %340 = llvm.udiv %139, %40  : i32 loc(#loc4)
    %341 = llvm.urem %340, %35  : i32 loc(#loc4)
    %342 = llvm.xor %316, %341  : i32 loc(#loc4)
    %343 = llvm.mul %342, %39  : i32 loc(#loc4)
    %344 = llvm.add %343, %321  : i32 loc(#loc4)
    %345 = llvm.mul %344, %40  : i32 loc(#loc4)
    %346 = llvm.add %315, %345  : i32 loc(#loc4)
    %347 = llvm.add %346, %37  : i32 loc(#loc4)
    %348 = llvm.getelementptr %312[%347] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %349 = llvm.mul %36, %41  : i32 loc(#loc4)
    %350 = llvm.add %349, %37  : i32 loc(#loc4)
    %351 = llvm.getelementptr %348[%350] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %352 = llvm.xor %328, %341  : i32 loc(#loc4)
    %353 = llvm.mul %352, %39  : i32 loc(#loc4)
    %354 = llvm.add %353, %333  : i32 loc(#loc4)
    %355 = llvm.mul %354, %40  : i32 loc(#loc4)
    %356 = llvm.add %315, %355  : i32 loc(#loc4)
    %357 = llvm.add %356, %37  : i32 loc(#loc4)
    %358 = llvm.getelementptr %312[%357] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %359 = llvm.getelementptr %358[%350] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %360 = llvm.mlir.undef : vector<4xf16> loc(#loc4)
    %361 = llvm.insertelement %270, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %362 = llvm.insertelement %271, %361[%40 : i32] : vector<4xf16> loc(#loc4)
    %363 = llvm.insertelement %275, %362[%34 : i32] : vector<4xf16> loc(#loc4)
    %364 = llvm.insertelement %276, %363[%33 : i32] : vector<4xf16> loc(#loc4)
    %365 = llvm.bitcast %327 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %364, %365 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %366 = llvm.insertelement %280, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %367 = llvm.insertelement %281, %366[%40 : i32] : vector<4xf16> loc(#loc4)
    %368 = llvm.insertelement %285, %367[%34 : i32] : vector<4xf16> loc(#loc4)
    %369 = llvm.insertelement %286, %368[%33 : i32] : vector<4xf16> loc(#loc4)
    %370 = llvm.bitcast %339 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %369, %370 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %371 = llvm.insertelement %290, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %372 = llvm.insertelement %291, %371[%40 : i32] : vector<4xf16> loc(#loc4)
    %373 = llvm.insertelement %295, %372[%34 : i32] : vector<4xf16> loc(#loc4)
    %374 = llvm.insertelement %296, %373[%33 : i32] : vector<4xf16> loc(#loc4)
    %375 = llvm.bitcast %351 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %374, %375 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %376 = llvm.insertelement %300, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %377 = llvm.insertelement %301, %376[%40 : i32] : vector<4xf16> loc(#loc4)
    %378 = llvm.insertelement %305, %377[%34 : i32] : vector<4xf16> loc(#loc4)
    %379 = llvm.insertelement %306, %378[%33 : i32] : vector<4xf16> loc(#loc4)
    %380 = llvm.bitcast %359 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    llvm.store %379, %380 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    rocdl.barrier loc(#loc4)
    %381 = llvm.icmp "uge" %43, %36 : i32 loc(#loc4)
    %382 = llvm.select %381, %39, %37 : i1, i32 loc(#loc4)
    %383 = llvm.add %71, %37  : i32 loc(#loc4)
    %384 = llvm.add %383, %37  : i32 loc(#loc4)
    %385 = llvm.add %384, %131  : i32 loc(#loc4)
    %386 = llvm.add %385, %37  : i32 loc(#loc4)
    %387 = llvm.add %37, %37  : i32 loc(#loc4)
    %388 = llvm.add %387, %37  : i32 loc(#loc4)
    %389 = llvm.add %388, %382  : i32 loc(#loc4)
    %390 = llvm.add %389, %37  : i32 loc(#loc4)
    %391 = llvm.add %386, %37  : i32 loc(#loc4)
    %392 = llvm.add %390, %37  : i32 loc(#loc4)
    %393 = llvm.add %387, %38  : i32 loc(#loc4)
    %394 = llvm.add %393, %382  : i32 loc(#loc4)
    %395 = llvm.add %394, %37  : i32 loc(#loc4)
    %396 = llvm.add %395, %37  : i32 loc(#loc4)
    %397 = llvm.add %387, %35  : i32 loc(#loc4)
    %398 = llvm.add %397, %382  : i32 loc(#loc4)
    %399 = llvm.add %398, %37  : i32 loc(#loc4)
    %400 = llvm.add %399, %37  : i32 loc(#loc4)
    %401 = llvm.add %387, %26  : i32 loc(#loc4)
    %402 = llvm.add %401, %382  : i32 loc(#loc4)
    %403 = llvm.add %402, %37  : i32 loc(#loc4)
    %404 = llvm.add %403, %37  : i32 loc(#loc4)
    %405 = llvm.add %387, %36  : i32 loc(#loc4)
    %406 = llvm.add %405, %382  : i32 loc(#loc4)
    %407 = llvm.add %406, %37  : i32 loc(#loc4)
    %408 = llvm.add %407, %37  : i32 loc(#loc4)
    %409 = llvm.add %387, %14  : i32 loc(#loc4)
    %410 = llvm.add %409, %382  : i32 loc(#loc4)
    %411 = llvm.add %410, %37  : i32 loc(#loc4)
    %412 = llvm.add %411, %37  : i32 loc(#loc4)
    %413 = llvm.add %387, %13  : i32 loc(#loc4)
    %414 = llvm.add %413, %382  : i32 loc(#loc4)
    %415 = llvm.add %414, %37  : i32 loc(#loc4)
    %416 = llvm.add %415, %37  : i32 loc(#loc4)
    %417 = llvm.add %387, %12  : i32 loc(#loc4)
    %418 = llvm.add %417, %382  : i32 loc(#loc4)
    %419 = llvm.add %418, %37  : i32 loc(#loc4)
    %420 = llvm.add %419, %37  : i32 loc(#loc4)
    %421 = llvm.udiv %391, %40  : i32 loc(#loc4)
    %422 = llvm.urem %421, %35  : i32 loc(#loc4)
    %423 = llvm.udiv %392, %39  : i32 loc(#loc4)
    %424 = llvm.xor %423, %422  : i32 loc(#loc4)
    %425 = llvm.mul %424, %39  : i32 loc(#loc4)
    %426 = llvm.urem %392, %39  : i32 loc(#loc4)
    %427 = llvm.add %425, %426  : i32 loc(#loc4)
    %428 = llvm.mul %391, %41  : i32 loc(#loc4)
    %429 = llvm.mul %427, %40  : i32 loc(#loc4)
    %430 = llvm.add %428, %429  : i32 loc(#loc4)
    %431 = llvm.udiv %396, %39  : i32 loc(#loc4)
    %432 = llvm.xor %431, %422  : i32 loc(#loc4)
    %433 = llvm.mul %432, %39  : i32 loc(#loc4)
    %434 = llvm.urem %396, %39  : i32 loc(#loc4)
    %435 = llvm.add %433, %434  : i32 loc(#loc4)
    %436 = llvm.mul %435, %40  : i32 loc(#loc4)
    %437 = llvm.add %428, %436  : i32 loc(#loc4)
    %438 = llvm.udiv %400, %39  : i32 loc(#loc4)
    %439 = llvm.xor %438, %422  : i32 loc(#loc4)
    %440 = llvm.mul %439, %39  : i32 loc(#loc4)
    %441 = llvm.urem %400, %39  : i32 loc(#loc4)
    %442 = llvm.add %440, %441  : i32 loc(#loc4)
    %443 = llvm.mul %442, %40  : i32 loc(#loc4)
    %444 = llvm.add %428, %443  : i32 loc(#loc4)
    %445 = llvm.udiv %404, %39  : i32 loc(#loc4)
    %446 = llvm.xor %445, %422  : i32 loc(#loc4)
    %447 = llvm.mul %446, %39  : i32 loc(#loc4)
    %448 = llvm.urem %404, %39  : i32 loc(#loc4)
    %449 = llvm.add %447, %448  : i32 loc(#loc4)
    %450 = llvm.mul %449, %40  : i32 loc(#loc4)
    %451 = llvm.add %428, %450  : i32 loc(#loc4)
    %452 = llvm.udiv %408, %39  : i32 loc(#loc4)
    %453 = llvm.xor %452, %422  : i32 loc(#loc4)
    %454 = llvm.mul %453, %39  : i32 loc(#loc4)
    %455 = llvm.urem %408, %39  : i32 loc(#loc4)
    %456 = llvm.add %454, %455  : i32 loc(#loc4)
    %457 = llvm.mul %456, %40  : i32 loc(#loc4)
    %458 = llvm.add %428, %457  : i32 loc(#loc4)
    %459 = llvm.udiv %412, %39  : i32 loc(#loc4)
    %460 = llvm.xor %459, %422  : i32 loc(#loc4)
    %461 = llvm.mul %460, %39  : i32 loc(#loc4)
    %462 = llvm.urem %412, %39  : i32 loc(#loc4)
    %463 = llvm.add %461, %462  : i32 loc(#loc4)
    %464 = llvm.mul %463, %40  : i32 loc(#loc4)
    %465 = llvm.add %428, %464  : i32 loc(#loc4)
    %466 = llvm.udiv %416, %39  : i32 loc(#loc4)
    %467 = llvm.xor %466, %422  : i32 loc(#loc4)
    %468 = llvm.mul %467, %39  : i32 loc(#loc4)
    %469 = llvm.urem %416, %39  : i32 loc(#loc4)
    %470 = llvm.add %468, %469  : i32 loc(#loc4)
    %471 = llvm.mul %470, %40  : i32 loc(#loc4)
    %472 = llvm.add %428, %471  : i32 loc(#loc4)
    %473 = llvm.udiv %420, %39  : i32 loc(#loc4)
    %474 = llvm.xor %473, %422  : i32 loc(#loc4)
    %475 = llvm.mul %474, %39  : i32 loc(#loc4)
    %476 = llvm.urem %420, %39  : i32 loc(#loc4)
    %477 = llvm.add %475, %476  : i32 loc(#loc4)
    %478 = llvm.mul %477, %40  : i32 loc(#loc4)
    %479 = llvm.add %428, %478  : i32 loc(#loc4)
    %480 = llvm.sub %37, %308  : i32 loc(#loc4)
    %481 = llvm.getelementptr %307[%480] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %482 = llvm.sub %37, %310  : i32 loc(#loc4)
    %483 = llvm.getelementptr %481[%482] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %484 = llvm.getelementptr %483[%430] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %485 = llvm.bitcast %484 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %486 = llvm.load %485 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %487 = llvm.extractelement %486[%37 : i32] : vector<4xf16> loc(#loc4)
    %488 = llvm.insertelement %487, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %489 = llvm.extractelement %486[%40 : i32] : vector<4xf16> loc(#loc4)
    %490 = llvm.insertelement %489, %488[%40 : i32] : vector<4xf16> loc(#loc4)
    %491 = llvm.extractelement %486[%34 : i32] : vector<4xf16> loc(#loc4)
    %492 = llvm.insertelement %491, %490[%34 : i32] : vector<4xf16> loc(#loc4)
    %493 = llvm.extractelement %486[%33 : i32] : vector<4xf16> loc(#loc4)
    %494 = llvm.insertelement %493, %492[%33 : i32] : vector<4xf16> loc(#loc4)
    %495 = llvm.getelementptr %483[%437] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %496 = llvm.bitcast %495 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %497 = llvm.load %496 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %498 = llvm.extractelement %497[%37 : i32] : vector<4xf16> loc(#loc4)
    %499 = llvm.insertelement %498, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %500 = llvm.extractelement %497[%40 : i32] : vector<4xf16> loc(#loc4)
    %501 = llvm.insertelement %500, %499[%40 : i32] : vector<4xf16> loc(#loc4)
    %502 = llvm.extractelement %497[%34 : i32] : vector<4xf16> loc(#loc4)
    %503 = llvm.insertelement %502, %501[%34 : i32] : vector<4xf16> loc(#loc4)
    %504 = llvm.extractelement %497[%33 : i32] : vector<4xf16> loc(#loc4)
    %505 = llvm.insertelement %504, %503[%33 : i32] : vector<4xf16> loc(#loc4)
    %506 = llvm.getelementptr %483[%444] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %507 = llvm.bitcast %506 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %508 = llvm.load %507 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %509 = llvm.extractelement %508[%37 : i32] : vector<4xf16> loc(#loc4)
    %510 = llvm.insertelement %509, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %511 = llvm.extractelement %508[%40 : i32] : vector<4xf16> loc(#loc4)
    %512 = llvm.insertelement %511, %510[%40 : i32] : vector<4xf16> loc(#loc4)
    %513 = llvm.extractelement %508[%34 : i32] : vector<4xf16> loc(#loc4)
    %514 = llvm.insertelement %513, %512[%34 : i32] : vector<4xf16> loc(#loc4)
    %515 = llvm.extractelement %508[%33 : i32] : vector<4xf16> loc(#loc4)
    %516 = llvm.insertelement %515, %514[%33 : i32] : vector<4xf16> loc(#loc4)
    %517 = llvm.getelementptr %483[%451] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %518 = llvm.bitcast %517 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %519 = llvm.load %518 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %520 = llvm.extractelement %519[%37 : i32] : vector<4xf16> loc(#loc4)
    %521 = llvm.insertelement %520, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %522 = llvm.extractelement %519[%40 : i32] : vector<4xf16> loc(#loc4)
    %523 = llvm.insertelement %522, %521[%40 : i32] : vector<4xf16> loc(#loc4)
    %524 = llvm.extractelement %519[%34 : i32] : vector<4xf16> loc(#loc4)
    %525 = llvm.insertelement %524, %523[%34 : i32] : vector<4xf16> loc(#loc4)
    %526 = llvm.extractelement %519[%33 : i32] : vector<4xf16> loc(#loc4)
    %527 = llvm.insertelement %526, %525[%33 : i32] : vector<4xf16> loc(#loc4)
    %528 = llvm.getelementptr %483[%458] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %529 = llvm.bitcast %528 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %530 = llvm.load %529 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %531 = llvm.extractelement %530[%37 : i32] : vector<4xf16> loc(#loc4)
    %532 = llvm.insertelement %531, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %533 = llvm.extractelement %530[%40 : i32] : vector<4xf16> loc(#loc4)
    %534 = llvm.insertelement %533, %532[%40 : i32] : vector<4xf16> loc(#loc4)
    %535 = llvm.extractelement %530[%34 : i32] : vector<4xf16> loc(#loc4)
    %536 = llvm.insertelement %535, %534[%34 : i32] : vector<4xf16> loc(#loc4)
    %537 = llvm.extractelement %530[%33 : i32] : vector<4xf16> loc(#loc4)
    %538 = llvm.insertelement %537, %536[%33 : i32] : vector<4xf16> loc(#loc4)
    %539 = llvm.getelementptr %483[%465] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %540 = llvm.bitcast %539 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %541 = llvm.load %540 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %542 = llvm.extractelement %541[%37 : i32] : vector<4xf16> loc(#loc4)
    %543 = llvm.insertelement %542, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %544 = llvm.extractelement %541[%40 : i32] : vector<4xf16> loc(#loc4)
    %545 = llvm.insertelement %544, %543[%40 : i32] : vector<4xf16> loc(#loc4)
    %546 = llvm.extractelement %541[%34 : i32] : vector<4xf16> loc(#loc4)
    %547 = llvm.insertelement %546, %545[%34 : i32] : vector<4xf16> loc(#loc4)
    %548 = llvm.extractelement %541[%33 : i32] : vector<4xf16> loc(#loc4)
    %549 = llvm.insertelement %548, %547[%33 : i32] : vector<4xf16> loc(#loc4)
    %550 = llvm.getelementptr %483[%472] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %551 = llvm.bitcast %550 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %552 = llvm.load %551 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %553 = llvm.extractelement %552[%37 : i32] : vector<4xf16> loc(#loc4)
    %554 = llvm.insertelement %553, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %555 = llvm.extractelement %552[%40 : i32] : vector<4xf16> loc(#loc4)
    %556 = llvm.insertelement %555, %554[%40 : i32] : vector<4xf16> loc(#loc4)
    %557 = llvm.extractelement %552[%34 : i32] : vector<4xf16> loc(#loc4)
    %558 = llvm.insertelement %557, %556[%34 : i32] : vector<4xf16> loc(#loc4)
    %559 = llvm.extractelement %552[%33 : i32] : vector<4xf16> loc(#loc4)
    %560 = llvm.insertelement %559, %558[%33 : i32] : vector<4xf16> loc(#loc4)
    %561 = llvm.getelementptr %483[%479] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc4)
    %562 = llvm.bitcast %561 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %563 = llvm.load %562 : !llvm.ptr<vector<4xf16>, 3> loc(#loc4)
    %564 = llvm.extractelement %563[%37 : i32] : vector<4xf16> loc(#loc4)
    %565 = llvm.insertelement %564, %360[%37 : i32] : vector<4xf16> loc(#loc4)
    %566 = llvm.extractelement %563[%40 : i32] : vector<4xf16> loc(#loc4)
    %567 = llvm.insertelement %566, %565[%40 : i32] : vector<4xf16> loc(#loc4)
    %568 = llvm.extractelement %563[%34 : i32] : vector<4xf16> loc(#loc4)
    %569 = llvm.insertelement %568, %567[%34 : i32] : vector<4xf16> loc(#loc4)
    %570 = llvm.extractelement %563[%33 : i32] : vector<4xf16> loc(#loc4)
    %571 = llvm.insertelement %570, %569[%33 : i32] : vector<4xf16> loc(#loc4)
    %572 = llvm.extractvalue %257[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %573 = llvm.extractvalue %257[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %574 = llvm.extractvalue %257[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %575 = llvm.extractvalue %257[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc3)
    %576 = llvm.addrspacecast %572 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %577 = llvm.load %576 : !llvm.ptr<i32> loc(#loc3)
    %578 = llvm.bitcast %577 : i32 to vector<2xf16> loc(#loc3)
    %579 = llvm.extractelement %578[%17 : i32] : vector<2xf16> loc(#loc3)
    %580 = llvm.extractelement %578[%15 : i32] : vector<2xf16> loc(#loc3)
    %581 = llvm.addrspacecast %573 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %582 = llvm.load %581 : !llvm.ptr<i32> loc(#loc3)
    %583 = llvm.bitcast %582 : i32 to vector<2xf16> loc(#loc3)
    %584 = llvm.extractelement %583[%17 : i32] : vector<2xf16> loc(#loc3)
    %585 = llvm.extractelement %583[%15 : i32] : vector<2xf16> loc(#loc3)
    %586 = llvm.addrspacecast %574 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %587 = llvm.load %586 : !llvm.ptr<i32> loc(#loc3)
    %588 = llvm.bitcast %587 : i32 to vector<2xf16> loc(#loc3)
    %589 = llvm.extractelement %588[%17 : i32] : vector<2xf16> loc(#loc3)
    %590 = llvm.extractelement %588[%15 : i32] : vector<2xf16> loc(#loc3)
    %591 = llvm.addrspacecast %575 : !llvm.ptr<f16, 1> to !llvm.ptr<i32> loc(#loc3)
    %592 = llvm.load %591 : !llvm.ptr<i32> loc(#loc3)
    %593 = llvm.bitcast %592 : i32 to vector<2xf16> loc(#loc3)
    %594 = llvm.extractelement %593[%17 : i32] : vector<2xf16> loc(#loc3)
    %595 = llvm.extractelement %593[%15 : i32] : vector<2xf16> loc(#loc3)
    rocdl.barrier loc(#loc3)
    %596 = llvm.mul %37, %36  : i32 loc(#loc3)
    %597 = llvm.add %596, %37  : i32 loc(#loc3)
    %598 = llvm.add %597, %310  : i32 loc(#loc3)
    %599 = llvm.getelementptr %307[%598] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %600 = llvm.udiv %140, %40  : i32 loc(#loc3)
    %601 = llvm.urem %600, %40  : i32 loc(#loc3)
    %602 = llvm.mul %140, %36  : i32 loc(#loc3)
    %603 = llvm.udiv %141, %40  : i32 loc(#loc3)
    %604 = llvm.xor %603, %601  : i32 loc(#loc3)
    %605 = llvm.mul %604, %40  : i32 loc(#loc3)
    %606 = llvm.urem %141, %40  : i32 loc(#loc3)
    %607 = llvm.udiv %606, %40  : i32 loc(#loc3)
    %608 = llvm.mul %607, %40  : i32 loc(#loc3)
    %609 = llvm.add %605, %608  : i32 loc(#loc3)
    %610 = llvm.mul %609, %40  : i32 loc(#loc3)
    %611 = llvm.add %602, %610  : i32 loc(#loc3)
    %612 = llvm.add %611, %37  : i32 loc(#loc3)
    %613 = llvm.getelementptr %599[%612] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %614 = llvm.getelementptr %613[%597] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %615 = llvm.add %596, %40  : i32 loc(#loc3)
    %616 = llvm.getelementptr %613[%615] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %617 = llvm.add %596, %34  : i32 loc(#loc3)
    %618 = llvm.getelementptr %613[%617] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %619 = llvm.add %596, %33  : i32 loc(#loc3)
    %620 = llvm.getelementptr %613[%619] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %621 = llvm.add %596, %39  : i32 loc(#loc3)
    %622 = llvm.getelementptr %613[%621] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %623 = llvm.add %596, %22  : i32 loc(#loc3)
    %624 = llvm.getelementptr %613[%623] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %625 = llvm.add %596, %21  : i32 loc(#loc3)
    %626 = llvm.getelementptr %613[%625] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %627 = llvm.add %596, %20  : i32 loc(#loc3)
    %628 = llvm.getelementptr %613[%627] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %629 = llvm.mlir.undef : vector<1xf16> loc(#loc3)
    %630 = llvm.insertelement %579, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %631 = llvm.bitcast %614 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %630, %631 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %632 = llvm.insertelement %580, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %633 = llvm.bitcast %616 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %632, %633 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %634 = llvm.insertelement %584, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %635 = llvm.bitcast %618 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %634, %635 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %636 = llvm.insertelement %585, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %637 = llvm.bitcast %620 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %636, %637 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %638 = llvm.insertelement %589, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %639 = llvm.bitcast %622 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %638, %639 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %640 = llvm.insertelement %590, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %641 = llvm.bitcast %624 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %640, %641 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %642 = llvm.insertelement %594, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %643 = llvm.bitcast %626 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %642, %643 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %644 = llvm.insertelement %595, %629[%37 : i32] : vector<1xf16> loc(#loc3)
    %645 = llvm.bitcast %628 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    llvm.store %644, %645 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    rocdl.barrier loc(#loc3)
    %646 = llvm.select %381, %18, %37 : i1, i32 loc(#loc3)
    %647 = llvm.add %646, %37  : i32 loc(#loc3)
    %648 = llvm.add %647, %131  : i32 loc(#loc3)
    %649 = llvm.add %130, %37  : i32 loc(#loc3)
    %650 = llvm.add %649, %37  : i32 loc(#loc3)
    %651 = llvm.add %650, %648  : i32 loc(#loc3)
    %652 = llvm.add %646, %36  : i32 loc(#loc3)
    %653 = llvm.add %652, %131  : i32 loc(#loc3)
    %654 = llvm.add %650, %653  : i32 loc(#loc3)
    %655 = llvm.add %646, %41  : i32 loc(#loc3)
    %656 = llvm.add %655, %131  : i32 loc(#loc3)
    %657 = llvm.add %650, %656  : i32 loc(#loc3)
    %658 = llvm.add %646, %11  : i32 loc(#loc3)
    %659 = llvm.add %658, %131  : i32 loc(#loc3)
    %660 = llvm.add %650, %659  : i32 loc(#loc3)
    %661 = llvm.add %649, %10  : i32 loc(#loc3)
    %662 = llvm.add %661, %648  : i32 loc(#loc3)
    %663 = llvm.add %661, %653  : i32 loc(#loc3)
    %664 = llvm.add %661, %656  : i32 loc(#loc3)
    %665 = llvm.add %661, %659  : i32 loc(#loc3)
    %666 = llvm.add %649, %9  : i32 loc(#loc3)
    %667 = llvm.add %666, %648  : i32 loc(#loc3)
    %668 = llvm.add %666, %653  : i32 loc(#loc3)
    %669 = llvm.add %666, %656  : i32 loc(#loc3)
    %670 = llvm.add %666, %659  : i32 loc(#loc3)
    %671 = llvm.add %649, %8  : i32 loc(#loc3)
    %672 = llvm.add %671, %648  : i32 loc(#loc3)
    %673 = llvm.add %671, %653  : i32 loc(#loc3)
    %674 = llvm.add %671, %656  : i32 loc(#loc3)
    %675 = llvm.add %671, %659  : i32 loc(#loc3)
    %676 = llvm.add %649, %7  : i32 loc(#loc3)
    %677 = llvm.add %676, %648  : i32 loc(#loc3)
    %678 = llvm.add %676, %653  : i32 loc(#loc3)
    %679 = llvm.add %676, %656  : i32 loc(#loc3)
    %680 = llvm.add %676, %659  : i32 loc(#loc3)
    %681 = llvm.add %649, %6  : i32 loc(#loc3)
    %682 = llvm.add %681, %648  : i32 loc(#loc3)
    %683 = llvm.add %681, %653  : i32 loc(#loc3)
    %684 = llvm.add %681, %656  : i32 loc(#loc3)
    %685 = llvm.add %681, %659  : i32 loc(#loc3)
    %686 = llvm.add %649, %5  : i32 loc(#loc3)
    %687 = llvm.add %686, %648  : i32 loc(#loc3)
    %688 = llvm.add %686, %653  : i32 loc(#loc3)
    %689 = llvm.add %686, %656  : i32 loc(#loc3)
    %690 = llvm.add %686, %659  : i32 loc(#loc3)
    %691 = llvm.add %649, %4  : i32 loc(#loc3)
    %692 = llvm.add %691, %648  : i32 loc(#loc3)
    %693 = llvm.add %691, %653  : i32 loc(#loc3)
    %694 = llvm.add %691, %656  : i32 loc(#loc3)
    %695 = llvm.add %691, %659  : i32 loc(#loc3)
    %696 = llvm.sub %37, %37  : i32 loc(#loc3)
    %697 = llvm.getelementptr %307[%696] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %698 = llvm.getelementptr %697[%651] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %699 = llvm.bitcast %698 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %700 = llvm.load %699 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %701 = llvm.extractelement %700[%37 : i32] : vector<1xf16> loc(#loc3)
    %702 = llvm.insertelement %701, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %703 = llvm.getelementptr %697[%654] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %704 = llvm.bitcast %703 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %705 = llvm.load %704 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %706 = llvm.extractelement %705[%37 : i32] : vector<1xf16> loc(#loc3)
    %707 = llvm.insertelement %706, %702[%40 : i32] : vector<4xf16> loc(#loc3)
    %708 = llvm.getelementptr %697[%657] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %709 = llvm.bitcast %708 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %710 = llvm.load %709 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %711 = llvm.extractelement %710[%37 : i32] : vector<1xf16> loc(#loc3)
    %712 = llvm.insertelement %711, %707[%34 : i32] : vector<4xf16> loc(#loc3)
    %713 = llvm.getelementptr %697[%660] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %714 = llvm.bitcast %713 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %715 = llvm.load %714 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %716 = llvm.extractelement %715[%37 : i32] : vector<1xf16> loc(#loc3)
    %717 = llvm.insertelement %716, %712[%33 : i32] : vector<4xf16> loc(#loc3)
    %718 = llvm.getelementptr %697[%662] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %719 = llvm.bitcast %718 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %720 = llvm.load %719 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %721 = llvm.extractelement %720[%37 : i32] : vector<1xf16> loc(#loc3)
    %722 = llvm.insertelement %721, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %723 = llvm.getelementptr %697[%663] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %724 = llvm.bitcast %723 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %725 = llvm.load %724 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %726 = llvm.extractelement %725[%37 : i32] : vector<1xf16> loc(#loc3)
    %727 = llvm.insertelement %726, %722[%40 : i32] : vector<4xf16> loc(#loc3)
    %728 = llvm.getelementptr %697[%664] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %729 = llvm.bitcast %728 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %730 = llvm.load %729 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %731 = llvm.extractelement %730[%37 : i32] : vector<1xf16> loc(#loc3)
    %732 = llvm.insertelement %731, %727[%34 : i32] : vector<4xf16> loc(#loc3)
    %733 = llvm.getelementptr %697[%665] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %734 = llvm.bitcast %733 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %735 = llvm.load %734 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %736 = llvm.extractelement %735[%37 : i32] : vector<1xf16> loc(#loc3)
    %737 = llvm.insertelement %736, %732[%33 : i32] : vector<4xf16> loc(#loc3)
    %738 = llvm.getelementptr %697[%667] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %739 = llvm.bitcast %738 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %740 = llvm.load %739 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %741 = llvm.extractelement %740[%37 : i32] : vector<1xf16> loc(#loc3)
    %742 = llvm.insertelement %741, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %743 = llvm.getelementptr %697[%668] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %744 = llvm.bitcast %743 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %745 = llvm.load %744 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %746 = llvm.extractelement %745[%37 : i32] : vector<1xf16> loc(#loc3)
    %747 = llvm.insertelement %746, %742[%40 : i32] : vector<4xf16> loc(#loc3)
    %748 = llvm.getelementptr %697[%669] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %749 = llvm.bitcast %748 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %750 = llvm.load %749 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %751 = llvm.extractelement %750[%37 : i32] : vector<1xf16> loc(#loc3)
    %752 = llvm.insertelement %751, %747[%34 : i32] : vector<4xf16> loc(#loc3)
    %753 = llvm.getelementptr %697[%670] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %754 = llvm.bitcast %753 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %755 = llvm.load %754 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %756 = llvm.extractelement %755[%37 : i32] : vector<1xf16> loc(#loc3)
    %757 = llvm.insertelement %756, %752[%33 : i32] : vector<4xf16> loc(#loc3)
    %758 = llvm.getelementptr %697[%672] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %759 = llvm.bitcast %758 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %760 = llvm.load %759 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %761 = llvm.extractelement %760[%37 : i32] : vector<1xf16> loc(#loc3)
    %762 = llvm.insertelement %761, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %763 = llvm.getelementptr %697[%673] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %764 = llvm.bitcast %763 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %765 = llvm.load %764 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %766 = llvm.extractelement %765[%37 : i32] : vector<1xf16> loc(#loc3)
    %767 = llvm.insertelement %766, %762[%40 : i32] : vector<4xf16> loc(#loc3)
    %768 = llvm.getelementptr %697[%674] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %769 = llvm.bitcast %768 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %770 = llvm.load %769 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %771 = llvm.extractelement %770[%37 : i32] : vector<1xf16> loc(#loc3)
    %772 = llvm.insertelement %771, %767[%34 : i32] : vector<4xf16> loc(#loc3)
    %773 = llvm.getelementptr %697[%675] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %774 = llvm.bitcast %773 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %775 = llvm.load %774 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %776 = llvm.extractelement %775[%37 : i32] : vector<1xf16> loc(#loc3)
    %777 = llvm.insertelement %776, %772[%33 : i32] : vector<4xf16> loc(#loc3)
    %778 = llvm.getelementptr %697[%677] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %779 = llvm.bitcast %778 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %780 = llvm.load %779 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %781 = llvm.extractelement %780[%37 : i32] : vector<1xf16> loc(#loc3)
    %782 = llvm.insertelement %781, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %783 = llvm.getelementptr %697[%678] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %784 = llvm.bitcast %783 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %785 = llvm.load %784 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %786 = llvm.extractelement %785[%37 : i32] : vector<1xf16> loc(#loc3)
    %787 = llvm.insertelement %786, %782[%40 : i32] : vector<4xf16> loc(#loc3)
    %788 = llvm.getelementptr %697[%679] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %789 = llvm.bitcast %788 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %790 = llvm.load %789 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %791 = llvm.extractelement %790[%37 : i32] : vector<1xf16> loc(#loc3)
    %792 = llvm.insertelement %791, %787[%34 : i32] : vector<4xf16> loc(#loc3)
    %793 = llvm.getelementptr %697[%680] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %794 = llvm.bitcast %793 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %795 = llvm.load %794 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %796 = llvm.extractelement %795[%37 : i32] : vector<1xf16> loc(#loc3)
    %797 = llvm.insertelement %796, %792[%33 : i32] : vector<4xf16> loc(#loc3)
    %798 = llvm.getelementptr %697[%682] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %799 = llvm.bitcast %798 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %800 = llvm.load %799 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %801 = llvm.extractelement %800[%37 : i32] : vector<1xf16> loc(#loc3)
    %802 = llvm.insertelement %801, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %803 = llvm.getelementptr %697[%683] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %804 = llvm.bitcast %803 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %805 = llvm.load %804 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %806 = llvm.extractelement %805[%37 : i32] : vector<1xf16> loc(#loc3)
    %807 = llvm.insertelement %806, %802[%40 : i32] : vector<4xf16> loc(#loc3)
    %808 = llvm.getelementptr %697[%684] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %809 = llvm.bitcast %808 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %810 = llvm.load %809 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %811 = llvm.extractelement %810[%37 : i32] : vector<1xf16> loc(#loc3)
    %812 = llvm.insertelement %811, %807[%34 : i32] : vector<4xf16> loc(#loc3)
    %813 = llvm.getelementptr %697[%685] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %814 = llvm.bitcast %813 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %815 = llvm.load %814 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %816 = llvm.extractelement %815[%37 : i32] : vector<1xf16> loc(#loc3)
    %817 = llvm.insertelement %816, %812[%33 : i32] : vector<4xf16> loc(#loc3)
    %818 = llvm.getelementptr %697[%687] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %819 = llvm.bitcast %818 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %820 = llvm.load %819 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %821 = llvm.extractelement %820[%37 : i32] : vector<1xf16> loc(#loc3)
    %822 = llvm.insertelement %821, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %823 = llvm.getelementptr %697[%688] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %824 = llvm.bitcast %823 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %825 = llvm.load %824 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %826 = llvm.extractelement %825[%37 : i32] : vector<1xf16> loc(#loc3)
    %827 = llvm.insertelement %826, %822[%40 : i32] : vector<4xf16> loc(#loc3)
    %828 = llvm.getelementptr %697[%689] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %829 = llvm.bitcast %828 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %830 = llvm.load %829 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %831 = llvm.extractelement %830[%37 : i32] : vector<1xf16> loc(#loc3)
    %832 = llvm.insertelement %831, %827[%34 : i32] : vector<4xf16> loc(#loc3)
    %833 = llvm.getelementptr %697[%690] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %834 = llvm.bitcast %833 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %835 = llvm.load %834 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %836 = llvm.extractelement %835[%37 : i32] : vector<1xf16> loc(#loc3)
    %837 = llvm.insertelement %836, %832[%33 : i32] : vector<4xf16> loc(#loc3)
    %838 = llvm.getelementptr %697[%692] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %839 = llvm.bitcast %838 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %840 = llvm.load %839 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %841 = llvm.extractelement %840[%37 : i32] : vector<1xf16> loc(#loc3)
    %842 = llvm.insertelement %841, %360[%37 : i32] : vector<4xf16> loc(#loc3)
    %843 = llvm.getelementptr %697[%693] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %844 = llvm.bitcast %843 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %845 = llvm.load %844 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %846 = llvm.extractelement %845[%37 : i32] : vector<1xf16> loc(#loc3)
    %847 = llvm.insertelement %846, %842[%40 : i32] : vector<4xf16> loc(#loc3)
    %848 = llvm.getelementptr %697[%694] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %849 = llvm.bitcast %848 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %850 = llvm.load %849 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %851 = llvm.extractelement %850[%37 : i32] : vector<1xf16> loc(#loc3)
    %852 = llvm.insertelement %851, %847[%34 : i32] : vector<4xf16> loc(#loc3)
    %853 = llvm.getelementptr %697[%695] : (!llvm.ptr<f16, 3>, i32) -> !llvm.ptr<f16, 3> loc(#loc3)
    %854 = llvm.bitcast %853 : !llvm.ptr<f16, 3> to !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %855 = llvm.load %854 : !llvm.ptr<vector<1xf16>, 3> loc(#loc3)
    %856 = llvm.extractelement %855[%37 : i32] : vector<1xf16> loc(#loc3)
    %857 = llvm.insertelement %856, %852[%33 : i32] : vector<4xf16> loc(#loc3)
    %858 = llvm.extractvalue %255[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %859 = llvm.extractvalue %255[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %860 = llvm.extractvalue %255[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %861 = llvm.extractvalue %255[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %862 = llvm.extractvalue %255[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %863 = llvm.extractvalue %255[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %864 = llvm.extractvalue %255[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %865 = llvm.extractvalue %255[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %866 = llvm.extractvalue %255[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %867 = llvm.extractvalue %255[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %868 = llvm.extractvalue %255[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %869 = llvm.extractvalue %255[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %870 = llvm.extractvalue %255[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %871 = llvm.extractvalue %255[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %872 = llvm.extractvalue %255[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %873 = llvm.extractvalue %255[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %874 = llvm.mlir.undef : vector<16xf32> loc(#loc20)
    %875 = llvm.insertelement %858, %874[%37 : i32] : vector<16xf32> loc(#loc20)
    %876 = llvm.insertelement %859, %875[%40 : i32] : vector<16xf32> loc(#loc20)
    %877 = llvm.insertelement %860, %876[%34 : i32] : vector<16xf32> loc(#loc20)
    %878 = llvm.insertelement %861, %877[%33 : i32] : vector<16xf32> loc(#loc20)
    %879 = llvm.insertelement %862, %878[%39 : i32] : vector<16xf32> loc(#loc20)
    %880 = llvm.insertelement %863, %879[%22 : i32] : vector<16xf32> loc(#loc20)
    %881 = llvm.insertelement %864, %880[%21 : i32] : vector<16xf32> loc(#loc20)
    %882 = llvm.insertelement %865, %881[%20 : i32] : vector<16xf32> loc(#loc20)
    %883 = llvm.insertelement %866, %882[%38 : i32] : vector<16xf32> loc(#loc20)
    %884 = llvm.insertelement %867, %883[%32 : i32] : vector<16xf32> loc(#loc20)
    %885 = llvm.insertelement %868, %884[%31 : i32] : vector<16xf32> loc(#loc20)
    %886 = llvm.insertelement %869, %885[%30 : i32] : vector<16xf32> loc(#loc20)
    %887 = llvm.insertelement %870, %886[%3 : i32] : vector<16xf32> loc(#loc20)
    %888 = llvm.insertelement %871, %887[%2 : i32] : vector<16xf32> loc(#loc20)
    %889 = llvm.insertelement %872, %888[%1 : i32] : vector<16xf32> loc(#loc20)
    %890 = llvm.insertelement %873, %889[%0 : i32] : vector<16xf32> loc(#loc20)
    %891 = rocdl.mfma.f32.32x32x8f16 %494, %717, %890, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %892 = rocdl.mfma.f32.32x32x8f16 %505, %737, %891, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %893 = rocdl.mfma.f32.32x32x8f16 %516, %757, %892, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %894 = rocdl.mfma.f32.32x32x8f16 %527, %777, %893, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %895 = rocdl.mfma.f32.32x32x8f16 %538, %797, %894, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %896 = rocdl.mfma.f32.32x32x8f16 %549, %817, %895, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %897 = rocdl.mfma.f32.32x32x8f16 %560, %837, %896, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %898 = rocdl.mfma.f32.32x32x8f16 %571, %857, %897, %37, %37, %37 : (vector<4xf16>, vector<4xf16>, vector<16xf32>, i32, i32, i32) -> vector<16xf32> loc(#loc20)
    %899 = llvm.extractelement %898[%37 : i32] : vector<16xf32> loc(#loc20)
    %900 = llvm.extractelement %898[%40 : i32] : vector<16xf32> loc(#loc20)
    %901 = llvm.extractelement %898[%34 : i32] : vector<16xf32> loc(#loc20)
    %902 = llvm.extractelement %898[%33 : i32] : vector<16xf32> loc(#loc20)
    %903 = llvm.extractelement %898[%39 : i32] : vector<16xf32> loc(#loc20)
    %904 = llvm.extractelement %898[%22 : i32] : vector<16xf32> loc(#loc20)
    %905 = llvm.extractelement %898[%21 : i32] : vector<16xf32> loc(#loc20)
    %906 = llvm.extractelement %898[%20 : i32] : vector<16xf32> loc(#loc20)
    %907 = llvm.extractelement %898[%38 : i32] : vector<16xf32> loc(#loc20)
    %908 = llvm.extractelement %898[%32 : i32] : vector<16xf32> loc(#loc20)
    %909 = llvm.extractelement %898[%31 : i32] : vector<16xf32> loc(#loc20)
    %910 = llvm.extractelement %898[%30 : i32] : vector<16xf32> loc(#loc20)
    %911 = llvm.extractelement %898[%3 : i32] : vector<16xf32> loc(#loc20)
    %912 = llvm.extractelement %898[%2 : i32] : vector<16xf32> loc(#loc20)
    %913 = llvm.extractelement %898[%1 : i32] : vector<16xf32> loc(#loc20)
    %914 = llvm.extractelement %898[%0 : i32] : vector<16xf32> loc(#loc20)
    %915 = llvm.insertvalue %899, %144[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %916 = llvm.insertvalue %900, %915[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %917 = llvm.insertvalue %901, %916[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %918 = llvm.insertvalue %902, %917[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %919 = llvm.insertvalue %903, %918[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %920 = llvm.insertvalue %904, %919[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %921 = llvm.insertvalue %905, %920[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %922 = llvm.insertvalue %906, %921[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %923 = llvm.insertvalue %907, %922[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %924 = llvm.insertvalue %908, %923[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %925 = llvm.insertvalue %909, %924[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %926 = llvm.insertvalue %910, %925[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %927 = llvm.insertvalue %911, %926[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %928 = llvm.insertvalue %912, %927[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %929 = llvm.insertvalue %913, %928[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %930 = llvm.insertvalue %914, %929[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc20)
    %931 = llvm.extractvalue %256[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %932 = llvm.extractvalue %256[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %933 = llvm.extractvalue %256[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %934 = llvm.extractvalue %256[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %935 = llvm.extractvalue %256[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %936 = llvm.extractvalue %256[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %937 = llvm.extractvalue %256[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %938 = llvm.extractvalue %256[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %939 = llvm.getelementptr %259[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %940 = llvm.getelementptr %931[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %941 = llvm.getelementptr %260[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %942 = llvm.getelementptr %932[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %943 = llvm.getelementptr %261[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %944 = llvm.getelementptr %933[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %945 = llvm.getelementptr %262[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %946 = llvm.getelementptr %934[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %947 = llvm.getelementptr %263[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %948 = llvm.getelementptr %935[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %949 = llvm.getelementptr %264[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %950 = llvm.getelementptr %936[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %951 = llvm.getelementptr %265[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %952 = llvm.getelementptr %937[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %953 = llvm.getelementptr %266[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %954 = llvm.getelementptr %938[64] : (!llvm.ptr<f16, 1>) -> !llvm.ptr<f16, 1> loc(#loc13)
    %955 = llvm.insertvalue %939, %208[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %956 = llvm.insertvalue %940, %955[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %957 = llvm.insertvalue %941, %956[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %958 = llvm.insertvalue %942, %957[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %959 = llvm.insertvalue %943, %958[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %960 = llvm.insertvalue %944, %959[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %961 = llvm.insertvalue %945, %960[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %962 = llvm.insertvalue %946, %961[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %963 = llvm.insertvalue %947, %962[8] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %964 = llvm.insertvalue %948, %963[9] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %965 = llvm.insertvalue %949, %964[10] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %966 = llvm.insertvalue %950, %965[11] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %967 = llvm.insertvalue %951, %966[12] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %968 = llvm.insertvalue %952, %967[13] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %969 = llvm.insertvalue %953, %968[14] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %970 = llvm.insertvalue %954, %969[15] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc13)
    %971 = llvm.extractvalue %257[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %972 = llvm.extractvalue %257[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %973 = llvm.extractvalue %257[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %974 = llvm.extractvalue %257[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %975 = llvm.getelementptr %572[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %976 = llvm.getelementptr %971[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %977 = llvm.getelementptr %573[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %978 = llvm.getelementptr %972[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %979 = llvm.getelementptr %574[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %980 = llvm.getelementptr %973[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %981 = llvm.getelementptr %575[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %982 = llvm.getelementptr %974[%253] : (!llvm.ptr<f16, 1>, i32) -> !llvm.ptr<f16, 1> loc(#loc14)
    %983 = llvm.insertvalue %975, %244[0] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %984 = llvm.insertvalue %976, %983[1] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %985 = llvm.insertvalue %977, %984[2] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %986 = llvm.insertvalue %978, %985[3] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %987 = llvm.insertvalue %979, %986[4] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %988 = llvm.insertvalue %980, %987[5] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %989 = llvm.insertvalue %981, %988[6] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %990 = llvm.insertvalue %982, %989[7] : !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>  loc(#loc14)
    %991 = llvm.add %254, %41  : i32 loc(#loc6)
    llvm.br ^bb1(%991, %930, %970, %990 : i32, !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>, !llvm.struct<(ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>, ptr<f16, 1>)>) loc(#loc6)
  ^bb3:  // pred: ^bb1
    %992 = llvm.mul %164, %arg5  : i32 loc(#loc15)
    %993 = llvm.mul %165, %arg5  : i32 loc(#loc15)
    %994 = llvm.mul %166, %arg5  : i32 loc(#loc15)
    %995 = llvm.mul %167, %arg5  : i32 loc(#loc15)
    %996 = llvm.mul %168, %arg5  : i32 loc(#loc15)
    %997 = llvm.mul %169, %arg5  : i32 loc(#loc15)
    %998 = llvm.mul %170, %arg5  : i32 loc(#loc15)
    %999 = llvm.mul %171, %arg5  : i32 loc(#loc15)
    %1000 = llvm.mul %172, %arg5  : i32 loc(#loc15)
    %1001 = llvm.mul %173, %arg5  : i32 loc(#loc15)
    %1002 = llvm.mul %174, %arg5  : i32 loc(#loc15)
    %1003 = llvm.mul %175, %arg5  : i32 loc(#loc15)
    %1004 = llvm.mul %176, %arg5  : i32 loc(#loc15)
    %1005 = llvm.mul %177, %arg5  : i32 loc(#loc15)
    %1006 = llvm.mul %178, %arg5  : i32 loc(#loc15)
    %1007 = llvm.mul %179, %arg5  : i32 loc(#loc15)
    %1008 = llvm.getelementptr %arg2[%992] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1009 = llvm.getelementptr %arg2[%993] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1010 = llvm.getelementptr %arg2[%994] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1011 = llvm.getelementptr %arg2[%995] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1012 = llvm.getelementptr %arg2[%996] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1013 = llvm.getelementptr %arg2[%997] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1014 = llvm.getelementptr %arg2[%998] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1015 = llvm.getelementptr %arg2[%999] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1016 = llvm.getelementptr %arg2[%1000] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1017 = llvm.getelementptr %arg2[%1001] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1018 = llvm.getelementptr %arg2[%1002] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1019 = llvm.getelementptr %arg2[%1003] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1020 = llvm.getelementptr %arg2[%1004] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1021 = llvm.getelementptr %arg2[%1005] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1022 = llvm.getelementptr %arg2[%1006] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1023 = llvm.getelementptr %arg2[%1007] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc16)
    %1024 = llvm.getelementptr %1008[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1025 = llvm.getelementptr %1009[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1026 = llvm.getelementptr %1010[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1027 = llvm.getelementptr %1011[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1028 = llvm.getelementptr %1012[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1029 = llvm.getelementptr %1013[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1030 = llvm.getelementptr %1014[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1031 = llvm.getelementptr %1015[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1032 = llvm.getelementptr %1016[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1033 = llvm.getelementptr %1017[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1034 = llvm.getelementptr %1018[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1035 = llvm.getelementptr %1019[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1036 = llvm.getelementptr %1020[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1037 = llvm.getelementptr %1021[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1038 = llvm.getelementptr %1022[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1039 = llvm.getelementptr %1023[%235] : (!llvm.ptr<f32, 1>, i32) -> !llvm.ptr<f32, 1> loc(#loc17)
    %1040 = llvm.extractvalue %255[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1041 = llvm.extractvalue %255[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1042 = llvm.extractvalue %255[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1043 = llvm.extractvalue %255[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1044 = llvm.extractvalue %255[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1045 = llvm.extractvalue %255[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1046 = llvm.extractvalue %255[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1047 = llvm.extractvalue %255[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1048 = llvm.extractvalue %255[8] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1049 = llvm.extractvalue %255[9] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1050 = llvm.extractvalue %255[10] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1051 = llvm.extractvalue %255[11] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1052 = llvm.extractvalue %255[12] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1053 = llvm.extractvalue %255[13] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1054 = llvm.extractvalue %255[14] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1055 = llvm.extractvalue %255[15] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32)>  loc(#loc18)
    %1056 = llvm.mul %69, %36  : i32 loc(#loc18)
    %1057 = llvm.add %1056, %131  : i32 loc(#loc18)
    %1058 = llvm.mul %1057, %40  : i32 loc(#loc18)
    %1059 = llvm.icmp "slt" %1058, %36 : i32 loc(#loc18)
    %1060 = llvm.and %16, %1059  : i1 loc(#loc18)
    %1061 = llvm.mlir.undef : vector<1xf32> loc(#loc18)
    %1062 = llvm.insertelement %1040, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1063 = llvm.bitcast %1062 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb4, ^bb5 loc(#loc18)
  ^bb4:  // pred: ^bb3
    llvm.store %1063, %1024 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb5 loc(#loc18)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    %1064 = llvm.insertelement %1041, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1065 = llvm.bitcast %1064 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb6, ^bb7 loc(#loc18)
  ^bb6:  // pred: ^bb5
    llvm.store %1065, %1025 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb7 loc(#loc18)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %1066 = llvm.insertelement %1042, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1067 = llvm.bitcast %1066 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb8, ^bb9 loc(#loc18)
  ^bb8:  // pred: ^bb7
    llvm.store %1067, %1026 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb9 loc(#loc18)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %1068 = llvm.insertelement %1043, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1069 = llvm.bitcast %1068 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb10, ^bb11 loc(#loc18)
  ^bb10:  // pred: ^bb9
    llvm.store %1069, %1027 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb11 loc(#loc18)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %1070 = llvm.insertelement %1044, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1071 = llvm.bitcast %1070 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb12, ^bb13 loc(#loc18)
  ^bb12:  // pred: ^bb11
    llvm.store %1071, %1028 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb13 loc(#loc18)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    %1072 = llvm.insertelement %1045, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1073 = llvm.bitcast %1072 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb14, ^bb15 loc(#loc18)
  ^bb14:  // pred: ^bb13
    llvm.store %1073, %1029 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb15 loc(#loc18)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    %1074 = llvm.insertelement %1046, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1075 = llvm.bitcast %1074 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb16, ^bb17 loc(#loc18)
  ^bb16:  // pred: ^bb15
    llvm.store %1075, %1030 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb17 loc(#loc18)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    %1076 = llvm.insertelement %1047, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1077 = llvm.bitcast %1076 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb18, ^bb19 loc(#loc18)
  ^bb18:  // pred: ^bb17
    llvm.store %1077, %1031 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb19 loc(#loc18)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    %1078 = llvm.insertelement %1048, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1079 = llvm.bitcast %1078 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb20, ^bb21 loc(#loc18)
  ^bb20:  // pred: ^bb19
    llvm.store %1079, %1032 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb21 loc(#loc18)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    %1080 = llvm.insertelement %1049, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1081 = llvm.bitcast %1080 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb22, ^bb23 loc(#loc18)
  ^bb22:  // pred: ^bb21
    llvm.store %1081, %1033 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb23 loc(#loc18)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    %1082 = llvm.insertelement %1050, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1083 = llvm.bitcast %1082 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb24, ^bb25 loc(#loc18)
  ^bb24:  // pred: ^bb23
    llvm.store %1083, %1034 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb25 loc(#loc18)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    %1084 = llvm.insertelement %1051, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1085 = llvm.bitcast %1084 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb26, ^bb27 loc(#loc18)
  ^bb26:  // pred: ^bb25
    llvm.store %1085, %1035 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb27 loc(#loc18)
  ^bb27:  // 2 preds: ^bb25, ^bb26
    %1086 = llvm.insertelement %1052, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1087 = llvm.bitcast %1086 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb28, ^bb29 loc(#loc18)
  ^bb28:  // pred: ^bb27
    llvm.store %1087, %1036 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb29 loc(#loc18)
  ^bb29:  // 2 preds: ^bb27, ^bb28
    %1088 = llvm.insertelement %1053, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1089 = llvm.bitcast %1088 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb30, ^bb31 loc(#loc18)
  ^bb30:  // pred: ^bb29
    llvm.store %1089, %1037 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb31 loc(#loc18)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    %1090 = llvm.insertelement %1054, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1091 = llvm.bitcast %1090 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb32, ^bb33 loc(#loc18)
  ^bb32:  // pred: ^bb31
    llvm.store %1091, %1038 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb33 loc(#loc18)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    %1092 = llvm.insertelement %1055, %1061[%37 : i32] : vector<1xf32> loc(#loc18)
    %1093 = llvm.bitcast %1092 : vector<1xf32> to i32 loc(#loc18)
    llvm.cond_br %1060, ^bb34, ^bb35 loc(#loc18)
  ^bb34:  // pred: ^bb33
    llvm.store %1093, %1039 : !llvm.ptr<f32, 1> loc(#loc18)
    llvm.br ^bb35 loc(#loc18)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    llvm.return loc(#loc19)
  } loc(#loc21)
} loc(#loc)
#di_file = #llvm.di_file<"test_core_amd.py" in "/triton/python/test/unit/language">
#di_subroutine_type = #llvm.di_subroutine_type<callingConvention = DW_CC_normal>
#loc1 = loc("/triton/python/test/unit/language/test_core_amd.py":1980:23)
#loc3 = loc("/triton/python/test/unit/language/test_core_amd.py":1979:20)
#loc4 = loc("/triton/python/test/unit/language/test_core_amd.py":1978:20)
#loc5 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:21)
#loc9 = loc("/triton/python/test/unit/language/test_core_amd.py":1974:39)
#loc10 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:39)
#loc11 = loc("/triton/python/test/unit/language/test_core_amd.py":1975:21)
#loc12 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:33)
#loc13 = loc("/triton/python/test/unit/language/test_core_amd.py":1981:18)
#loc14 = loc("/triton/python/test/unit/language/test_core_amd.py":1982:18)
#loc15 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:39)
#loc16 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:21)
#loc17 = loc("/triton/python/test/unit/language/test_core_amd.py":1983:51)
#loc18 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:21)
#loc19 = loc("/triton/python/test/unit/language/test_core_amd.py":1984:4)
#di_compile_unit = #llvm.di_compile_unit<sourceLanguage = DW_LANG_C, file = #di_file, producer = "triton", isOptimized = true, emissionKind = LineTablesOnly>
#loc20 = loc(fused[#loc1, #loc2])
#di_subprogram = #llvm.di_subprogram<compileUnit = #di_compile_unit, scope = #di_file, name = "matmul_kernel_0d1d2d3de4c5de6c7de8c", linkageName = "matmul_kernel_0d1d2d3de4c5de6c7de8c", file = #di_file, line = 1970, scopeLine = 1970, subprogramFlags = "Definition|Optimized", type = #di_subroutine_type>
#loc21 = loc(fused<#di_subprogram>[#loc])


=========================== short test summary info ============================
FAILED test/unit/language/test_core_amd.py::test_gemm[64-32-128-4-64-32-64-1] - AssertionError: 
Not equal to tolerance rtol=0.000717647, atol=0.022625

Mismatched elements: 1021 / 2048 (49.9%)
Max absolute difference: 33.060047
Max relative difference: 42.676872
 x: array([[ -6.309333,  -3.944991,  21.44965 , ...,   7.292802,  12.280415,
          4.419807],
       [ -9.755892,  10.798577, -23.371372, ...,   3.081243,  17.26834 ,...
 y: array([[ -6.308594,  -3.945312,  21.453125, ...,   7.292969,  12.28125 ,
          4.417969],
       [ -9.757812,  10.796875, -23.375   , ...,   3.082031,  17.265625,...
============================== 1 failed in 4.51s ===============================
