; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_triton_gemm_a8w8_kernel(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture readonly %1, ptr addrspace(1) nocapture writeonly %2, ptr addrspace(1) nocapture readonly %3, ptr addrspace(1) nocapture readonly %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9) local_unnamed_addr #0 !dbg !4 {
  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %12 = add i32 %5, 63, !dbg !8
  %13 = sdiv i32 %12, 64, !dbg !12
  %.frozen = freeze i32 %13, !dbg !13
  %14 = sdiv i32 %11, %.frozen, !dbg !13
  %15 = sub i32 1, %14, !dbg !14
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 1), !dbg !15
  %17 = srem i32 %11, %16, !dbg !16
  %18 = add i32 %17, %14, !dbg !17
  %19 = mul i32 %14, %.frozen, !dbg !18
  %.decomposed = sub i32 %11, %19, !dbg !18
  %20 = sdiv i32 %.decomposed, %16, !dbg !19
  %21 = shl nsw i32 %20, 6, !dbg !20
  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !21
  %23 = lshr i32 %22, 6, !dbg !21
  %.lobit1 = lshr i32 %22, 2, !dbg !21
  %24 = and i32 %.lobit1, 63, !dbg !21
  %25 = and i32 %22, 15, !dbg !21
  %26 = and i32 %.lobit1, 48, !dbg !21
  %27 = or disjoint i32 %26, %25, !dbg !21
  %28 = or disjoint i32 %21, %24, !dbg !22
  %29 = or disjoint i32 %27, %21, !dbg !22
  %30 = srem i32 %28, %5, !dbg !23
  %31 = shl i32 %22, 2, !dbg !24
  %32 = and i32 %31, 60, !dbg !24
  %33 = zext nneg i32 %32 to i64, !dbg !25
  %34 = getelementptr i8, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = mul i32 %30, %8, !dbg !26
  %36 = shl i32 %22, 4, !dbg !27
  %37 = and i32 %36, 48, !dbg !27
  %38 = add i32 %35, %37, !dbg !28
  %39 = sext i32 %38 to i64, !dbg !29
  %40 = getelementptr i8, ptr addrspace(1) %1, i64 %39, !dbg !29
  %41 = add i32 %6, 63, !dbg !30
  %42 = sdiv i32 %41, 64, !dbg !32
  %43 = addrspacecast ptr addrspace(1) %34 to ptr, !dbg !33
  %44 = load <4 x i8>, ptr %43, align 4, !dbg !33, !nontemporal !34
  %45 = lshr i32 %22, 1, !dbg !33
  %46 = and i32 %45, 48, !dbg !33
  %47 = xor i32 %46, %32, !dbg !33
  %48 = and i32 %31, 960, !dbg !33
  %49 = or disjoint i32 %47, %48, !dbg !33
  %50 = zext nneg i32 %49 to i64, !dbg !33
  %51 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %50, !dbg !33
  store <4 x i8> %44, ptr addrspace(3) %51, align 4, !dbg !33
  %52 = addrspacecast ptr addrspace(1) %40 to ptr, !dbg !35
  %53 = load <16 x i8>, ptr %52, align 16, !dbg !35, !nontemporal !34
  %54 = shl i32 %22, 1, !dbg !35
  %55 = xor i32 %54, %36, !dbg !35
  %56 = and i32 %55, 48, !dbg !35
  %57 = shl nuw nsw i32 %24, 6, !dbg !35
  %58 = or disjoint i32 %56, %57, !dbg !35
  %59 = zext nneg i32 %58 to i64, !dbg !35
  %60 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %59, !dbg !35
  store <16 x i8> %53, ptr addrspace(3) %60, align 16, !dbg !35
  %61 = add nsw i32 %42, -1, !dbg !36
  %62 = icmp sgt i32 %41, 127, !dbg !36
  %63 = shl i32 %45, 4
  %64 = xor i32 %63, %22
  %65 = and i32 %64, 48
  %66 = shl nuw nsw i32 %25, 6
  %67 = or disjoint i32 %65, %66
  %68 = zext nneg i32 %67 to i64
  br i1 %62, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !36

.._crit_edge_crit_edge:                           ; preds = %10
  %.pre70 = shl nuw nsw i32 %23, 4, !dbg !35
  %.pre72 = and i32 %.pre70, 48, !dbg !35
  %.pre74 = or disjoint i32 %.pre72, %25, !dbg !35
  %.pre76 = shl nuw nsw i32 %.pre74, 6, !dbg !35
  %.pre78 = or disjoint i32 %.pre76, %65, !dbg !35
  %.pre80 = zext nneg i32 %.pre78 to i64, !dbg !35
  br label %._crit_edge, !dbg !36

.lr.ph:                                           ; preds = %10
  %69 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %68
  %70 = shl nuw nsw i32 %23, 4
  %71 = and i32 %70, 48
  %72 = or disjoint i32 %71, %25
  %73 = shl nuw nsw i32 %72, 6
  %74 = or disjoint i32 %73, %65
  %75 = zext nneg i32 %74 to i64
  %76 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %75
  %77 = getelementptr inbounds i8, ptr addrspace(3) %69, i64 8
  %78 = getelementptr inbounds i8, ptr addrspace(3) %76, i64 8
  br label %79, !dbg !36

79:                                               ; preds = %.lr.ph, %79
  %.pn42.pn58 = phi ptr addrspace(1) [ %40, %.lr.ph ], [ %.pn42, %79 ]
  %.pn10.pn57 = phi ptr addrspace(1) [ %34, %.lr.ph ], [ %.pn10, %79 ]
  %80 = phi i32 [ 0, %.lr.ph ], [ %95, %79 ]
  %81 = phi i32 [ 0, %.lr.ph ], [ %96, %79 ]
  %82 = phi i32 [ 0, %.lr.ph ], [ %97, %79 ]
  %83 = phi i32 [ 0, %.lr.ph ], [ %98, %79 ]
  %84 = phi i32 [ 0, %.lr.ph ], [ %99, %79 ]
  %.pn42 = getelementptr i8, ptr addrspace(1) %.pn42.pn58, i64 64, !dbg !37
  %.pn10 = getelementptr i8, ptr addrspace(1) %.pn10.pn57, i64 64, !dbg !38
  %85 = addrspacecast ptr addrspace(1) %.pn10 to ptr, !dbg !33
  %86 = load <4 x i8>, ptr %85, align 4, !dbg !33, !nontemporal !34
  %87 = addrspacecast ptr addrspace(1) %.pn42 to ptr, !dbg !35
  %88 = load <16 x i8>, ptr %87, align 16, !dbg !35, !nontemporal !34
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  %.extract50 = load i64, ptr addrspace(3) %69, align 16, !dbg !39
  %.extract52 = load i64, ptr addrspace(3) %77, align 8, !dbg !39
  %.extract54 = load i64, ptr addrspace(3) %76, align 16, !dbg !39
  %.extract56 = load i64, ptr addrspace(3) %78, align 8, !dbg !39
  %89 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !39
  %90 = insertelement <4 x i32> %89, i32 %81, i64 1, !dbg !39
  %91 = insertelement <4 x i32> %90, i32 %82, i64 2, !dbg !39
  %92 = insertelement <4 x i32> %91, i32 %83, i64 3, !dbg !39
  %93 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract50, i64 %.extract54, <4 x i32> %92, i32 0, i32 0, i32 0), !dbg !39
  %94 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract52, i64 %.extract56, <4 x i32> %93, i32 0, i32 0, i32 0), !dbg !39
  %95 = extractelement <4 x i32> %94, i64 0, !dbg !39
  %96 = extractelement <4 x i32> %94, i64 1, !dbg !39
  %97 = extractelement <4 x i32> %94, i64 2, !dbg !39
  %98 = extractelement <4 x i32> %94, i64 3, !dbg !39
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  store <4 x i8> %86, ptr addrspace(3) %51, align 4, !dbg !33
  store <16 x i8> %88, ptr addrspace(3) %60, align 16, !dbg !35
  %99 = add nuw nsw i32 %84, 1, !dbg !36
  %100 = icmp slt i32 %99, %61, !dbg !36
  br i1 %100, label %79, label %._crit_edge, !dbg !36

._crit_edge:                                      ; preds = %79, %.._crit_edge_crit_edge
  %.pre-phi81 = phi i64 [ %.pre80, %.._crit_edge_crit_edge ], [ %75, %79 ], !dbg !35
  %101 = phi i32 [ 0, %.._crit_edge_crit_edge ], [ %95, %79 ]
  %102 = phi i32 [ 0, %.._crit_edge_crit_edge ], [ %96, %79 ]
  %103 = phi i32 [ 0, %.._crit_edge_crit_edge ], [ %97, %79 ]
  %104 = phi i32 [ 0, %.._crit_edge_crit_edge ], [ %98, %79 ]
  fence syncscope("workgroup") release, !dbg !33
  tail call void @llvm.amdgcn.s.barrier(), !dbg !33
  fence syncscope("workgroup") acquire, !dbg !33
  %105 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %68, !dbg !33
  %106 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 1024), i64 %.pre-phi81, !dbg !35
  %.extract = load i64, ptr addrspace(3) %105, align 16, !dbg !39
  %107 = getelementptr inbounds i8, ptr addrspace(3) %105, i64 8, !dbg !39
  %.extract44 = load i64, ptr addrspace(3) %107, align 8, !dbg !39
  %.extract46 = load i64, ptr addrspace(3) %106, align 16, !dbg !39
  %108 = getelementptr inbounds i8, ptr addrspace(3) %106, i64 8, !dbg !39
  %.extract48 = load i64, ptr addrspace(3) %108, align 8, !dbg !39
  %109 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !39
  %110 = insertelement <4 x i32> %109, i32 %102, i64 1, !dbg !39
  %111 = insertelement <4 x i32> %110, i32 %103, i64 2, !dbg !39
  %112 = insertelement <4 x i32> %111, i32 %104, i64 3, !dbg !39
  %113 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract, i64 %.extract46, <4 x i32> %112, i32 0, i32 0, i32 0), !dbg !39
  %114 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract44, i64 %.extract48, <4 x i32> %113, i32 0, i32 0, i32 0), !dbg !39
  %115 = extractelement <4 x i32> %114, i64 0, !dbg !39
  %116 = extractelement <4 x i32> %114, i64 1, !dbg !39
  %117 = extractelement <4 x i32> %114, i64 2, !dbg !39
  %118 = extractelement <4 x i32> %114, i64 3, !dbg !39
  %119 = shl i32 %18, 4, !dbg !40
  %120 = and i32 %.lobit1, 12, !dbg !41
  %121 = or disjoint i32 %119, %120, !dbg !42
  %122 = or disjoint i32 %121, 1, !dbg !42
  %123 = or disjoint i32 %121, 2, !dbg !42
  %124 = or disjoint i32 %121, 3, !dbg !42
  %125 = sext i32 %122 to i64, !dbg !43
  %126 = getelementptr half, ptr addrspace(1) %3, i64 %125, !dbg !43
  %127 = sext i32 %123 to i64, !dbg !43
  %128 = getelementptr half, ptr addrspace(1) %3, i64 %127, !dbg !43
  %129 = sext i32 %124 to i64, !dbg !43
  %130 = getelementptr half, ptr addrspace(1) %3, i64 %129, !dbg !43
  %131 = sext i32 %29 to i64, !dbg !44
  %132 = getelementptr half, ptr addrspace(1) %4, i64 %131, !dbg !44
  %133 = icmp slt i32 %121, 1, !dbg !45
  %134 = icmp slt i32 %121, 0, !dbg !45
  br i1 %133, label %135, label %.thread, !dbg !46

135:                                              ; preds = %._crit_edge
  %136 = sext i32 %121 to i64, !dbg !43
  %137 = getelementptr half, ptr addrspace(1) %3, i64 %136, !dbg !43
  %138 = addrspacecast ptr addrspace(1) %137 to ptr, !dbg !46
  %139 = load half, ptr %138, align 2, !dbg !46
  br i1 %134, label %140, label %.thread, !dbg !46

140:                                              ; preds = %135
  %141 = addrspacecast ptr addrspace(1) %126 to ptr, !dbg !46
  %142 = load half, ptr %141, align 2, !dbg !46
  %143 = addrspacecast ptr addrspace(1) %128 to ptr, !dbg !46
  %144 = load half, ptr %143, align 2, !dbg !46
  %145 = addrspacecast ptr addrspace(1) %130 to ptr, !dbg !46
  %146 = load <1 x half>, ptr %145, align 2, !dbg !46, !nontemporal !34
  %147 = fpext half %142 to float, !dbg !47
  %148 = fpext half %144 to float, !dbg !47
  br label %.thread, !dbg !46

.thread:                                          ; preds = %135, %._crit_edge, %140
  %149 = phi float [ %148, %140 ], [ 0.000000e+00, %._crit_edge ], [ 0.000000e+00, %135 ]
  %150 = phi half [ %139, %140 ], [ 0xH0000, %._crit_edge ], [ %139, %135 ]
  %151 = phi float [ %147, %140 ], [ 0.000000e+00, %._crit_edge ], [ 0.000000e+00, %135 ]
  %152 = phi <1 x half> [ %146, %140 ], [ zeroinitializer, %._crit_edge ], [ zeroinitializer, %135 ]
  %153 = extractelement <1 x half> %152, i64 0, !dbg !46
  %154 = fpext half %150 to float, !dbg !47
  %155 = fpext half %153 to float, !dbg !47
  %156 = icmp slt i32 %29, %5, !dbg !48
  br i1 %156, label %157, label %160, !dbg !49

157:                                              ; preds = %.thread
  %158 = addrspacecast ptr addrspace(1) %132 to ptr, !dbg !49
  %159 = load <1 x half>, ptr %158, align 2, !dbg !49, !nontemporal !34
  br label %160, !dbg !49

160:                                              ; preds = %.thread, %157
  %161 = phi <1 x half> [ %159, %157 ], [ zeroinitializer, %.thread ]
  %162 = extractelement <1 x half> %161, i64 0, !dbg !49
  %163 = fpext half %162 to float, !dbg !50
  %164 = sitofp i32 %116 to float, !dbg !51
  %165 = sitofp i32 %117 to float, !dbg !51
  %166 = sitofp i32 %118 to float, !dbg !51
  %167 = fmul float %151, %164, !dbg !51
  %168 = fmul float %149, %165, !dbg !51
  %169 = fmul float %166, %155, !dbg !51
  %170 = fmul float %167, %163, !dbg !52
  %171 = fmul float %168, %163, !dbg !52
  %172 = fmul float %169, %163, !dbg !52
  %173 = fptrunc float %170 to half, !dbg !53
  %174 = fptrunc float %171 to half, !dbg !53
  %175 = fptrunc float %172 to half, !dbg !53
  %176 = and i1 %133, %156, !dbg !54
  %177 = and i1 %134, %156, !dbg !54
  %178 = mul i32 %122, %9, !dbg !55
  %179 = mul i32 %123, %9, !dbg !55
  %180 = mul i32 %124, %9, !dbg !55
  %181 = sext i32 %178 to i64, !dbg !56
  %182 = getelementptr half, ptr addrspace(1) %2, i64 %181, !dbg !56
  %183 = sext i32 %179 to i64, !dbg !56
  %184 = getelementptr half, ptr addrspace(1) %2, i64 %183, !dbg !56
  %185 = sext i32 %180 to i64, !dbg !56
  %186 = getelementptr half, ptr addrspace(1) %2, i64 %185, !dbg !56
  %187 = getelementptr half, ptr addrspace(1) %182, i64 %131, !dbg !57
  %188 = getelementptr half, ptr addrspace(1) %184, i64 %131, !dbg !57
  %189 = getelementptr half, ptr addrspace(1) %186, i64 %131, !dbg !57
  br i1 %176, label %190, label %199, !dbg !58

190:                                              ; preds = %160
  %191 = sitofp i32 %115 to float, !dbg !51
  %192 = fmul float %191, %154, !dbg !51
  %193 = fmul float %192, %163, !dbg !52
  %194 = fptrunc float %193 to half, !dbg !53
  %195 = mul i32 %121, %9, !dbg !55
  %196 = sext i32 %195 to i64, !dbg !56
  %197 = getelementptr half, ptr addrspace(1) %2, i64 %196, !dbg !56
  %198 = getelementptr half, ptr addrspace(1) %197, i64 %131, !dbg !57
  store half %194, ptr addrspace(1) %198, align 2, !dbg !58
  br label %199, !dbg !58

199:                                              ; preds = %190, %160
  br i1 %177, label %200, label %201, !dbg !58

200:                                              ; preds = %199
  store half %173, ptr addrspace(1) %187, align 2, !dbg !58
  store half %174, ptr addrspace(1) %188, align 2, !dbg !58
  store half %175, ptr addrspace(1) %189, align 2, !dbg !58
  br label %201, !dbg !58

201:                                              ; preds = %199, %200
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64, i64, <4 x i32>, i32 immarg, i32 immarg, i32 immarg) #3

attributes #0 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "_test_a8w8_5.py", directory: "/workspace/projects/triton-openai/python/test")
!4 = distinct !DISubprogram(name: "_triton_gemm_a8w8_kernel", linkageName: "_triton_gemm_a8w8_kernel", scope: !3, file: !3, line: 81, type: !5, scopeLine: 81, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 113, column: 24, scope: !4)
!8 = !DILocation(line: 40, column: 22, scope: !9, inlinedAt: !11)
!9 = distinct !DILexicalBlockFile(scope: !4, file: !10, discriminator: 0)
!10 = !DIFile(filename: "standard.py", directory: "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/triton/language")
!11 = !DILocation(line: 115, column: 27, scope: !4)
!12 = !DILocation(line: 40, column: 28, scope: !9, inlinedAt: !11)
!13 = !DILocation(line: 117, column: 22, scope: !4)
!14 = !DILocation(line: 119, column: 35, scope: !4)
!15 = !DILocation(line: 119, column: 48, scope: !4)
!16 = !DILocation(line: 120, column: 33, scope: !4)
!17 = !DILocation(line: 120, column: 27, scope: !4)
!18 = !DILocation(line: 121, column: 19, scope: !4)
!19 = !DILocation(line: 121, column: 40, scope: !4)
!20 = !DILocation(line: 128, column: 17, scope: !4)
!21 = !DILocation(line: 128, column: 40, scope: !4)
!22 = !DILocation(line: 128, column: 27, scope: !4)
!23 = !DILocation(line: 130, column: 48, scope: !4)
!24 = !DILocation(line: 132, column: 43, scope: !4)
!25 = !DILocation(line: 132, column: 13, scope: !4)
!26 = !DILocation(line: 133, column: 28, scope: !4)
!27 = !DILocation(line: 133, column: 43, scope: !4)
!28 = !DILocation(line: 133, column: 40, scope: !4)
!29 = !DILocation(line: 133, column: 13, scope: !4)
!30 = !DILocation(line: 40, column: 22, scope: !9, inlinedAt: !31)
!31 = !DILocation(line: 139, column: 33, scope: !4)
!32 = !DILocation(line: 40, column: 28, scope: !9, inlinedAt: !31)
!33 = !DILocation(line: 143, column: 24, scope: !4)
!34 = !{i32 1}
!35 = !DILocation(line: 144, column: 24, scope: !4)
!36 = !DILocation(line: 139, column: 22, scope: !4)
!37 = !DILocation(line: 157, column: 13, scope: !4)
!38 = !DILocation(line: 156, column: 13, scope: !4)
!39 = !DILocation(line: 154, column: 33, scope: !4)
!40 = !DILocation(line: 162, column: 22, scope: !4)
!41 = !DILocation(line: 162, column: 45, scope: !4)
!42 = !DILocation(line: 162, column: 32, scope: !4)
!43 = !DILocation(line: 164, column: 37, scope: !4)
!44 = !DILocation(line: 165, column: 37, scope: !4)
!45 = !DILocation(line: 166, column: 55, scope: !4)
!46 = !DILocation(line: 166, column: 24, scope: !4)
!47 = !DILocation(line: 166, column: 93, scope: !4)
!48 = !DILocation(line: 167, column: 55, scope: !4)
!49 = !DILocation(line: 167, column: 24, scope: !4)
!50 = !DILocation(line: 167, column: 93, scope: !4)
!51 = !DILocation(line: 168, column: 32, scope: !4)
!52 = !DILocation(line: 169, column: 32, scope: !4)
!53 = !DILocation(line: 170, column: 23, scope: !4)
!54 = !DILocation(line: 173, column: 39, scope: !4)
!55 = !DILocation(line: 174, column: 29, scope: !4)
!56 = !DILocation(line: 174, column: 17, scope: !4)
!57 = !DILocation(line: 174, column: 48, scope: !4)
!58 = !DILocation(line: 175, column: 21, scope: !4)
!59 = !DILocation(line: 175, column: 4, scope: !4)
