; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target triple = "amdgcn-amd-amdhsa"

@global_smem = external local_unnamed_addr addrspace(3) global [0 x i8], align 16

; Function Attrs: nofree norecurse nounwind
define amdgpu_kernel void @_triton_gemm_a8w8_kernel(ptr addrspace(1) nocapture readonly %0, ptr addrspace(1) nocapture readonly %1, ptr addrspace(1) nocapture writeonly %2, ptr addrspace(1) nocapture readonly %3, ptr addrspace(1) nocapture readonly %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9) local_unnamed_addr #0 !dbg !4 {
  %11 = tail call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
  %12 = add i32 %5, 63, !dbg !8
  %13 = sdiv i32 %12, 64, !dbg !12
  %.frozen = freeze i32 %13, !dbg !13
  %14 = sdiv i32 %11, %.frozen, !dbg !13
  %15 = sub i32 1, %14, !dbg !14
  %16 = tail call i32 @llvm.smin.i32(i32 %15, i32 1), !dbg !15
  %17 = srem i32 %11, %16, !dbg !16
  %18 = add i32 %17, %14, !dbg !17
  %19 = mul i32 %14, %.frozen, !dbg !18
  %.decomposed = sub i32 %11, %19, !dbg !18
  %20 = sdiv i32 %.decomposed, %16, !dbg !19
  %21 = shl nsw i32 %20, 6, !dbg !20
  %22 = tail call i32 @llvm.amdgcn.workitem.id.x(), !dbg !21
  %23 = lshr i32 %22, 6, !dbg !21
  %24 = lshr i32 %22, 4, !dbg !21
  %25 = and i32 %24, 15, !dbg !21
  %26 = and i32 %22, 15, !dbg !21
  %27 = lshr i32 %22, 2, !dbg !21
  %28 = and i32 %27, 48, !dbg !21
  %29 = or disjoint i32 %28, %26, !dbg !21
  %30 = or disjoint i32 %21, %25, !dbg !22
  %31 = or disjoint i32 %30, 16, !dbg !22
  %32 = or disjoint i32 %30, 32, !dbg !22
  %33 = or disjoint i32 %30, 48, !dbg !22
  %34 = or disjoint i32 %29, %21, !dbg !22
  %35 = srem i32 %30, %5, !dbg !23
  %36 = srem i32 %31, %5, !dbg !23
  %37 = srem i32 %32, %5, !dbg !23
  %38 = srem i32 %33, %5, !dbg !23
  %39 = shl i32 %22, 4, !dbg !24
  %40 = and i32 %39, 240, !dbg !24
  %41 = zext nneg i32 %40 to i64, !dbg !25
  %42 = getelementptr i8, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = mul i32 %35, %8, !dbg !26
  %44 = mul i32 %36, %8, !dbg !26
  %45 = mul i32 %37, %8, !dbg !26
  %46 = mul i32 %38, %8, !dbg !26
  %47 = add i32 %43, %40, !dbg !27
  %48 = add i32 %44, %40, !dbg !27
  %49 = add i32 %45, %40, !dbg !27
  %50 = add i32 %46, %40, !dbg !27
  %51 = sext i32 %47 to i64, !dbg !28
  %52 = getelementptr i8, ptr addrspace(1) %1, i64 %51, !dbg !28
  %53 = sext i32 %48 to i64, !dbg !28
  %54 = getelementptr i8, ptr addrspace(1) %1, i64 %53, !dbg !28
  %55 = sext i32 %49 to i64, !dbg !28
  %56 = getelementptr i8, ptr addrspace(1) %1, i64 %55, !dbg !28
  %57 = sext i32 %50 to i64, !dbg !28
  %58 = getelementptr i8, ptr addrspace(1) %1, i64 %57, !dbg !28
  %59 = add i32 %6, 255, !dbg !29
  %60 = sdiv i32 %59, 256, !dbg !31
  %61 = addrspacecast ptr addrspace(1) %42 to ptr, !dbg !32
  %62 = load <16 x i8>, ptr %61, align 16, !dbg !32
  %63 = xor i32 %39, %22, !dbg !32
  %64 = and i32 %63, 240, !dbg !32
  %65 = shl nuw nsw i32 %25, 8, !dbg !32
  %66 = or disjoint i32 %64, %65, !dbg !32
  %67 = zext nneg i32 %66 to i64, !dbg !32
  %68 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %67, !dbg !32
  store <16 x i8> %62, ptr addrspace(3) %68, align 16, !dbg !32
  %69 = addrspacecast ptr addrspace(1) %52 to ptr, !dbg !33
  %70 = load <16 x i8>, ptr %69, align 16, !dbg !33
  %71 = addrspacecast ptr addrspace(1) %54 to ptr, !dbg !33
  %72 = load <16 x i8>, ptr %71, align 16, !dbg !33
  %73 = addrspacecast ptr addrspace(1) %56 to ptr, !dbg !33
  %74 = load <16 x i8>, ptr %73, align 16, !dbg !33
  %75 = addrspacecast ptr addrspace(1) %58 to ptr, !dbg !33
  %76 = load <16 x i8>, ptr %75, align 16, !dbg !33
  %77 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %67, !dbg !33
  store <16 x i8> %70, ptr addrspace(3) %77, align 16, !dbg !33
  %78 = or disjoint i32 %66, 4096, !dbg !33
  %79 = zext nneg i32 %78 to i64, !dbg !33
  %80 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %79, !dbg !33
  store <16 x i8> %72, ptr addrspace(3) %80, align 16, !dbg !33
  %81 = or disjoint i32 %66, 8192, !dbg !33
  %82 = zext nneg i32 %81 to i64, !dbg !33
  %83 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %82, !dbg !33
  store <16 x i8> %74, ptr addrspace(3) %83, align 16, !dbg !33
  %84 = or disjoint i32 %66, 12288, !dbg !33
  %85 = zext nneg i32 %84 to i64, !dbg !33
  %86 = getelementptr inbounds i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %85, !dbg !33
  store <16 x i8> %76, ptr addrspace(3) %86, align 16, !dbg !33
  %87 = add nsw i32 %60, -1, !dbg !34
  %88 = icmp sgt i32 %59, 511, !dbg !34
  %89 = shl nuw nsw i32 %26, 4
  %.mask = and i32 %22, 48
  %90 = xor i32 %89, %.mask
  %91 = shl nuw nsw i32 %26, 8
  %92 = or disjoint i32 %90, %91
  %93 = and i32 %24, 3
  %94 = or disjoint i32 %93, 4
  %95 = xor i32 %94, %26
  %96 = shl nuw nsw i32 %95, 4
  %97 = or disjoint i32 %96, %91
  %98 = or disjoint i32 %93, 8
  %99 = xor i32 %98, %26
  %100 = shl nuw nsw i32 %99, 4
  %101 = or disjoint i32 %100, %91
  %102 = or disjoint i32 %93, 12
  %103 = xor i32 %102, %26
  %104 = shl nuw nsw i32 %103, 4
  %105 = or disjoint i32 %104, %91
  %106 = zext nneg i32 %92 to i64
  br i1 %88, label %.lr.ph, label %.._crit_edge_crit_edge, !dbg !34

.._crit_edge_crit_edge:                           ; preds = %10
  %.pre265 = zext nneg i32 %97 to i64, !dbg !32
  %.pre267 = zext nneg i32 %101 to i64, !dbg !32
  %.pre269 = zext nneg i32 %105 to i64, !dbg !32
  %.pre271 = shl nuw nsw i32 %23, 4, !dbg !33
  %.pre273 = and i32 %.pre271, 48, !dbg !33
  %.pre275 = or disjoint i32 %.pre273, %26, !dbg !33
  %.pre277 = shl nuw nsw i32 %.pre275, 8, !dbg !33
  %.pre279 = or disjoint i32 %.pre277, %90, !dbg !33
  %.pre281 = or disjoint i32 %96, %.pre277, !dbg !33
  %.pre283 = or disjoint i32 %100, %.pre277, !dbg !33
  %.pre285 = or disjoint i32 %104, %.pre277, !dbg !33
  %.pre287 = zext nneg i32 %.pre279 to i64, !dbg !33
  %.pre289 = zext nneg i32 %.pre281 to i64, !dbg !33
  %.pre291 = zext nneg i32 %.pre283 to i64, !dbg !33
  %.pre293 = zext nneg i32 %.pre285 to i64, !dbg !33
  br label %._crit_edge, !dbg !34

.lr.ph:                                           ; preds = %10
  %107 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %106
  %108 = zext nneg i32 %97 to i64
  %109 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %108
  %110 = zext nneg i32 %101 to i64
  %111 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %110
  %112 = zext nneg i32 %105 to i64
  %113 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %112
  %114 = shl nuw nsw i32 %23, 4
  %115 = and i32 %114, 48
  %116 = or disjoint i32 %115, %26
  %117 = shl nuw nsw i32 %116, 8
  %118 = or disjoint i32 %117, %90
  %119 = or disjoint i32 %96, %117
  %120 = or disjoint i32 %100, %117
  %121 = or disjoint i32 %104, %117
  %122 = zext nneg i32 %118 to i64
  %123 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %122
  %124 = zext nneg i32 %119 to i64
  %125 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %124
  %126 = zext nneg i32 %120 to i64
  %127 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %126
  %128 = zext nneg i32 %121 to i64
  %129 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %128
  %130 = getelementptr inbounds i8, ptr addrspace(3) %107, i64 8
  %131 = getelementptr inbounds i8, ptr addrspace(3) %109, i64 8
  %132 = getelementptr inbounds i8, ptr addrspace(3) %111, i64 8
  %133 = getelementptr inbounds i8, ptr addrspace(3) %113, i64 8
  br label %134, !dbg !34

134:                                              ; preds = %.lr.ph, %134
  %.pn64.pn228 = phi ptr addrspace(1) [ %58, %.lr.ph ], [ %.pn64, %134 ]
  %.pn96.pn227 = phi ptr addrspace(1) [ %56, %.lr.ph ], [ %.pn96, %134 ]
  %.pn128.pn226 = phi ptr addrspace(1) [ %54, %.lr.ph ], [ %.pn128, %134 ]
  %.pn160.pn225 = phi ptr addrspace(1) [ %52, %.lr.ph ], [ %.pn160, %134 ]
  %.pn32.pn224 = phi ptr addrspace(1) [ %42, %.lr.ph ], [ %.pn32, %134 ]
  %135 = phi i32 [ 0, %.lr.ph ], [ %166, %134 ]
  %136 = phi i32 [ 0, %.lr.ph ], [ %167, %134 ]
  %137 = phi i32 [ 0, %.lr.ph ], [ %168, %134 ]
  %138 = phi i32 [ 0, %.lr.ph ], [ %169, %134 ]
  %139 = phi i32 [ 0, %.lr.ph ], [ %170, %134 ]
  %.pn64 = getelementptr i8, ptr addrspace(1) %.pn64.pn228, i64 256, !dbg !35
  %.pn96 = getelementptr i8, ptr addrspace(1) %.pn96.pn227, i64 256, !dbg !35
  %.pn128 = getelementptr i8, ptr addrspace(1) %.pn128.pn226, i64 256, !dbg !35
  %.pn160 = getelementptr i8, ptr addrspace(1) %.pn160.pn225, i64 256, !dbg !35
  %.pn32 = getelementptr i8, ptr addrspace(1) %.pn32.pn224, i64 256, !dbg !36
  %140 = addrspacecast ptr addrspace(1) %.pn32 to ptr, !dbg !32
  %141 = load <16 x i8>, ptr %140, align 16, !dbg !32
  %142 = addrspacecast ptr addrspace(1) %.pn160 to ptr, !dbg !33
  %143 = load <16 x i8>, ptr %142, align 16, !dbg !33
  %144 = addrspacecast ptr addrspace(1) %.pn128 to ptr, !dbg !33
  %145 = load <16 x i8>, ptr %144, align 16, !dbg !33
  %146 = addrspacecast ptr addrspace(1) %.pn96 to ptr, !dbg !33
  %147 = load <16 x i8>, ptr %146, align 16, !dbg !33
  %148 = addrspacecast ptr addrspace(1) %.pn64 to ptr, !dbg !33
  %149 = load <16 x i8>, ptr %148, align 16, !dbg !33
  fence syncscope("workgroup") release, !dbg !32
  tail call void @llvm.amdgcn.s.barrier(), !dbg !32
  fence syncscope("workgroup") acquire, !dbg !32
  %150 = load <2 x i64>, ptr addrspace(3) %123, align 16, !dbg !33
  %151 = load <2 x i64>, ptr addrspace(3) %125, align 16, !dbg !33
  %152 = load <2 x i64>, ptr addrspace(3) %127, align 16, !dbg !33
  %153 = load <2 x i64>, ptr addrspace(3) %129, align 16, !dbg !33
  %.extract192 = load i64, ptr addrspace(3) %107, align 16, !dbg !37
  %.extract194 = load i64, ptr addrspace(3) %130, align 8, !dbg !37
  %.extract196 = load i64, ptr addrspace(3) %109, align 16, !dbg !37
  %.extract198 = load i64, ptr addrspace(3) %131, align 8, !dbg !37
  %.extract200 = load i64, ptr addrspace(3) %111, align 16, !dbg !37
  %.extract202 = load i64, ptr addrspace(3) %132, align 8, !dbg !37
  %.extract204 = load i64, ptr addrspace(3) %113, align 16, !dbg !37
  %.extract206 = load i64, ptr addrspace(3) %133, align 8, !dbg !37
  %.extract208 = extractelement <2 x i64> %150, i64 0, !dbg !37
  %.extract210 = extractelement <2 x i64> %150, i64 1, !dbg !37
  %.extract212 = extractelement <2 x i64> %151, i64 0, !dbg !37
  %.extract214 = extractelement <2 x i64> %151, i64 1, !dbg !37
  %.extract216 = extractelement <2 x i64> %152, i64 0, !dbg !37
  %.extract218 = extractelement <2 x i64> %152, i64 1, !dbg !37
  %.extract220 = extractelement <2 x i64> %153, i64 0, !dbg !37
  %.extract222 = extractelement <2 x i64> %153, i64 1, !dbg !37
  %154 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !37
  %155 = insertelement <4 x i32> %154, i32 %136, i64 1, !dbg !37
  %156 = insertelement <4 x i32> %155, i32 %137, i64 2, !dbg !37
  %157 = insertelement <4 x i32> %156, i32 %138, i64 3, !dbg !37
  %158 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract192, i64 %.extract208, <4 x i32> %157, i32 0, i32 0, i32 0), !dbg !37
  %159 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract194, i64 %.extract210, <4 x i32> %158, i32 0, i32 0, i32 0), !dbg !37
  %160 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract196, i64 %.extract212, <4 x i32> %159, i32 0, i32 0, i32 0), !dbg !37
  %161 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract198, i64 %.extract214, <4 x i32> %160, i32 0, i32 0, i32 0), !dbg !37
  %162 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract200, i64 %.extract216, <4 x i32> %161, i32 0, i32 0, i32 0), !dbg !37
  %163 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract202, i64 %.extract218, <4 x i32> %162, i32 0, i32 0, i32 0), !dbg !37
  %164 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract204, i64 %.extract220, <4 x i32> %163, i32 0, i32 0, i32 0), !dbg !37
  %165 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract206, i64 %.extract222, <4 x i32> %164, i32 0, i32 0, i32 0), !dbg !37
  %166 = extractelement <4 x i32> %165, i64 0, !dbg !37
  %167 = extractelement <4 x i32> %165, i64 1, !dbg !37
  %168 = extractelement <4 x i32> %165, i64 2, !dbg !37
  %169 = extractelement <4 x i32> %165, i64 3, !dbg !37
  fence syncscope("workgroup") release, !dbg !32
  tail call void @llvm.amdgcn.s.barrier(), !dbg !32
  fence syncscope("workgroup") acquire, !dbg !32
  store <16 x i8> %141, ptr addrspace(3) %68, align 16, !dbg !32
  store <16 x i8> %143, ptr addrspace(3) %77, align 16, !dbg !33
  store <16 x i8> %145, ptr addrspace(3) %80, align 16, !dbg !33
  store <16 x i8> %147, ptr addrspace(3) %83, align 16, !dbg !33
  store <16 x i8> %149, ptr addrspace(3) %86, align 16, !dbg !33
  %170 = add nuw nsw i32 %139, 1, !dbg !34
  %171 = icmp slt i32 %170, %87, !dbg !34
  br i1 %171, label %134, label %._crit_edge, !dbg !34

._crit_edge:                                      ; preds = %134, %.._crit_edge_crit_edge
  %.pre-phi294 = phi i64 [ %.pre293, %.._crit_edge_crit_edge ], [ %128, %134 ], !dbg !33
  %.pre-phi292 = phi i64 [ %.pre291, %.._crit_edge_crit_edge ], [ %126, %134 ], !dbg !33
  %.pre-phi290 = phi i64 [ %.pre289, %.._crit_edge_crit_edge ], [ %124, %134 ], !dbg !33
  %.pre-phi288 = phi i64 [ %.pre287, %.._crit_edge_crit_edge ], [ %122, %134 ], !dbg !33
  %.pre-phi270 = phi i64 [ %.pre269, %.._crit_edge_crit_edge ], [ %112, %134 ], !dbg !32
  %.pre-phi268 = phi i64 [ %.pre267, %.._crit_edge_crit_edge ], [ %110, %134 ], !dbg !32
  %.pre-phi266 = phi i64 [ %.pre265, %.._crit_edge_crit_edge ], [ %108, %134 ], !dbg !32
  %172 = phi i32 [ 0, %.._crit_edge_crit_edge ], [ %166, %134 ]
  %173 = phi i32 [ 0, %.._crit_edge_crit_edge ], [ %167, %134 ]
  %174 = phi i32 [ 0, %.._crit_edge_crit_edge ], [ %168, %134 ]
  %175 = phi i32 [ 0, %.._crit_edge_crit_edge ], [ %169, %134 ]
  fence syncscope("workgroup") release, !dbg !32
  tail call void @llvm.amdgcn.s.barrier(), !dbg !32
  fence syncscope("workgroup") acquire, !dbg !32
  %176 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %106, !dbg !32
  %177 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %.pre-phi266, !dbg !32
  %178 = load <2 x i64>, ptr addrspace(3) %177, align 16, !dbg !32
  %179 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %.pre-phi268, !dbg !32
  %180 = load <2 x i64>, ptr addrspace(3) %179, align 16, !dbg !32
  %181 = getelementptr i8, ptr addrspace(3) @global_smem, i64 %.pre-phi270, !dbg !32
  %182 = load <2 x i64>, ptr addrspace(3) %181, align 16, !dbg !32
  %183 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %.pre-phi288, !dbg !33
  %184 = load <2 x i64>, ptr addrspace(3) %183, align 16, !dbg !33
  %185 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %.pre-phi290, !dbg !33
  %186 = load <2 x i64>, ptr addrspace(3) %185, align 16, !dbg !33
  %187 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %.pre-phi292, !dbg !33
  %188 = load <2 x i64>, ptr addrspace(3) %187, align 16, !dbg !33
  %189 = getelementptr i8, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 4096), i64 %.pre-phi294, !dbg !33
  %.extract = load i64, ptr addrspace(3) %176, align 16, !dbg !37
  %190 = getelementptr inbounds i8, ptr addrspace(3) %176, i64 8, !dbg !37
  %.extract162 = load i64, ptr addrspace(3) %190, align 8, !dbg !37
  %.extract164 = extractelement <2 x i64> %178, i64 0, !dbg !37
  %.extract166 = extractelement <2 x i64> %178, i64 1, !dbg !37
  %.extract168 = extractelement <2 x i64> %180, i64 0, !dbg !37
  %.extract170 = extractelement <2 x i64> %180, i64 1, !dbg !37
  %.extract172 = extractelement <2 x i64> %182, i64 0, !dbg !37
  %.extract174 = extractelement <2 x i64> %182, i64 1, !dbg !37
  %.extract176 = extractelement <2 x i64> %184, i64 0, !dbg !37
  %.extract178 = extractelement <2 x i64> %184, i64 1, !dbg !37
  %.extract180 = extractelement <2 x i64> %186, i64 0, !dbg !37
  %.extract182 = extractelement <2 x i64> %186, i64 1, !dbg !37
  %.extract184 = extractelement <2 x i64> %188, i64 0, !dbg !37
  %.extract186 = extractelement <2 x i64> %188, i64 1, !dbg !37
  %.extract188 = load i64, ptr addrspace(3) %189, align 16, !dbg !37
  %191 = getelementptr inbounds i8, ptr addrspace(3) %189, i64 8, !dbg !37
  %.extract190 = load i64, ptr addrspace(3) %191, align 8, !dbg !37
  %192 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !37
  %193 = insertelement <4 x i32> %192, i32 %173, i64 1, !dbg !37
  %194 = insertelement <4 x i32> %193, i32 %174, i64 2, !dbg !37
  %195 = insertelement <4 x i32> %194, i32 %175, i64 3, !dbg !37
  %196 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract, i64 %.extract176, <4 x i32> %195, i32 0, i32 0, i32 0), !dbg !37
  %197 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract162, i64 %.extract178, <4 x i32> %196, i32 0, i32 0, i32 0), !dbg !37
  %198 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract164, i64 %.extract180, <4 x i32> %197, i32 0, i32 0, i32 0), !dbg !37
  %199 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract166, i64 %.extract182, <4 x i32> %198, i32 0, i32 0, i32 0), !dbg !37
  %200 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract168, i64 %.extract184, <4 x i32> %199, i32 0, i32 0, i32 0), !dbg !37
  %201 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract170, i64 %.extract186, <4 x i32> %200, i32 0, i32 0, i32 0), !dbg !37
  %202 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract172, i64 %.extract188, <4 x i32> %201, i32 0, i32 0, i32 0), !dbg !37
  %203 = tail call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64 %.extract174, i64 %.extract190, <4 x i32> %202, i32 0, i32 0, i32 0), !dbg !37
  %204 = extractelement <4 x i32> %203, i64 0, !dbg !37
  %205 = extractelement <4 x i32> %203, i64 1, !dbg !37
  %206 = extractelement <4 x i32> %203, i64 2, !dbg !37
  %207 = extractelement <4 x i32> %203, i64 3, !dbg !37
  %208 = shl i32 %18, 4, !dbg !38
  %209 = and i32 %27, 12, !dbg !39
  %210 = or disjoint i32 %208, %209, !dbg !40
  %211 = or disjoint i32 %210, 1, !dbg !40
  %212 = or disjoint i32 %210, 2, !dbg !40
  %213 = or disjoint i32 %210, 3, !dbg !40
  %214 = sext i32 %211 to i64, !dbg !41
  %215 = getelementptr half, ptr addrspace(1) %3, i64 %214, !dbg !41
  %216 = sext i32 %212 to i64, !dbg !41
  %217 = getelementptr half, ptr addrspace(1) %3, i64 %216, !dbg !41
  %218 = sext i32 %213 to i64, !dbg !41
  %219 = getelementptr half, ptr addrspace(1) %3, i64 %218, !dbg !41
  %220 = sext i32 %34 to i64, !dbg !42
  %221 = getelementptr half, ptr addrspace(1) %4, i64 %220, !dbg !42
  %222 = icmp slt i32 %210, 1, !dbg !43
  %223 = icmp slt i32 %210, 0, !dbg !43
  br i1 %222, label %224, label %.thread, !dbg !44

224:                                              ; preds = %._crit_edge
  %225 = sext i32 %210 to i64, !dbg !41
  %226 = getelementptr half, ptr addrspace(1) %3, i64 %225, !dbg !41
  %227 = addrspacecast ptr addrspace(1) %226 to ptr, !dbg !44
  %228 = load half, ptr %227, align 2, !dbg !44
  br i1 %223, label %229, label %.thread, !dbg !44

229:                                              ; preds = %224
  %230 = addrspacecast ptr addrspace(1) %215 to ptr, !dbg !44
  %231 = load half, ptr %230, align 2, !dbg !44
  %232 = addrspacecast ptr addrspace(1) %217 to ptr, !dbg !44
  %233 = load half, ptr %232, align 2, !dbg !44
  %234 = addrspacecast ptr addrspace(1) %219 to ptr, !dbg !44
  %235 = load <1 x half>, ptr %234, align 2, !dbg !44, !nontemporal !45
  %236 = fpext half %231 to float, !dbg !46
  %237 = fpext half %233 to float, !dbg !46
  br label %.thread, !dbg !44

.thread:                                          ; preds = %224, %._crit_edge, %229
  %238 = phi float [ %237, %229 ], [ 0.000000e+00, %._crit_edge ], [ 0.000000e+00, %224 ]
  %239 = phi half [ %228, %229 ], [ 0xH0000, %._crit_edge ], [ %228, %224 ]
  %240 = phi float [ %236, %229 ], [ 0.000000e+00, %._crit_edge ], [ 0.000000e+00, %224 ]
  %241 = phi <1 x half> [ %235, %229 ], [ zeroinitializer, %._crit_edge ], [ zeroinitializer, %224 ]
  %242 = extractelement <1 x half> %241, i64 0, !dbg !44
  %243 = fpext half %239 to float, !dbg !46
  %244 = fpext half %242 to float, !dbg !46
  %245 = icmp slt i32 %34, %5, !dbg !47
  br i1 %245, label %246, label %249, !dbg !48

246:                                              ; preds = %.thread
  %247 = addrspacecast ptr addrspace(1) %221 to ptr, !dbg !48
  %248 = load <1 x half>, ptr %247, align 2, !dbg !48, !nontemporal !45
  br label %249, !dbg !48

249:                                              ; preds = %.thread, %246
  %250 = phi <1 x half> [ %248, %246 ], [ zeroinitializer, %.thread ]
  %251 = extractelement <1 x half> %250, i64 0, !dbg !48
  %252 = fpext half %251 to float, !dbg !49
  %253 = sitofp i32 %205 to float, !dbg !50
  %254 = sitofp i32 %206 to float, !dbg !50
  %255 = sitofp i32 %207 to float, !dbg !50
  %256 = fmul float %240, %253, !dbg !50
  %257 = fmul float %238, %254, !dbg !50
  %258 = fmul float %255, %244, !dbg !50
  %259 = fmul float %256, %252, !dbg !51
  %260 = fmul float %257, %252, !dbg !51
  %261 = fmul float %258, %252, !dbg !51
  %262 = fptrunc float %259 to half, !dbg !52
  %263 = fptrunc float %260 to half, !dbg !52
  %264 = fptrunc float %261 to half, !dbg !52
  %265 = and i1 %222, %245, !dbg !53
  %266 = and i1 %223, %245, !dbg !53
  %267 = mul i32 %211, %9, !dbg !54
  %268 = mul i32 %212, %9, !dbg !54
  %269 = mul i32 %213, %9, !dbg !54
  %270 = sext i32 %267 to i64, !dbg !55
  %271 = getelementptr half, ptr addrspace(1) %2, i64 %270, !dbg !55
  %272 = sext i32 %268 to i64, !dbg !55
  %273 = getelementptr half, ptr addrspace(1) %2, i64 %272, !dbg !55
  %274 = sext i32 %269 to i64, !dbg !55
  %275 = getelementptr half, ptr addrspace(1) %2, i64 %274, !dbg !55
  %276 = getelementptr half, ptr addrspace(1) %271, i64 %220, !dbg !56
  %277 = getelementptr half, ptr addrspace(1) %273, i64 %220, !dbg !56
  %278 = getelementptr half, ptr addrspace(1) %275, i64 %220, !dbg !56
  br i1 %265, label %279, label %288, !dbg !57

279:                                              ; preds = %249
  %280 = sitofp i32 %204 to float, !dbg !50
  %281 = fmul float %280, %243, !dbg !50
  %282 = fmul float %281, %252, !dbg !51
  %283 = fptrunc float %282 to half, !dbg !52
  %284 = mul i32 %210, %9, !dbg !54
  %285 = sext i32 %284 to i64, !dbg !55
  %286 = getelementptr half, ptr addrspace(1) %2, i64 %285, !dbg !55
  %287 = getelementptr half, ptr addrspace(1) %286, i64 %220, !dbg !56
  store half %283, ptr addrspace(1) %287, align 2, !dbg !57
  br label %288, !dbg !57

288:                                              ; preds = %279, %249
  br i1 %266, label %289, label %290, !dbg !57

289:                                              ; preds = %288
  store half %262, ptr addrspace(1) %276, align 2, !dbg !57
  store half %263, ptr addrspace(1) %277, align 2, !dbg !57
  store half %264, ptr addrspace(1) %278, align 2, !dbg !57
  br label %290, !dbg !57

290:                                              ; preds = %288, %289
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: convergent mustprogress nocallback nofree nounwind willreturn
declare void @llvm.amdgcn.s.barrier() #2

; Function Attrs: convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare <4 x i32> @llvm.amdgcn.mfma.i32.16x16x32.i8(i64, i64, <4 x i32>, i32 immarg, i32 immarg, i32 immarg) #3

attributes #0 = { nofree norecurse nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-waves-per-eu"="1" "denormal-fp-math-f32"="ieee" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent mustprogress nocallback nofree nounwind willreturn }
attributes #3 = { convergent mustprogress nocallback nofree nosync nounwind willreturn memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 1, !"amdhsa_code_object_version", i32 400}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "test_a8w8_7.py", directory: "/workspace/projects/triton-openai/python/test")
!4 = distinct !DISubprogram(name: "_triton_gemm_a8w8_kernel", linkageName: "_triton_gemm_a8w8_kernel", scope: !3, file: !3, line: 81, type: !5, scopeLine: 81, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!5 = !DISubroutineType(cc: DW_CC_normal, types: !6)
!6 = !{}
!7 = !DILocation(line: 113, column: 24, scope: !4)
!8 = !DILocation(line: 40, column: 22, scope: !9, inlinedAt: !11)
!9 = distinct !DILexicalBlockFile(scope: !4, file: !10, discriminator: 0)
!10 = !DIFile(filename: "standard.py", directory: "/opt/conda/envs/py_3.10/lib/python3.10/site-packages/triton/language")
!11 = !DILocation(line: 115, column: 27, scope: !4)
!12 = !DILocation(line: 40, column: 28, scope: !9, inlinedAt: !11)
!13 = !DILocation(line: 117, column: 22, scope: !4)
!14 = !DILocation(line: 119, column: 35, scope: !4)
!15 = !DILocation(line: 119, column: 48, scope: !4)
!16 = !DILocation(line: 120, column: 33, scope: !4)
!17 = !DILocation(line: 120, column: 27, scope: !4)
!18 = !DILocation(line: 121, column: 19, scope: !4)
!19 = !DILocation(line: 121, column: 40, scope: !4)
!20 = !DILocation(line: 128, column: 17, scope: !4)
!21 = !DILocation(line: 128, column: 40, scope: !4)
!22 = !DILocation(line: 128, column: 27, scope: !4)
!23 = !DILocation(line: 130, column: 48, scope: !4)
!24 = !DILocation(line: 132, column: 48, scope: !4)
!25 = !DILocation(line: 132, column: 18, scope: !4)
!26 = !DILocation(line: 133, column: 33, scope: !4)
!27 = !DILocation(line: 133, column: 45, scope: !4)
!28 = !DILocation(line: 133, column: 18, scope: !4)
!29 = !DILocation(line: 40, column: 22, scope: !9, inlinedAt: !30)
!30 = !DILocation(line: 139, column: 24, scope: !4)
!31 = !DILocation(line: 40, column: 28, scope: !9, inlinedAt: !30)
!32 = !DILocation(line: 146, column: 20, scope: !4)
!33 = !DILocation(line: 147, column: 20, scope: !4)
!34 = !DILocation(line: 143, column: 22, scope: !4)
!35 = !DILocation(line: 152, column: 18, scope: !4)
!36 = !DILocation(line: 151, column: 18, scope: !4)
!37 = !DILocation(line: 149, column: 33, scope: !4)
!38 = !DILocation(line: 168, column: 22, scope: !4)
!39 = !DILocation(line: 168, column: 45, scope: !4)
!40 = !DILocation(line: 168, column: 32, scope: !4)
!41 = !DILocation(line: 170, column: 37, scope: !4)
!42 = !DILocation(line: 171, column: 37, scope: !4)
!43 = !DILocation(line: 172, column: 55, scope: !4)
!44 = !DILocation(line: 172, column: 24, scope: !4)
!45 = !{i32 1}
!46 = !DILocation(line: 172, column: 93, scope: !4)
!47 = !DILocation(line: 173, column: 55, scope: !4)
!48 = !DILocation(line: 173, column: 24, scope: !4)
!49 = !DILocation(line: 173, column: 93, scope: !4)
!50 = !DILocation(line: 174, column: 32, scope: !4)
!51 = !DILocation(line: 175, column: 32, scope: !4)
!52 = !DILocation(line: 176, column: 23, scope: !4)
!53 = !DILocation(line: 179, column: 39, scope: !4)
!54 = !DILocation(line: 180, column: 29, scope: !4)
!55 = !DILocation(line: 180, column: 17, scope: !4)
!56 = !DILocation(line: 180, column: 48, scope: !4)
!57 = !DILocation(line: 181, column: 21, scope: !4)
!58 = !DILocation(line: 181, column: 4, scope: !4)
