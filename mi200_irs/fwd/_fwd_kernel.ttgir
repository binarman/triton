#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [64], warpsPerCTA = [4], order = [0]}>
#loc = loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0)
#loc1 = loc(unknown)
#mma = #triton_gpu.amd_mfma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [4, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [0, 1], hasLeadingOffset = false}>
#shared2 = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "hip:gfx90a", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @_fwd_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg3: f32 loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg6: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg18: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg19: i32 loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg20: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg21: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0), %arg22: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":37:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_3 = arith.constant dense<0xFF800000> : tensor<128x128xf32, #mma> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c128_i64 = arith.constant 128 : i64 loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<128x1xi64, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<0> : tensor<128x1xi64, #mma> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<1x64xi64, #mma> loc(#loc1)
    %cst_10 = arith.constant dense<64> : tensor<1x64xi64, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %0, %c128_i32 : i32 loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc5)
    %4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc5)
    %5 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked1> loc(#loc5)
    %6 = tt.splat %2 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc6)
    %7 = tt.splat %2 : i32 -> tensor<128xi32, #blocked1> loc(#loc6)
    %8 = arith.addi %6, %3 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc6)
    %9 = arith.addi %7, %5 : tensor<128xi32, #blocked1> loc(#loc6)
    %10 = arith.divsi %arg8, %arg9 : i32 loc(#loc7)
    %11 = arith.muli %1, %10 : i32 loc(#loc8)
    %12 = arith.addi %11, %2 : i32 loc(#loc9)
    %13 = arith.extsi %arg9 : i32 to i64 loc(#loc10)
    %14 = arith.extsi %12 : i32 to i64 loc(#loc10)
    %15 = arith.extsi %arg22 : i32 to i64 loc(#loc11)
    %16 = arith.extsi %arg12 : i32 to i64 loc(#loc11)
    %17 = arith.extsi %11 : i32 to i64 loc(#loc11)
    %18 = arith.extsi %arg15 : i32 to i64 loc(#loc12)
    %19 = arith.extsi %arg18 : i32 to i64 loc(#loc13)
    %20 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc14)
    %21 = tt.splat %14 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc14)
    %22 = tt.splat %14 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc14)
    %23 = arith.extsi %3 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc14)
    %24 = arith.extsi %4 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc14)
    %25 = arith.addi %21, %23 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc14)
    %26 = arith.addi %22, %24 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc14)
    %27 = tt.expand_dims %25 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xi64, #mma> loc(#loc14)
    %28 = tt.expand_dims %26 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc14)
    %29 = tt.splat %13 : i64 -> tensor<128x1xi64, #blocked> loc(#loc14)
    %30 = arith.muli %28, %29 : tensor<128x1xi64, #blocked> loc(#loc14)
    %31 = tt.broadcast %30 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc14)
    %32 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc14)
    %33 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %34 = arith.extsi %32 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc14)
    %35 = arith.extsi %33 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %36 = tt.expand_dims %34 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi64, #mma> loc(#loc14)
    %37 = tt.expand_dims %35 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc14)
    %38 = tt.broadcast %36 : tensor<1x64xi64, #mma> -> tensor<128x64xi64, #mma> loc(#loc14)
    %39 = tt.broadcast %37 : tensor<1x64xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc14)
    %40 = arith.addi %31, %39 : tensor<128x64xi64, #blocked> loc(#loc14)
    %41 = tt.addptr %20, %40 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi64, #blocked> loc(#loc14)
    %42 = tt.load %41 : tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc14)
    %43 = triton_gpu.local_alloc %42 : (tensor<128x64xf16, #blocked>) -> !tt.memdesc<128x64xf16, #shared> loc(#loc14)
    %44 = triton_gpu.local_load %43 : !tt.memdesc<128x64xf16, #shared> -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> loc(#loc14)
    %45 = arith.addi %0, %c1_i32 : i32 loc(#loc15)
    %46 = arith.muli %45, %c128_i32 : i32 loc(#loc16)
    %47 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc17)
    %48 = tt.splat %16 : i64 -> tensor<128x1xi64, #blocked> loc(#loc17)
    %49 = tt.splat %15 : i64 -> tensor<128x1xi64, #blocked> loc(#loc17)
    %50 = arith.cmpi sge, %37, %cst_5 : tensor<1x64xi64, #blocked> loc(#loc17)
    %51 = arith.cmpi slt, %37, %cst_4 : tensor<1x64xi64, #blocked> loc(#loc17)
    %52 = arith.andi %50, %51 : tensor<1x64xi1, #blocked> loc(#loc17)
    %53 = tt.broadcast %52 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc17)
    %54 = tt.splat %arg3 : f32 -> tensor<128x128xf32, #mma> loc(#loc18)
    %55 = tt.expand_dims %8 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xi32, #mma> loc(#loc19)
    %56 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc20)
    %57 = tt.expand_dims %56 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x128xi32, #mma> loc(#loc20)
    %58 = tt.broadcast %55 : tensor<128x1xi32, #mma> -> tensor<128x128xi32, #mma> loc(#loc21)
    %59 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc22)
    %60 = tt.splat %18 : i64 -> tensor<128x1xi64, #blocked> loc(#loc22)
    %61:5 = scf.for %arg23 = %c0_i32 to %46 step %c128_i32 iter_args(%arg24 = %cst_0, %arg25 = %cst_1, %arg26 = %cst, %arg27 = %17, %arg28 = %17) -> (tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128x64xf32, #mma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64)  : i32 {
      %88 = tt.splat %arg27 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc17)
      %89 = arith.addi %88, %24 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc17)
      %90 = tt.expand_dims %89 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc17)
      %91 = arith.muli %90, %48 : tensor<128x1xi64, #blocked> loc(#loc17)
      %92 = tt.broadcast %91 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc17)
      %93 = arith.addi %92, %39 : tensor<128x64xi64, #blocked> loc(#loc17)
      %94 = tt.addptr %47, %93 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi64, #blocked> loc(#loc17)
      %95 = arith.cmpi sge, %90, %cst_7 : tensor<128x1xi64, #blocked> loc(#loc17)
      %96 = arith.cmpi slt, %90, %49 : tensor<128x1xi64, #blocked> loc(#loc17)
      %97 = arith.andi %95, %96 : tensor<128x1xi1, #blocked> loc(#loc17)
      %98 = tt.broadcast %97 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc17)
      %99 = arith.andi %98, %53 : tensor<128x64xi1, #blocked> loc(#loc17)
      %100 = tt.load %94, %99 : tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc17)
      %101 = triton_gpu.local_alloc %100 : (tensor<128x64xf16, #blocked>) -> !tt.memdesc<128x64xf16, #shared> loc(#loc24)
      %102 = tt.trans %101 {order = array<i32: 1, 0>} : !tt.memdesc<128x64xf16, #shared> -> !tt.memdesc<64x128xf16, #shared1> loc(#loc24)
      %103 = triton_gpu.local_load %102 : !tt.memdesc<64x128xf16, #shared1> -> tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> loc(#loc24)
      %104 = tt.dot %44, %103, %cst_6 : tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<128x128xf32, #mma> loc(#loc25)
      %105 = arith.mulf %104, %54 : tensor<128x128xf32, #mma> loc(#loc18)
      %106 = tt.splat %arg23 : i32 -> tensor<1x128xi32, #mma> loc(#loc26)
      %107 = arith.addi %106, %57 : tensor<1x128xi32, #mma> loc(#loc26)
      %108 = tt.broadcast %107 : tensor<1x128xi32, #mma> -> tensor<128x128xi32, #mma> loc(#loc21)
      %109 = arith.cmpi sge, %58, %108 : tensor<128x128xi32, #mma> loc(#loc21)
      %110 = arith.select %109, %105, %cst_3 : tensor<128x128xi1, #mma>, tensor<128x128xf32, #mma> loc(#loc27)
      %111 = "tt.reduce"(%110) <{axis = 1 : i32}> ({
      ^bb0(%arg29: f32 loc(unknown), %arg30: f32 loc(unknown)):
        %150 = arith.maxnumf %arg29, %arg30 : f32 loc(#loc67)
        tt.reduce.return %150 : f32 loc(#loc63)
      }) : (tensor<128x128xf32, #mma>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc63)
      %112 = arith.maxnumf %111, %arg26 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc31)
      %113 = arith.subf %arg26, %112 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc32)
      %114 = math.exp %113 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc33)
      %115 = arith.mulf %arg24, %114 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc34)
      %116 = tt.expand_dims %112 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xf32, #mma> loc(#loc35)
      %117 = tt.broadcast %116 : tensor<128x1xf32, #mma> -> tensor<128x128xf32, #mma> loc(#loc36)
      %118 = arith.subf %110, %117 : tensor<128x128xf32, #mma> loc(#loc36)
      %119 = math.exp %118 : tensor<128x128xf32, #mma> loc(#loc37)
      %120 = "tt.reduce"(%119) <{axis = 1 : i32}> ({
      ^bb0(%arg29: f32 loc(unknown), %arg30: f32 loc(unknown)):
        %150 = arith.addf %arg29, %arg30 : f32 loc(#loc68)
        tt.reduce.return %150 : f32 loc(#loc65)
      }) : (tensor<128x128xf32, #mma>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc65)
      %121 = arith.addf %120, %115 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc41)
      %122 = arith.divf %cst_2, %121 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc42)
      %123 = tt.expand_dims %122 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xf32, #mma> loc(#loc43)
      %124 = tt.broadcast %123 : tensor<128x1xf32, #mma> -> tensor<128x128xf32, #mma> loc(#loc44)
      %125 = arith.mulf %119, %124 : tensor<128x128xf32, #mma> loc(#loc44)
      %126 = arith.mulf %115, %122 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc45)
      %127 = tt.expand_dims %126 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xf32, #mma> loc(#loc46)
      %128 = tt.broadcast %127 : tensor<128x1xf32, #mma> -> tensor<128x64xf32, #mma> loc(#loc47)
      %129 = arith.mulf %arg25, %128 : tensor<128x64xf32, #mma> loc(#loc47)
      %130 = arith.truncf %125 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma> loc(#loc48)
      %131 = tt.splat %arg28 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc22)
      %132 = arith.addi %131, %24 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc22)
      %133 = tt.expand_dims %132 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc22)
      %134 = arith.muli %133, %60 : tensor<128x1xi64, #blocked> loc(#loc22)
      %135 = tt.broadcast %134 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc22)
      %136 = arith.addi %135, %39 : tensor<128x64xi64, #blocked> loc(#loc22)
      %137 = tt.addptr %59, %136 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi64, #blocked> loc(#loc22)
      %138 = arith.cmpi sge, %133, %cst_7 : tensor<128x1xi64, #blocked> loc(#loc22)
      %139 = arith.cmpi slt, %133, %49 : tensor<128x1xi64, #blocked> loc(#loc22)
      %140 = arith.andi %138, %139 : tensor<128x1xi1, #blocked> loc(#loc22)
      %141 = tt.broadcast %140 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc22)
      %142 = arith.andi %141, %53 : tensor<128x64xi1, #blocked> loc(#loc22)
      %143 = tt.load %137, %142 : tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc22)
      %144 = triton_gpu.local_alloc %143 : (tensor<128x64xf16, #blocked>) -> !tt.memdesc<128x64xf16, #shared2> loc(#loc22)
      %145 = triton_gpu.local_load %144 : !tt.memdesc<128x64xf16, #shared2> -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> loc(#loc22)
      %146 = triton_gpu.convert_layout %130 : tensor<128x128xf16, #mma> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> loc(#loc48)
      %147 = tt.dot %146, %145, %129 : tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<128x64xf32, #mma> loc(#loc49)
      %148 = arith.addi %arg27, %c128_i64 : i64 loc(#loc50)
      %149 = arith.addi %arg28, %c128_i64 : i64 loc(#loc51)
      scf.yield %121, %147, %112, %148, %149 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128x64xf32, #mma>, tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, i64, i64 loc(#loc52)
    } loc(#loc23)
    %62 = arith.muli %1, %arg21 : i32 loc(#loc53)
    %63 = tt.addptr %arg4, %62 : !tt.ptr<f32>, i32 loc(#loc54)
    %64 = tt.splat %63 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked1> loc(#loc55)
    %65 = tt.addptr %64, %9 : tensor<128x!tt.ptr<f32>, #blocked1>, tensor<128xi32, #blocked1> loc(#loc55)
    %66 = tt.addptr %arg5, %62 : !tt.ptr<f32>, i32 loc(#loc56)
    %67 = tt.splat %66 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked1> loc(#loc57)
    %68 = tt.addptr %67, %9 : tensor<128x!tt.ptr<f32>, #blocked1>, tensor<128xi32, #blocked1> loc(#loc57)
    %69 = triton_gpu.convert_layout %61#0 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128xf32, #blocked1> loc(#loc58)
    tt.store %65, %69 : tensor<128x!tt.ptr<f32>, #blocked1> loc(#loc58)
    %70 = triton_gpu.convert_layout %61#2 : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128xf32, #blocked1> loc(#loc59)
    tt.store %68, %70 : tensor<128x!tt.ptr<f32>, #blocked1> loc(#loc59)
    %71 = arith.truncf %61#1 : tensor<128x64xf32, #mma> to tensor<128x64xf16, #mma> loc(#loc60)
    %72 = tt.splat %arg6 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #mma> loc(#loc61)
    %73 = tt.splat %19 : i64 -> tensor<128x1xi64, #mma> loc(#loc61)
    %74 = arith.muli %27, %73 : tensor<128x1xi64, #mma> loc(#loc61)
    %75 = tt.broadcast %74 : tensor<128x1xi64, #mma> -> tensor<128x64xi64, #mma> loc(#loc61)
    %76 = arith.addi %75, %38 : tensor<128x64xi64, #mma> loc(#loc61)
    %77 = tt.addptr %72, %76 : tensor<128x64x!tt.ptr<f16>, #mma>, tensor<128x64xi64, #mma> loc(#loc61)
    %78 = arith.cmpi sge, %27, %cst_8 : tensor<128x1xi64, #mma> loc(#loc61)
    %79 = tt.splat %15 : i64 -> tensor<128x1xi64, #mma> loc(#loc61)
    %80 = arith.cmpi slt, %27, %79 : tensor<128x1xi64, #mma> loc(#loc61)
    %81 = arith.andi %78, %80 : tensor<128x1xi1, #mma> loc(#loc61)
    %82 = tt.broadcast %81 : tensor<128x1xi1, #mma> -> tensor<128x64xi1, #mma> loc(#loc61)
    %83 = arith.cmpi sge, %36, %cst_9 : tensor<1x64xi64, #mma> loc(#loc61)
    %84 = arith.cmpi slt, %36, %cst_10 : tensor<1x64xi64, #mma> loc(#loc61)
    %85 = arith.andi %83, %84 : tensor<1x64xi1, #mma> loc(#loc61)
    %86 = tt.broadcast %85 : tensor<1x64xi1, #mma> -> tensor<128x64xi1, #mma> loc(#loc61)
    %87 = arith.andi %82, %86 : tensor<128x64xi1, #mma> loc(#loc61)
    tt.store %77, %71, %87 : tensor<128x64x!tt.ptr<f16>, #mma> loc(#loc61)
    tt.return loc(#loc62)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/triton/python/test/unit/hopper/test_flashattention.py":46:28)
#loc3 = loc("/triton/python/test/unit/hopper/test_flashattention.py":47:27)
#loc4 = loc("/triton/python/test/unit/hopper/test_flashattention.py":51:23)
#loc5 = loc("/triton/python/test/unit/hopper/test_flashattention.py":51:46)
#loc6 = loc("/triton/python/test/unit/hopper/test_flashattention.py":51:33)
#loc7 = loc("/triton/python/test/unit/hopper/test_flashattention.py":58:32)
#loc8 = loc("/triton/python/test/unit/hopper/test_flashattention.py":64:26)
#loc9 = loc("/triton/python/test/unit/hopper/test_flashattention.py":64:41)
#loc10 = loc("/triton/python/test/unit/hopper/test_flashattention.py":66:8)
#loc11 = loc("/triton/python/test/unit/hopper/test_flashattention.py":74:8)
#loc12 = loc("/triton/python/test/unit/hopper/test_flashattention.py":82:8)
#loc13 = loc("/triton/python/test/unit/hopper/test_flashattention.py":90:8)
#loc14 = loc("/triton/python/test/unit/hopper/test_flashattention.py":93:16)
#loc15 = loc("/triton/python/test/unit/hopper/test_flashattention.py":96:39)
#loc16 = loc("/triton/python/test/unit/hopper/test_flashattention.py":96:44)
#loc17 = loc("/triton/python/test/unit/hopper/test_flashattention.py":98:20)
#loc18 = loc("/triton/python/test/unit/hopper/test_flashattention.py":101:14)
#loc19 = loc("/triton/python/test/unit/hopper/test_flashattention.py":102:29)
#loc20 = loc("/triton/python/test/unit/hopper/test_flashattention.py":102:59)
#loc21 = loc("/triton/python/test/unit/hopper/test_flashattention.py":102:42)
#loc22 = loc("/triton/python/test/unit/hopper/test_flashattention.py":116:20)
#loc23 = loc("/triton/python/test/unit/hopper/test_flashattention.py":96:53)
#loc24 = loc("/triton/python/test/unit/hopper/test_flashattention.py":100:33)
#loc25 = loc("/triton/python/test/unit/hopper/test_flashattention.py":100:24)
#loc26 = loc("/triton/python/test/unit/hopper/test_flashattention.py":102:52)
#loc27 = loc("/triton/python/test/unit/hopper/test_flashattention.py":102:74)
#loc28 = loc("/triton/python/triton/language/standard.py":184:40)
#loc29 = loc("/triton/python/test/unit/hopper/test_flashattention.py":104:39)
#loc30 = loc("/triton/python/triton/language/standard.py":163:27)
#loc31 = loc("/triton/python/test/unit/hopper/test_flashattention.py":104:43)
#loc32 = loc("/triton/python/test/unit/hopper/test_flashattention.py":106:34)
#loc33 = loc("/triton/python/test/unit/hopper/test_flashattention.py":106:25)
#loc34 = loc("/triton/python/test/unit/hopper/test_flashattention.py":106:18)
#loc35 = loc("/triton/python/test/unit/hopper/test_flashattention.py":108:31)
#loc36 = loc("/triton/python/test/unit/hopper/test_flashattention.py":108:24)
#loc37 = loc("/triton/python/test/unit/hopper/test_flashattention.py":108:19)
#loc38 = loc("/triton/python/triton/language/standard.py":267:36)
#loc39 = loc("/triton/python/test/unit/hopper/test_flashattention.py":109:27)
#loc40 = loc("/triton/python/triton/language/standard.py":256:15)
#loc41 = loc("/triton/python/test/unit/hopper/test_flashattention.py":109:32)
#loc42 = loc("/triton/python/test/unit/hopper/test_flashattention.py":111:21)
#loc43 = loc("/triton/python/test/unit/hopper/test_flashattention.py":112:19)
#loc44 = loc("/triton/python/test/unit/hopper/test_flashattention.py":112:13)
#loc45 = loc("/triton/python/test/unit/hopper/test_flashattention.py":113:25)
#loc46 = loc("/triton/python/test/unit/hopper/test_flashattention.py":113:32)
#loc47 = loc("/triton/python/test/unit/hopper/test_flashattention.py":113:15)
#loc48 = loc("/triton/python/test/unit/hopper/test_flashattention.py":115:17)
#loc49 = loc("/triton/python/test/unit/hopper/test_flashattention.py":117:25)
#loc50 = loc("/triton/python/test/unit/hopper/test_flashattention.py":122:44)
#loc51 = loc("/triton/python/test/unit/hopper/test_flashattention.py":123:44)
#loc52 = loc("/triton/python/test/unit/hopper/test_flashattention.py":123:8)
#loc53 = loc("/triton/python/test/unit/hopper/test_flashattention.py":128:26)
#loc54 = loc("/triton/python/test/unit/hopper/test_flashattention.py":128:17)
#loc55 = loc("/triton/python/test/unit/hopper/test_flashattention.py":128:34)
#loc56 = loc("/triton/python/test/unit/hopper/test_flashattention.py":129:17)
#loc57 = loc("/triton/python/test/unit/hopper/test_flashattention.py":129:34)
#loc58 = loc("/triton/python/test/unit/hopper/test_flashattention.py":130:21)
#loc59 = loc("/triton/python/test/unit/hopper/test_flashattention.py":131:21)
#loc60 = loc("/triton/python/test/unit/hopper/test_flashattention.py":133:17)
#loc61 = loc("/triton/python/test/unit/hopper/test_flashattention.py":134:27)
#loc62 = loc("/triton/python/test/unit/hopper/test_flashattention.py":134:4)
#loc63 = loc(callsite(#loc28 at #loc29))
#loc64 = loc(callsite(#loc30 at #loc28))
#loc65 = loc(callsite(#loc38 at #loc39))
#loc66 = loc(callsite(#loc40 at #loc38))
#loc67 = loc(callsite(#loc64 at #loc29))
#loc68 = loc(callsite(#loc66 at #loc39))
