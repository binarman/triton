#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0)
#mma = #triton_gpu.amd_mfma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [8, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #triton_gpu.shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0], hasLeadingOffset = false}>
#shared2 = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "hip:gfx90a", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @_bwd_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg3: f32 loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg4: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg7: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg8: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg18: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg19: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg20: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg21: i32 loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg22: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg23: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg24: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0), %arg25: i32 {tt.divisibility = 16 : i32} loc("/triton/python/test/unit/hopper/test_flashattention.py":156:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128x1xf32, #mma> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<128x64xf32, #mma> loc(#loc1)
    %cst_3 = arith.constant dense<0xFF800000> : tensor<128x128xf32, #mma> loc(#loc1)
    %c128_i64 = arith.constant 128 : i64 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<128x128xf32, #mma> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<128x1xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<0> : tensor<128x1xi64, #mma> loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<1x64xi64, #mma> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<1x64xi64, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.divsi %0, %arg22 : i32 loc(#loc3)
    %2 = arith.remsi %0, %arg22 : i32 loc(#loc4)
    %3 = arith.divsi %arg12, %arg14 : i32 loc(#loc5)
    %4 = arith.divsi %arg13, %arg14 : i32 loc(#loc6)
    %5 = arith.muli %1, %3 : i32 loc(#loc7)
    %6 = arith.muli %2, %4 : i32 loc(#loc8)
    %7 = arith.addi %5, %6 : i32 loc(#loc9)
    %8 = arith.extsi %arg24 : i32 to i64 loc(#loc10)
    %9 = arith.extsi %arg14 : i32 to i64 loc(#loc10)
    %10 = arith.extsi %7 : i32 to i64 loc(#loc10)
    %11 = arith.extsi %arg17 : i32 to i64 loc(#loc11)
    %12 = arith.extsi %arg20 : i32 to i64 loc(#loc12)
    %13 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc13)
    %14 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %15 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc13)
    %16 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc14)
    %17 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc14)
    %18 = arith.muli %0, %arg23 : i32 loc(#loc15)
    %19 = tt.addptr %arg11, %18 : !tt.ptr<f32>, i32 loc(#loc16)
    %20 = tt.addptr %arg10, %18 : !tt.ptr<f32>, i32 loc(#loc17)
    %21 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc18)
    %22 = arith.extsi %13 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc18)
    %23 = arith.extsi %14 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> to tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %24 = tt.splat %11 : i64 -> tensor<128x1xi64, #blocked> loc(#loc18)
    %25 = arith.extsi %16 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %26 = arith.extsi %17 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> to tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %27 = tt.expand_dims %25 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi64, #mma> loc(#loc18)
    %28 = tt.expand_dims %26 {axis = 0 : i32} : tensor<64xi64, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi64, #blocked> loc(#loc18)
    %29 = tt.broadcast %27 : tensor<1x64xi64, #mma> -> tensor<128x64xi64, #mma> loc(#loc18)
    %30 = tt.broadcast %28 : tensor<1x64xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc18)
    %31 = tt.splat %8 : i64 -> tensor<128x1xi64, #mma> loc(#loc18)
    %32 = tt.splat %8 : i64 -> tensor<128x1xi64, #blocked> loc(#loc18)
    %33 = arith.cmpi sge, %27, %cst_7 : tensor<1x64xi64, #mma> loc(#loc18)
    %34 = arith.cmpi sge, %28, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc18)
    %35 = arith.cmpi slt, %27, %cst_8 : tensor<1x64xi64, #mma> loc(#loc18)
    %36 = arith.cmpi slt, %28, %cst_0 : tensor<1x64xi64, #blocked> loc(#loc18)
    %37 = arith.andi %33, %35 : tensor<1x64xi1, #mma> loc(#loc18)
    %38 = arith.andi %34, %36 : tensor<1x64xi1, #blocked> loc(#loc18)
    %39 = tt.broadcast %37 : tensor<1x64xi1, #mma> -> tensor<128x64xi1, #mma> loc(#loc18)
    %40 = tt.broadcast %38 : tensor<1x64xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc18)
    %41 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc19)
    %42 = tt.splat %12 : i64 -> tensor<128x1xi64, #blocked> loc(#loc19)
    %43 = arith.muli %arg25, %c128_i32 : i32 loc(#loc20)
    %44 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc21)
    %45 = tt.splat %9 : i64 -> tensor<128x1xi64, #blocked> loc(#loc21)
    %46 = tt.splat %9 : i64 -> tensor<128x1xi64, #mma> loc(#loc21)
    %47 = tt.splat %20 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc22)
    %48 = tt.splat %arg3 : f32 -> tensor<128x128xf32, #mma> loc(#loc23)
    %49 = tt.splat %arg5 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc24)
    %50 = tt.splat %19 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc25)
    %51 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc26)
    %52 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<128x64x!tt.ptr<f32>, #mma> loc(#loc26)
    %53 = arith.subi %c1_i32, %arg25 : i32 loc(#loc27)
    %54 = arith.muli %53, %c128_i32 : i32 loc(#loc28)
    %55 = tt.splat %arg8 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #mma> loc(#loc29)
    %56 = tt.splat %arg7 : !tt.ptr<f16> -> tensor<128x64x!tt.ptr<f16>, #mma> loc(#loc30)
    %57:7 = scf.for %arg26 = %c0_i32 to %arg25 step %c1_i32 iter_args(%arg27 = %10, %arg28 = %10, %arg29 = %10, %arg30 = %10, %arg31 = %10, %arg32 = %10, %arg33 = %10) -> (i64, i64, i64, i64, i64, i64, i64)  : i32 {
      %58 = arith.muli %arg26, %c128_i32 : i32 loc(#loc32)
      %59 = tt.splat %58 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc33)
      %60 = arith.addi %59, %15 : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc33)
      %61 = tt.splat %arg30 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
      %62 = arith.addi %61, %23 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
      %63 = tt.expand_dims %62 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc18)
      %64 = arith.muli %63, %24 : tensor<128x1xi64, #blocked> loc(#loc18)
      %65 = tt.broadcast %64 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc18)
      %66 = arith.addi %65, %30 : tensor<128x64xi64, #blocked> loc(#loc18)
      %67 = tt.addptr %21, %66 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi64, #blocked> loc(#loc18)
      %68 = arith.cmpi sge, %63, %cst_5 : tensor<128x1xi64, #blocked> loc(#loc18)
      %69 = arith.cmpi slt, %63, %32 : tensor<128x1xi64, #blocked> loc(#loc18)
      %70 = arith.andi %68, %69 : tensor<128x1xi1, #blocked> loc(#loc18)
      %71 = tt.broadcast %70 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc18)
      %72 = arith.andi %71, %40 : tensor<128x64xi1, #blocked> loc(#loc18)
      %73 = tt.load %67, %72 : tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc18)
      %74 = triton_gpu.local_alloc %73 : (tensor<128x64xf16, #blocked>) -> !tt.memdesc<128x64xf16, #shared> loc(#loc18)
      %75 = triton_gpu.local_load %74 : !tt.memdesc<128x64xf16, #shared> -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> loc(#loc18)
      %76 = triton_gpu.local_alloc %73 : (tensor<128x64xf16, #blocked>) -> !tt.memdesc<128x64xf16, #shared1> loc(#loc34)
      %77 = tt.trans %76 {order = array<i32: 1, 0>} : !tt.memdesc<128x64xf16, #shared1> -> !tt.memdesc<64x128xf16, #shared2> loc(#loc34)
      %78 = tt.splat %arg31 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc19)
      %79 = arith.addi %78, %23 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc19)
      %80 = tt.expand_dims %79 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc19)
      %81 = arith.muli %80, %42 : tensor<128x1xi64, #blocked> loc(#loc19)
      %82 = tt.broadcast %81 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc19)
      %83 = arith.addi %82, %30 : tensor<128x64xi64, #blocked> loc(#loc19)
      %84 = tt.addptr %41, %83 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi64, #blocked> loc(#loc19)
      %85 = arith.cmpi sge, %80, %cst_5 : tensor<128x1xi64, #blocked> loc(#loc19)
      %86 = arith.cmpi slt, %80, %32 : tensor<128x1xi64, #blocked> loc(#loc19)
      %87 = arith.andi %85, %86 : tensor<128x1xi1, #blocked> loc(#loc19)
      %88 = tt.broadcast %87 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc19)
      %89 = arith.andi %88, %40 : tensor<128x64xi1, #blocked> loc(#loc19)
      %90 = tt.load %84, %89 : tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc19)
      %91 = triton_gpu.local_alloc %90 : (tensor<128x64xf16, #blocked>) -> !tt.memdesc<128x64xf16, #shared1> loc(#loc35)
      %92 = tt.trans %91 {order = array<i32: 1, 0>} : !tt.memdesc<128x64xf16, #shared1> -> !tt.memdesc<64x128xf16, #shared2> loc(#loc35)
      %93 = triton_gpu.local_load %77 : !tt.memdesc<64x128xf16, #shared2> -> tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> loc(#loc34)
      %94 = tt.expand_dims %60 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x128xi32, #mma> loc(#loc36)
      %95 = tt.broadcast %94 : tensor<1x128xi32, #mma> -> tensor<128x128xi32, #mma> loc(#loc37)
      %96 = triton_gpu.local_load %92 : !tt.memdesc<64x128xf16, #shared2> -> tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> loc(#loc35)
      %97:5 = scf.for %arg34 = %58 to %43 step %c128_i32 iter_args(%arg35 = %cst_2, %arg36 = %cst_2, %arg37 = %arg27, %arg38 = %arg28, %arg39 = %arg29) -> (tensor<128x64xf32, #mma>, tensor<128x64xf32, #mma>, i64, i64, i64)  : i32 {
        %133 = tt.splat %arg34 : i32 -> tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc39)
        %134 = arith.addi %133, %13 : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc39)
        %135 = tt.splat %arg37 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
        %136 = arith.addi %135, %23 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
        %137 = tt.expand_dims %136 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc21)
        %138 = arith.muli %137, %45 : tensor<128x1xi64, #blocked> loc(#loc21)
        %139 = tt.broadcast %138 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc21)
        %140 = arith.addi %139, %30 : tensor<128x64xi64, #blocked> loc(#loc21)
        %141 = tt.addptr %44, %140 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi64, #blocked> loc(#loc21)
        %142 = arith.cmpi sge, %137, %cst_5 : tensor<128x1xi64, #blocked> loc(#loc21)
        %143 = arith.cmpi slt, %137, %32 : tensor<128x1xi64, #blocked> loc(#loc21)
        %144 = arith.andi %142, %143 : tensor<128x1xi1, #blocked> loc(#loc21)
        %145 = tt.broadcast %144 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc21)
        %146 = arith.andi %145, %40 : tensor<128x64xi1, #blocked> loc(#loc21)
        %147 = tt.load %141, %146 : tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc21)
        %148 = triton_gpu.local_alloc %147 : (tensor<128x64xf16, #blocked>) -> !tt.memdesc<128x64xf16, #shared> loc(#loc21)
        %149 = triton_gpu.local_load %148 : !tt.memdesc<128x64xf16, #shared> -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> loc(#loc21)
        %150 = triton_gpu.local_alloc %147 : (tensor<128x64xf16, #blocked>) -> !tt.memdesc<128x64xf16, #shared1> loc(#loc21)
        %151 = triton_gpu.local_load %150 : !tt.memdesc<128x64xf16, #shared1> -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> loc(#loc21)
        %152 = tt.dot %151, %93, %cst_4 : tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<128x128xf32, #mma> loc(#loc40)
        %153 = tt.expand_dims %134 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xi32, #mma> loc(#loc41)
        %154 = tt.broadcast %153 : tensor<128x1xi32, #mma> -> tensor<128x128xi32, #mma> loc(#loc37)
        %155 = arith.cmpi sge, %154, %95 : tensor<128x128xi32, #mma> loc(#loc37)
        %156 = arith.select %155, %152, %cst_3 : tensor<128x128xi1, #mma>, tensor<128x128xf32, #mma> loc(#loc42)
        %157 = tt.addptr %47, %134 : tensor<128x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc22)
        %158 = tt.load %157 : tensor<128x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc43)
        %159 = arith.mulf %156, %48 : tensor<128x128xf32, #mma> loc(#loc23)
        %160 = tt.expand_dims %158 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xf32, #mma> loc(#loc44)
        %161 = tt.broadcast %160 : tensor<128x1xf32, #mma> -> tensor<128x128xf32, #mma> loc(#loc45)
        %162 = arith.subf %159, %161 : tensor<128x128xf32, #mma> loc(#loc45)
        %163 = math.exp %162 : tensor<128x128xf32, #mma> loc(#loc46)
        %164 = tt.splat %arg38 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc24)
        %165 = arith.addi %164, %23 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc24)
        %166 = tt.expand_dims %165 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc24)
        %167 = arith.muli %166, %45 : tensor<128x1xi64, #blocked> loc(#loc24)
        %168 = tt.broadcast %167 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc24)
        %169 = arith.addi %168, %30 : tensor<128x64xi64, #blocked> loc(#loc24)
        %170 = tt.addptr %49, %169 : tensor<128x64x!tt.ptr<f16>, #blocked>, tensor<128x64xi64, #blocked> loc(#loc24)
        %171 = arith.cmpi sge, %166, %cst_5 : tensor<128x1xi64, #blocked> loc(#loc24)
        %172 = arith.cmpi slt, %166, %32 : tensor<128x1xi64, #blocked> loc(#loc24)
        %173 = arith.andi %171, %172 : tensor<128x1xi1, #blocked> loc(#loc24)
        %174 = tt.broadcast %173 : tensor<128x1xi1, #blocked> -> tensor<128x64xi1, #blocked> loc(#loc24)
        %175 = arith.andi %174, %40 : tensor<128x64xi1, #blocked> loc(#loc24)
        %176 = tt.load %170, %175 : tensor<128x64x!tt.ptr<f16>, #blocked> loc(#loc24)
        %177 = triton_gpu.local_alloc %176 : (tensor<128x64xf16, #blocked>) -> !tt.memdesc<128x64xf16, #shared1> loc(#loc24)
        %178 = triton_gpu.local_load %177 : !tt.memdesc<128x64xf16, #shared1> -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> loc(#loc24)
        %179 = triton_gpu.local_alloc %176 : (tensor<128x64xf16, #blocked>) -> !tt.memdesc<128x64xf16, #shared> loc(#loc24)
        %180 = triton_gpu.local_load %179 : !tt.memdesc<128x64xf16, #shared> -> tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> loc(#loc24)
        %181 = arith.truncf %163 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma> loc(#loc47)
        %182 = triton_gpu.local_alloc %181 : (tensor<128x128xf16, #mma>) -> !tt.memdesc<128x128xf16, #shared2> loc(#loc48)
        %183 = tt.trans %182 {order = array<i32: 1, 0>} : !tt.memdesc<128x128xf16, #shared2> -> !tt.memdesc<128x128xf16, #shared1> loc(#loc48)
        %184 = triton_gpu.local_load %183 : !tt.memdesc<128x128xf16, #shared1> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> loc(#loc48)
        %185 = tt.dot %184, %180, %arg35 : tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<128x64xf32, #mma> loc(#loc49)
        %186 = tt.addptr %50, %134 : tensor<128x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc25)
        %187 = tt.load %186 : tensor<128x!tt.ptr<f32>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc50)
        %188 = tt.expand_dims %187 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xf32, #mma> loc(#loc51)
        %189 = arith.subf %cst, %188 : tensor<128x1xf32, #mma> loc(#loc52)
        %190 = tt.broadcast %189 : tensor<128x1xf32, #mma> -> tensor<128x128xf32, #mma> loc(#loc52)
        %191 = tt.dot %178, %96, %190 : tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<64x128xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<128x128xf32, #mma> loc(#loc53)
        %192 = arith.mulf %163, %191 : tensor<128x128xf32, #mma> loc(#loc54)
        %193 = arith.mulf %192, %48 : tensor<128x128xf32, #mma> loc(#loc55)
        %194 = arith.truncf %193 : tensor<128x128xf32, #mma> to tensor<128x128xf16, #mma> loc(#loc56)
        %195 = triton_gpu.local_alloc %194 : (tensor<128x128xf16, #mma>) -> !tt.memdesc<128x128xf16, #shared2> loc(#loc57)
        %196 = tt.trans %195 {order = array<i32: 1, 0>} : !tt.memdesc<128x128xf16, #shared2> -> !tt.memdesc<128x128xf16, #shared1> loc(#loc57)
        %197 = triton_gpu.local_load %196 : !tt.memdesc<128x128xf16, #shared1> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> loc(#loc57)
        %198 = tt.dot %197, %149, %arg36 : tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<128x64xf32, #mma> loc(#loc58)
        %199 = tt.splat %arg39 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc26)
        %200 = tt.splat %arg39 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc26)
        %201 = arith.addi %199, %23 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc26)
        %202 = arith.addi %200, %22 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc26)
        %203 = tt.expand_dims %201 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc26)
        %204 = tt.expand_dims %202 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xi64, #mma> loc(#loc26)
        %205 = arith.muli %203, %45 : tensor<128x1xi64, #blocked> loc(#loc26)
        %206 = arith.muli %204, %46 : tensor<128x1xi64, #mma> loc(#loc26)
        %207 = tt.broadcast %205 : tensor<128x1xi64, #blocked> -> tensor<128x64xi64, #blocked> loc(#loc26)
        %208 = tt.broadcast %206 : tensor<128x1xi64, #mma> -> tensor<128x64xi64, #mma> loc(#loc26)
        %209 = arith.addi %207, %30 : tensor<128x64xi64, #blocked> loc(#loc26)
        %210 = arith.addi %208, %29 : tensor<128x64xi64, #mma> loc(#loc26)
        %211 = tt.addptr %51, %209 : tensor<128x64x!tt.ptr<f32>, #blocked>, tensor<128x64xi64, #blocked> loc(#loc26)
        %212 = tt.addptr %52, %210 : tensor<128x64x!tt.ptr<f32>, #mma>, tensor<128x64xi64, #mma> loc(#loc26)
        %213 = tt.load %211 : tensor<128x64x!tt.ptr<f32>, #blocked> loc(#loc26)
        %214 = triton_gpu.convert_layout %213 : tensor<128x64xf32, #blocked> -> tensor<128x64xf32, #mma> loc(#loc26)
        %215 = triton_gpu.convert_layout %194 : tensor<128x128xf16, #mma> -> tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> loc(#loc56)
        %216 = tt.dot %215, %75, %214 : tensor<128x128xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma}>> * tensor<128x64xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma}>> -> tensor<128x64xf32, #mma> loc(#loc59)
        tt.store %212, %216 : tensor<128x64x!tt.ptr<f32>, #mma> loc(#loc60)
        %217 = arith.addi %arg37, %c128_i64 : i64 loc(#loc61)
        %218 = arith.addi %arg38, %c128_i64 : i64 loc(#loc62)
        %219 = arith.addi %arg39, %c128_i64 : i64 loc(#loc63)
        scf.yield %185, %198, %217, %218, %219 : tensor<128x64xf32, #mma>, tensor<128x64xf32, #mma>, i64, i64, i64 loc(#loc64)
      } loc(#loc38)
      %98 = arith.addi %58, %54 : i32 loc(#loc65)
      %99 = arith.extsi %98 : i32 to i64 loc(#loc66)
      %100 = arith.addi %97#2, %99 : i64 loc(#loc66)
      %101 = arith.addi %97#3, %99 : i64 loc(#loc67)
      %102 = arith.addi %97#4, %99 : i64 loc(#loc68)
      %103 = arith.addi %arg30, %c128_i64 : i64 loc(#loc69)
      %104 = arith.addi %arg31, %c128_i64 : i64 loc(#loc70)
      %105 = arith.truncf %97#0 : tensor<128x64xf32, #mma> to tensor<128x64xf16, #mma> loc(#loc71)
      %106 = tt.splat %arg32 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc29)
      %107 = arith.addi %106, %22 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc29)
      %108 = tt.expand_dims %107 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xi64, #mma> loc(#loc29)
      %109 = arith.muli %108, %46 : tensor<128x1xi64, #mma> loc(#loc29)
      %110 = tt.broadcast %109 : tensor<128x1xi64, #mma> -> tensor<128x64xi64, #mma> loc(#loc29)
      %111 = arith.addi %110, %29 : tensor<128x64xi64, #mma> loc(#loc29)
      %112 = tt.addptr %55, %111 : tensor<128x64x!tt.ptr<f16>, #mma>, tensor<128x64xi64, #mma> loc(#loc29)
      %113 = arith.cmpi sge, %108, %cst_6 : tensor<128x1xi64, #mma> loc(#loc29)
      %114 = arith.cmpi slt, %108, %31 : tensor<128x1xi64, #mma> loc(#loc29)
      %115 = arith.andi %113, %114 : tensor<128x1xi1, #mma> loc(#loc29)
      %116 = tt.broadcast %115 : tensor<128x1xi1, #mma> -> tensor<128x64xi1, #mma> loc(#loc29)
      %117 = arith.andi %116, %39 : tensor<128x64xi1, #mma> loc(#loc29)
      tt.store %112, %105, %117 : tensor<128x64x!tt.ptr<f16>, #mma> loc(#loc29)
      %118 = arith.truncf %97#1 : tensor<128x64xf32, #mma> to tensor<128x64xf16, #mma> loc(#loc72)
      %119 = tt.splat %arg33 : i64 -> tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc30)
      %120 = arith.addi %119, %22 : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc30)
      %121 = tt.expand_dims %120 {axis = 1 : i32} : tensor<128xi64, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<128x1xi64, #mma> loc(#loc30)
      %122 = arith.muli %121, %46 : tensor<128x1xi64, #mma> loc(#loc30)
      %123 = tt.broadcast %122 : tensor<128x1xi64, #mma> -> tensor<128x64xi64, #mma> loc(#loc30)
      %124 = arith.addi %123, %29 : tensor<128x64xi64, #mma> loc(#loc30)
      %125 = tt.addptr %56, %124 : tensor<128x64x!tt.ptr<f16>, #mma>, tensor<128x64xi64, #mma> loc(#loc30)
      %126 = arith.cmpi sge, %121, %cst_6 : tensor<128x1xi64, #mma> loc(#loc30)
      %127 = arith.cmpi slt, %121, %31 : tensor<128x1xi64, #mma> loc(#loc30)
      %128 = arith.andi %126, %127 : tensor<128x1xi1, #mma> loc(#loc30)
      %129 = tt.broadcast %128 : tensor<128x1xi1, #mma> -> tensor<128x64xi1, #mma> loc(#loc30)
      %130 = arith.andi %129, %39 : tensor<128x64xi1, #mma> loc(#loc30)
      tt.store %125, %118, %130 : tensor<128x64x!tt.ptr<f16>, #mma> loc(#loc30)
      %131 = arith.addi %arg32, %c128_i64 : i64 loc(#loc73)
      %132 = arith.addi %arg33, %c128_i64 : i64 loc(#loc74)
      scf.yield %100, %101, %102, %103, %104, %131, %132 : i64, i64, i64, i64, i64, i64, i64 loc(#loc75)
    } loc(#loc31)
    tt.return loc(#loc76)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/triton/python/test/unit/hopper/test_flashattention.py":164:27)
#loc3 = loc("/triton/python/test/unit/hopper/test_flashattention.py":165:22)
#loc4 = loc("/triton/python/test/unit/hopper/test_flashattention.py":166:21)
#loc5 = loc("/triton/python/test/unit/hopper/test_flashattention.py":168:32)
#loc6 = loc("/triton/python/test/unit/hopper/test_flashattention.py":169:32)
#loc7 = loc("/triton/python/test/unit/hopper/test_flashattention.py":175:25)
#loc8 = loc("/triton/python/test/unit/hopper/test_flashattention.py":175:48)
#loc9 = loc("/triton/python/test/unit/hopper/test_flashattention.py":175:40)
#loc10 = loc("/triton/python/test/unit/hopper/test_flashattention.py":177:8)
#loc11 = loc("/triton/python/test/unit/hopper/test_flashattention.py":185:8)
#loc12 = loc("/triton/python/test/unit/hopper/test_flashattention.py":193:8)
#loc13 = loc("/triton/python/test/unit/hopper/test_flashattention.py":232:36)
#loc14 = loc("/triton/python/test/unit/hopper/test_flashattention.py":235:30)
#loc15 = loc("/triton/python/test/unit/hopper/test_flashattention.py":239:30)
#loc16 = loc("/triton/python/test/unit/hopper/test_flashattention.py":239:21)
#loc17 = loc("/triton/python/test/unit/hopper/test_flashattention.py":240:21)
#loc18 = loc("/triton/python/test/unit/hopper/test_flashattention.py":245:20)
#loc19 = loc("/triton/python/test/unit/hopper/test_flashattention.py":246:20)
#loc20 = loc("/triton/python/test/unit/hopper/test_flashattention.py":248:45)
#loc21 = loc("/triton/python/test/unit/hopper/test_flashattention.py":251:24)
#loc22 = loc("/triton/python/test/unit/hopper/test_flashattention.py":256:33)
#loc23 = loc("/triton/python/test/unit/hopper/test_flashattention.py":257:28)
#loc24 = loc("/triton/python/test/unit/hopper/test_flashattention.py":259:25)
#loc25 = loc("/triton/python/test/unit/hopper/test_flashattention.py":262:34)
#loc26 = loc("/triton/python/test/unit/hopper/test_flashattention.py":270:25)
#loc27 = loc("/triton/python/test/unit/hopper/test_flashattention.py":278:55)
#loc28 = loc("/triton/python/test/unit/hopper/test_flashattention.py":278:68)
#loc29 = loc("/triton/python/test/unit/hopper/test_flashattention.py":285:30)
#loc30 = loc("/triton/python/test/unit/hopper/test_flashattention.py":286:30)
#loc31 = loc("/triton/python/test/unit/hopper/test_flashattention.py":229:28)
#loc32 = loc("/triton/python/test/unit/hopper/test_flashattention.py":230:23)
#loc33 = loc("/triton/python/test/unit/hopper/test_flashattention.py":232:23)
#loc34 = loc("/triton/python/test/unit/hopper/test_flashattention.py":254:36)
#loc35 = loc("/triton/python/test/unit/hopper/test_flashattention.py":264:38)
#loc36 = loc("/triton/python/test/unit/hopper/test_flashattention.py":255:58)
#loc37 = loc("/triton/python/test/unit/hopper/test_flashattention.py":255:51)
#loc38 = loc("/triton/python/test/unit/hopper/test_flashattention.py":248:54)
#loc39 = loc("/triton/python/test/unit/hopper/test_flashattention.py":249:36)
#loc40 = loc("/triton/python/test/unit/hopper/test_flashattention.py":254:27)
#loc41 = loc("/triton/python/test/unit/hopper/test_flashattention.py":255:38)
#loc42 = loc("/triton/python/test/unit/hopper/test_flashattention.py":255:73)
#loc43 = loc("/triton/python/test/unit/hopper/test_flashattention.py":256:24)
#loc44 = loc("/triton/python/test/unit/hopper/test_flashattention.py":257:41)
#loc45 = loc("/triton/python/test/unit/hopper/test_flashattention.py":257:39)
#loc46 = loc("/triton/python/test/unit/hopper/test_flashattention.py":257:23)
#loc47 = loc("/triton/python/test/unit/hopper/test_flashattention.py":260:39)
#loc48 = loc("/triton/python/test/unit/hopper/test_flashattention.py":260:34)
#loc49 = loc("/triton/python/test/unit/hopper/test_flashattention.py":260:53)
#loc50 = loc("/triton/python/test/unit/hopper/test_flashattention.py":262:25)
#loc51 = loc("/triton/python/test/unit/hopper/test_flashattention.py":263:69)
#loc52 = loc("/triton/python/test/unit/hopper/test_flashattention.py":263:66)
#loc53 = loc("/triton/python/test/unit/hopper/test_flashattention.py":264:29)
#loc54 = loc("/triton/python/test/unit/hopper/test_flashattention.py":266:21)
#loc55 = loc("/triton/python/test/unit/hopper/test_flashattention.py":266:26)
#loc56 = loc("/triton/python/test/unit/hopper/test_flashattention.py":268:40)
#loc57 = loc("/triton/python/test/unit/hopper/test_flashattention.py":268:34)
#loc58 = loc("/triton/python/test/unit/hopper/test_flashattention.py":268:54)
#loc59 = loc("/triton/python/test/unit/hopper/test_flashattention.py":271:44)
#loc60 = loc("/triton/python/test/unit/hopper/test_flashattention.py":272:34)
#loc61 = loc("/triton/python/test/unit/hopper/test_flashattention.py":275:48)
#loc62 = loc("/triton/python/test/unit/hopper/test_flashattention.py":276:50)
#loc63 = loc("/triton/python/test/unit/hopper/test_flashattention.py":277:50)
#loc64 = loc("/triton/python/test/unit/hopper/test_flashattention.py":277:12)
#loc65 = loc("/triton/python/test/unit/hopper/test_flashattention.py":278:50)
#loc66 = loc("/triton/python/test/unit/hopper/test_flashattention.py":278:44)
#loc67 = loc("/triton/python/test/unit/hopper/test_flashattention.py":279:46)
#loc68 = loc("/triton/python/test/unit/hopper/test_flashattention.py":280:46)
#loc69 = loc("/triton/python/test/unit/hopper/test_flashattention.py":282:44)
#loc70 = loc("/triton/python/test/unit/hopper/test_flashattention.py":283:44)
#loc71 = loc("/triton/python/test/unit/hopper/test_flashattention.py":285:36)
#loc72 = loc("/triton/python/test/unit/hopper/test_flashattention.py":286:36)
#loc73 = loc("/triton/python/test/unit/hopper/test_flashattention.py":287:46)
#loc74 = loc("/triton/python/test/unit/hopper/test_flashattention.py":288:46)
#loc75 = loc("/triton/python/test/unit/hopper/test_flashattention.py":288:8)
#loc76 = loc("/triton/python/test/unit/hopper/test_flashattention.py":229:4)
