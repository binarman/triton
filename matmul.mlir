#blocked = #triton_gpu.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [8, 1], threadsPerWarp = [8, 8], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0)
#mma = #triton_gpu.amd_mfma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [2, 4], instrShape = [16, 16], isTransposed = false}>
#shared = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 8, order = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "hip:gfx90a", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel_M4864_N4096_K8256_BM256_BN256_BK64_GM2_SK1_nW8_nS0_EU0_kP2_mfma16(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0), %arg3: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":14:0)) attributes {noinline = false} {
    %cst = arith.constant dense<64> : tensor<256x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<64x256xi32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256x256xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg4, %c255_i32 : i32 loc(#loc59)
    %2 = arith.divsi %1, %c256_i32 : i32 loc(#loc60)
    %3 = arith.addi %arg5, %c255_i32 : i32 loc(#loc61)
    %4 = arith.divsi %3, %c256_i32 : i32 loc(#loc62)
    %5 = arith.muli %4, %c2_i32 : i32 loc(#loc7)
    %6 = arith.divsi %0, %5 : i32 loc(#loc8)
    %7 = arith.muli %6, %c2_i32 : i32 loc(#loc9)
    %8 = arith.subi %2, %7 : i32 loc(#loc10)
    %9 = arith.minsi %8, %c2_i32 : i32 loc(#loc11)
    %10 = arith.remsi %0, %9 : i32 loc(#loc12)
    %11 = arith.addi %7, %10 : i32 loc(#loc13)
    %12 = arith.remsi %0, %5 : i32 loc(#loc14)
    %13 = arith.divsi %12, %9 : i32 loc(#loc15)
    %14 = arith.muli %11, %c256_i32 : i32 loc(#loc16)
    %15 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc17)
    %16 = tt.splat %14 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %17 = arith.addi %16, %15 : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc18)
    %18 = arith.muli %13, %c256_i32 : i32 loc(#loc19)
    %19 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc20)
    %20 = tt.splat %18 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc21)
    %21 = arith.addi %20, %19 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc21)
    %22 = tt.expand_dims %17 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc22)
    %23 = tt.splat %arg7 : i32 -> tensor<256x1xi32, #blocked> loc(#loc23)
    %24 = arith.muli %22, %23 : tensor<256x1xi32, #blocked> loc(#loc23)
    %25 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #blocked> loc(#loc24)
    %26 = tt.addptr %25, %24 : tensor<256x1x!tt.ptr<f16>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc24)
    %27 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc25)
    %28 = tt.expand_dims %27 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc25)
    %29 = tt.broadcast %26 : tensor<256x1x!tt.ptr<f16>, #blocked> -> tensor<256x64x!tt.ptr<f16>, #blocked> loc(#loc26)
    %30 = tt.broadcast %28 : tensor<1x64xi32, #blocked> -> tensor<256x64xi32, #blocked> loc(#loc26)
    %31 = tt.addptr %29, %30 : tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<256x64xi32, #blocked> loc(#loc26)
    %32 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc27)
    %34 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked1> loc(#loc28)
    %35 = tt.addptr %34, %33 : tensor<64x1x!tt.ptr<f16>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc28)
    %36 = tt.expand_dims %21 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc29)
    %37 = tt.splat %arg8 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc30)
    %38 = arith.muli %36, %37 : tensor<1x256xi32, #blocked1> loc(#loc30)
    %39 = tt.broadcast %35 : tensor<64x1x!tt.ptr<f16>, #blocked1> -> tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc31)
    %40 = tt.broadcast %38 : tensor<1x256xi32, #blocked1> -> tensor<64x256xi32, #blocked1> loc(#loc31)
    %41 = tt.addptr %39, %40 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1> loc(#loc31)
    %42 = arith.addi %arg6, %c63_i32 : i32 loc(#loc63)
    %43 = arith.divsi %42, %c64_i32 : i32 loc(#loc64)
    %44 = tt.load %31 : tensor<256x64x!tt.ptr<f16>, #blocked> loc(#loc33)
    %45 = triton_gpu.local_alloc %44 : (tensor<256x64xf16, #blocked>) -> !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory> loc(#loc33)
    %46 = tt.load %41 : tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc34)
    %47 = triton_gpu.local_alloc %46 : (tensor<64x256xf16, #blocked1>) -> !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory> loc(#loc34)
    %48 = tt.addptr %31, %cst : tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<256x64xi32, #blocked> loc(#loc35)
    %49 = tt.addptr %41, %cst_0 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1> loc(#loc36)
    %50 = arith.subi %43, %c1_i32 : i32 loc(#loc37)
    %51:3 = scf.for %arg10 = %c0_i32 to %50 step %c1_i32 iter_args(%arg11 = %cst_1, %arg12 = %48, %arg13 = %49) -> (tensor<256x256xf32, #mma>, tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<64x256x!tt.ptr<f16>, #blocked1>)  : i32 {
      %82 = tt.load %arg12 : tensor<256x64x!tt.ptr<f16>, #blocked> loc(#loc33)
      %83 = tt.load %arg13 : tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc34)
      %84 = triton_gpu.local_load %45 : !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory> -> tensor<256x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc33)
      %85 = triton_gpu.local_load %47 : !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory> -> tensor<64x256xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc34)
      %86 = tt.dot %84, %85, %arg11 : tensor<256x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc38)
      %87 = tt.addptr %arg12, %cst : tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<256x64xi32, #blocked> loc(#loc35)
      %88 = tt.addptr %arg13, %cst_0 : tensor<64x256x!tt.ptr<f16>, #blocked1>, tensor<64x256xi32, #blocked1> loc(#loc36)
      triton_gpu.local_store %82, %45 : tensor<256x64xf16, #blocked> -> !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory> loc(#loc33)
      triton_gpu.local_store %83, %47 : tensor<64x256xf16, #blocked1> -> !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory> loc(#loc34)
      scf.yield %86, %87, %88 : tensor<256x256xf32, #mma>, tensor<256x64x!tt.ptr<f16>, #blocked>, tensor<64x256x!tt.ptr<f16>, #blocked1> loc(#loc39)
    } loc(#loc37)
    %52 = triton_gpu.local_load %45 : !tt.memdesc<256x64xf16, #shared, #triton_gpu.shared_memory> -> tensor<256x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> loc(#loc33)
    %53 = triton_gpu.local_load %47 : !tt.memdesc<64x256xf16, #shared1, #triton_gpu.shared_memory> -> tensor<64x256xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> loc(#loc34)
    %54 = tt.dot %52, %53, %51#0 : tensor<256x64xf16, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 8}>> * tensor<64x256xf16, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 8}>> -> tensor<256x256xf32, #mma> loc(#loc38)
    %55 = arith.truncf %54 : tensor<256x256xf32, #mma> to tensor<256x256xf16, #mma> loc(#loc40)
    %56 = arith.muli %11, %c256_i32 : i32 loc(#loc41)
    %57 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc42)
    %58 = tt.splat %56 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc43)
    %59 = arith.addi %58, %57 : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc43)
    %60 = arith.muli %13, %c256_i32 : i32 loc(#loc44)
    %61 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc45)
    %62 = tt.splat %60 : i32 -> tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc46)
    %63 = arith.addi %62, %61 : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc46)
    %64 = tt.expand_dims %59 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi32, #mma> loc(#loc47)
    %65 = tt.splat %arg9 : i32 -> tensor<256x1xi32, #mma> loc(#loc48)
    %66 = arith.muli %65, %64 : tensor<256x1xi32, #mma> loc(#loc48)
    %67 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<256x1x!tt.ptr<f16>, #mma> loc(#loc49)
    %68 = tt.addptr %67, %66 : tensor<256x1x!tt.ptr<f16>, #mma>, tensor<256x1xi32, #mma> loc(#loc49)
    %69 = tt.expand_dims %63 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xi32, #mma> loc(#loc50)
    %70 = tt.broadcast %68 : tensor<256x1x!tt.ptr<f16>, #mma> -> tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc51)
    %71 = tt.broadcast %69 : tensor<1x256xi32, #mma> -> tensor<256x256xi32, #mma> loc(#loc51)
    %72 = tt.addptr %70, %71 : tensor<256x256x!tt.ptr<f16>, #mma>, tensor<256x256xi32, #mma> loc(#loc51)
    %73 = tt.expand_dims %59 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi32, #mma> loc(#loc52)
    %74 = tt.splat %arg4 : i32 -> tensor<256x1xi32, #mma> loc(#loc53)
    %75 = arith.cmpi slt, %73, %74 : tensor<256x1xi32, #mma> loc(#loc53)
    %76 = tt.expand_dims %63 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x256xi32, #mma> loc(#loc54)
    %77 = tt.splat %arg5 : i32 -> tensor<1x256xi32, #mma> loc(#loc55)
    %78 = arith.cmpi slt, %76, %77 : tensor<1x256xi32, #mma> loc(#loc55)
    %79 = tt.broadcast %75 : tensor<256x1xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc56)
    %80 = tt.broadcast %78 : tensor<1x256xi1, #mma> -> tensor<256x256xi1, #mma> loc(#loc56)
    %81 = arith.andi %79, %80 : tensor<256x256xi1, #mma> loc(#loc56)
    tt.store %72, %55, %81 : tensor<256x256x!tt.ptr<f16>, #mma> loc(#loc57)
    tt.return loc(#loc58)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":24:24)
#loc3 = loc("/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":26:27)
#loc5 = loc("/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":27:27)
#loc7 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":32:42)
#loc8 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":33:26)
#loc9 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":34:33)
#loc10 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":35:39)
#loc11 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":35:52)
#loc12 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":36:37)
#loc13 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":36:31)
#loc14 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":37:23)
#loc15 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":37:44)
#loc16 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":42:23)
#loc17 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":42:51)
#loc18 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":42:38)
#loc19 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":43:23)
#loc20 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":43:51)
#loc21 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":43:38)
#loc22 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":44:29)
#loc23 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":44:40)
#loc24 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":44:21)
#loc25 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":44:59)
#loc26 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":44:52)
#loc27 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":45:28)
#loc28 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":45:21)
#loc29 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":45:59)
#loc30 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":45:70)
#loc31 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":45:51)
#loc32 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":51:33)
#loc33 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":52:20)
#loc34 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":53:20)
#loc35 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":55:18)
#loc36 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":56:18)
#loc37 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":51:22)
#loc38 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":54:33)
#loc39 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":56:8)
#loc40 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":57:23)
#loc41 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":60:22)
#loc42 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":60:50)
#loc43 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":60:37)
#loc44 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":61:22)
#loc45 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":61:50)
#loc46 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":61:37)
#loc47 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":62:41)
#loc48 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":62:33)
#loc49 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":62:21)
#loc50 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":62:72)
#loc51 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":62:52)
#loc52 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":63:22)
#loc53 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":63:33)
#loc54 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":63:47)
#loc55 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":63:58)
#loc56 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":63:39)
#loc57 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":65:25)
#loc58 = loc("/triton_rocm/scripts/amd/gemm/generated_kernel4864-4096-8256-0.py":64:4)
#loc59 = loc(callsite(#loc3 at #loc4))
#loc60 = loc(callsite(#loc5 at #loc4))
#loc61 = loc(callsite(#loc3 at #loc6))
#loc62 = loc(callsite(#loc5 at #loc6))
#loc63 = loc(callsite(#loc3 at #loc32))
#loc64 = loc(callsite(#loc5 at #loc32))
